/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef NME_CORE_XML_SIGNALS_H
#define NME_CORE_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define NME_CORE_START_REQ_ID                                        0x6101
#define NME_CORE_START_CFM_ID                                        0x6102
#define NME_CORE_STOP_REQ_ID                                         0x6103
#define NME_CORE_STOP_CFM_ID                                         0x6104


/* -------------------------- nme_core_start_req -------------------------- */
typedef struct NmeCoreStartReq_Evt
{
    FsmEvent                        common;
} NmeCoreStartReq_Evt;

#define send_nme_core_start_req(context, pid) \
{ \
    NmeCoreStartReq_Evt *evt = (NmeCoreStartReq_Evt*) CsrPmalloc(sizeof(NmeCoreStartReq_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, NME_CORE_START_REQ_ID); \
}

#define send_nme_core_start_req_external(context, pid) \
{ \
    NmeCoreStartReq_Evt *evt = (NmeCoreStartReq_Evt*) CsrPmalloc(sizeof(NmeCoreStartReq_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NME_CORE_START_REQ_ID); \
}

/* -------------------------- nme_core_start_cfm -------------------------- */
typedef struct NmeCoreStartCfm_Evt
{
    FsmEvent                        common;
    unifi_Status                    status;
} NmeCoreStartCfm_Evt;

#define send_nme_core_start_cfm(context, pid, p_status) \
{ \
    NmeCoreStartCfm_Evt *evt = (NmeCoreStartCfm_Evt*) CsrPmalloc(sizeof(NmeCoreStartCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NME_CORE_START_CFM_ID); \
}

#define send_nme_core_start_cfm_external(context, pid, p_status) \
{ \
    NmeCoreStartCfm_Evt *evt = (NmeCoreStartCfm_Evt*) CsrPmalloc(sizeof(NmeCoreStartCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NME_CORE_START_CFM_ID); \
}

/* -------------------------- nme_core_stop_req -------------------------- */
typedef struct NmeCoreStopReq_Evt
{
    FsmEvent                        common;
} NmeCoreStopReq_Evt;

#define send_nme_core_stop_req(context, pid) \
{ \
    NmeCoreStopReq_Evt *evt = (NmeCoreStopReq_Evt*) CsrPmalloc(sizeof(NmeCoreStopReq_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, NME_CORE_STOP_REQ_ID); \
}

#define send_nme_core_stop_req_external(context, pid) \
{ \
    NmeCoreStopReq_Evt *evt = (NmeCoreStopReq_Evt*) CsrPmalloc(sizeof(NmeCoreStopReq_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NME_CORE_STOP_REQ_ID); \
}

/* -------------------------- nme_core_stop_cfm -------------------------- */
typedef struct NmeCoreStopCfm_Evt
{
    FsmEvent                        common;
    unifi_Status                    status;
} NmeCoreStopCfm_Evt;

#define send_nme_core_stop_cfm(context, pid, p_status) \
{ \
    NmeCoreStopCfm_Evt *evt = (NmeCoreStopCfm_Evt*) CsrPmalloc(sizeof(NmeCoreStopCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NME_CORE_STOP_CFM_ID); \
}

#define send_nme_core_stop_cfm_external(context, pid, p_status) \
{ \
    NmeCoreStopCfm_Evt *evt = (NmeCoreStopCfm_Evt*) CsrPmalloc(sizeof(NmeCoreStopCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NME_CORE_STOP_CFM_ID); \
}





#ifdef __cplusplus
}
#endif

#endif /* NME_CORE_XML_SIGNALS_H */
