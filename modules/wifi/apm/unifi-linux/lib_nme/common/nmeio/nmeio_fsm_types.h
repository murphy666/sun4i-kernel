/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef NME_XML_TYPES_H
#define NME_XML_TYPES_H

#ifdef __cplusplus
extern "C" {
#endif

typedef enum unifi_CertificateStatus
{
    unifi_CertificateValid                                  = 0x00,
    unifi_CertificateUnsupported                            = 0x01,
    unifi_CertificateRevoked                                = 0x02,
    unifi_CertificateExpired                                = 0x03,
    unifi_CertificateUnknown                                = 0x04
} unifi_CertificateStatus;

typedef enum unifi_ConnectionStatus
{
    unifi_ConnectionStatusDisconnected                      = 0x00,
    unifi_ConnectionStatusConnecting                        = 0x01,
    unifi_ConnectionStatusAuthenticating                    = 0x02,
    unifi_ConnectionStatusConnected                         = 0x03,
    unifi_ConnectionStatusDisconnecting                     = 0x04
} unifi_ConnectionStatus;

typedef enum unifi_CredentialType
{
    unifi_CredentialTypeOpenSystem                          = 0x0000,
    unifi_CredentialTypeWep64                               = 0x0001,
    unifi_CredentialTypeWep128                              = 0x0002,
    unifi_CredentialTypeWpaPsk                              = 0x0003,
    unifi_CredentialTypeWpaPassphrase                       = 0x0004,
    unifi_CredentialTypeWpa2Psk                             = 0x0005,
    unifi_CredentialTypeWpa2Passphrase                      = 0x0006,
    unifi_CredentialType8021xTls                            = 0x0007,
    unifi_CredentialType8021xTtls                           = 0x0008,
    unifi_CredentialType8021xPeapGtc                        = 0x0009,
    unifi_CredentialType8021xPeapMschapv2                   = 0x000A,
    unifi_CredentialType8021xLeap                           = 0x000B,
    unifi_CredentialType8021xFast                           = 0x000C,
    unifi_CredentialTypeWapiPsk                             = 0x000D,
    unifi_CredentialTypeWapiPassphrase                      = 0x000E,
    unifi_CredentialTypeWapi                                = 0x000F
} unifi_CredentialType;

typedef enum unifi_NmeIndicationsMask
{
    unifi_IndProfileDisconnect                              = 0x10000000,
    unifi_IndProfileUpdate                                  = 0x20000000,
    unifi_IndCertificateValidate                            = 0x40000000
} unifi_NmeIndicationsMask;

typedef enum unifi_SecError
{
    unifi_SecErrorUnknown                                   = 0x00
} unifi_SecError;



#define CSR_WIF_NME_SAP_API_VERSION_MINOR                  000
#define CSR_WIFI_NME_SAP_API_VERSION_MAJOR                 1




typedef struct unifi_EapCredentials
{
    CsrUint16                       authMode;
    CsrUint16                       encryptionMode;
    char*                           authServerUserIdentity;
    char*                           username;
    char*                           password;
    CsrUint32                       sessionLength;
    CsrUint8                       *session;
} unifi_EapCredentials;

typedef struct unifi_Empty
{
    CsrUint8                        empty;
} unifi_Empty;

typedef struct unifi_FastCredentials
{
    unifi_EapCredentials            eapCredentials;
    CsrBool                         allowPacProvisioning;
    CsrUint32                       pacLength;
    CsrUint8                       *pac;
} unifi_FastCredentials;

typedef struct unifi_LeapCredentials
{
    CsrUint16                       encryptionMode;
    char*                           username;
    char*                           password;
} unifi_LeapCredentials;

typedef struct unifi_Passphrase
{
    CsrUint16                       encryptionMode;
    char*                           passphrase;
} unifi_Passphrase;

typedef struct unifi_ProfileIdentity
{
    unifi_MACAddress                bssid;
    unifi_SSID                      ssid;
} unifi_ProfileIdentity;

typedef struct unifi_Psk
{
    CsrUint16                       encryptionMode;
    CsrUint8                        psk[32];
} unifi_Psk;

typedef struct unifi_TlsCertificate
{
    CsrUint16                       authMode;
    CsrUint16                       encryptionMode;
    char*                           username;
    CsrUint32                       certificateLength;
    CsrUint8                       *certificate;
    CsrUint16                       privateKeyLength;
    CsrUint8                       *privateKey;
    CsrUint32                       sessionLength;
    CsrUint8                       *session;
} unifi_TlsCertificate;

typedef struct unifi_UsernameAndPassword
{
    char*                           username;
    char*                           password;
} unifi_UsernameAndPassword;

typedef struct unifi_WapiCredentials
{
    CsrUint32                       certificateLength;
    CsrUint8                       *certificate;
    CsrUint16                       privateKeyLength;
    CsrUint8                       *privateKey;
    CsrUint32                       caCertificateLength;
    CsrUint8                       *caCertificate;
} unifi_WapiCredentials;

typedef struct unifi_Wep128Keys
{
    unifi_AuthMode                  wepAuthType;
    CsrUint8                        selectedWepKey;
    CsrUint8                        key1[13];
    CsrUint8                        key2[13];
    CsrUint8                        key3[13];
    CsrUint8                        key4[13];
} unifi_Wep128Keys;

typedef struct unifi_Wep64Keys
{
    unifi_AuthMode                  wepAuthType;
    CsrUint8                        selectedWepKey;
    CsrUint8                        key1[5];
    CsrUint8                        key2[5];
    CsrUint8                        key3[5];
    CsrUint8                        key4[5];
} unifi_Wep64Keys;

typedef struct unifi_WpsPin
{
    char*                           pin;
} unifi_WpsPin;

typedef struct unifi_ConnectAttempt
{
    unifi_MACAddress                bssid;
    unifi_Status                    status;
    unifi_SecError                  securityError;
} unifi_ConnectAttempt;

typedef struct unifi_Credentials
{
    unifi_CredentialType            credentialType;
    union {
        unifi_Psk                       wpaPsk;
        unifi_Empty                     openSystem;
        unifi_Passphrase                wapiPassphrase;
        unifi_LeapCredentials           leap;
        unifi_Passphrase                wpaPassphrase;
        unifi_EapCredentials            peapGtc;
        unifi_TlsCertificate            tls;
        unifi_Psk                       wapiPsk;
        unifi_Wep128Keys                wep128Key;
        unifi_Wep64Keys                 wep64Key;
        unifi_FastCredentials           fast;
        unifi_Passphrase                wpa2Passphrase;
        unifi_EapCredentials            ttls;
        unifi_Psk                       wpa2Psk;
        unifi_WapiCredentials           wapi;
        unifi_EapCredentials            peapMsChapV2;
    } credential;

} unifi_Credentials;

typedef struct unifi_Profile
{
    unifi_ProfileIdentity           profileIdentity;
    CsrUint8                        wmmQosCapabilitiesMask;
    unifi_BSSType                   bssType;
    CsrUint8                        channelNo;
    CsrUint8                        ccxOptionsMask;
    CsrBool                         cloakedSsid;
    unifi_Credentials               credentials;
} unifi_Profile;





#ifdef __cplusplus
}
#endif

#endif /* NME_XML_TYPES_H */
