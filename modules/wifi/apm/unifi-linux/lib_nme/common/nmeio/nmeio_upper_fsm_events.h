/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef NME_XML_SIGNALS_H
#define NME_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define UNIFI_NME_WIFI_ON_REQ_ID                                     0x9001
#define UNIFI_NME_WIFI_ON_CFM_ID                                     0x9002
#define UNIFI_NME_WIFI_OFF_REQ_ID                                    0x9003
#define UNIFI_NME_WIFI_OFF_CFM_ID                                    0x9004
#define UNIFI_NME_WIFI_OFF_IND_ID                                    0x9005
#define UNIFI_NME_WIFI_FLIGHTMODE_REQ_ID                             0x9006
#define UNIFI_NME_WIFI_FLIGHTMODE_CFM_ID                             0x9007
#define UNIFI_NME_SET_VALUE_REQ_ID                                   0x9008
#define UNIFI_NME_SET_VALUE_CFM_ID                                   0x9009
#define UNIFI_NME_GET_VALUE_REQ_ID                                   0x900A
#define UNIFI_NME_GET_VALUE_CFM_ID                                   0x900B
#define UNIFI_NME_MIB_SET_REQ_ID                                     0x900C
#define UNIFI_NME_MIB_SET_CFM_ID                                     0x900D
#define UNIFI_NME_MIB_GET_REQ_ID                                     0x900E
#define UNIFI_NME_MIB_GET_CFM_ID                                     0x900F
#define UNIFI_NME_MIB_GET_NEXT_REQ_ID                                0x9010
#define UNIFI_NME_MIB_GET_NEXT_CFM_ID                                0x9011
#define UNIFI_NME_SCAN_FULL_REQ_ID                                   0x9012
#define UNIFI_NME_SCAN_FULL_CFM_ID                                   0x9013
#define UNIFI_NME_SCAN_RESULTS_GET_REQ_ID                            0x9014
#define UNIFI_NME_SCAN_RESULTS_GET_CFM_ID                            0x9015
#define UNIFI_NME_SCAN_RESULT_IND_ID                                 0x9016
#define UNIFI_NME_CONNECT_REQ_ID                                     0x9017
#define UNIFI_NME_CONNECT_CFM_ID                                     0x9018
#define UNIFI_NME_MEDIA_STATUS_IND_ID                                0x9019
#define UNIFI_NME_CONNECTION_QUALITY_IND_ID                          0x901A
#define UNIFI_NME_DISCONNECT_REQ_ID                                  0x901B
#define UNIFI_NME_DISCONNECT_CFM_ID                                  0x901C
#define UNIFI_NME_MULTICAST_ADDRESS_REQ_ID                           0x901D
#define UNIFI_NME_MULTICAST_ADDRESS_CFM_ID                           0x901E
#define UNIFI_NME_MIC_FAILURE_IND_ID                                 0x901F
#define UNIFI_NME_PMKID_CANDIDATE_LIST_IND_ID                        0x9020
#define UNIFI_NME_PMKID_REQ_ID                                       0x9021
#define UNIFI_NME_PMKID_CFM_ID                                       0x9022
#define UNIFI_NME_KEY_REQ_ID                                         0x9023
#define UNIFI_NME_KEY_CFM_ID                                         0x9024
#define UNIFI_NME_PACKET_FILTER_SET_REQ_ID                           0x9025
#define UNIFI_NME_PACKET_FILTER_SET_CFM_ID                           0x9026
#define UNIFI_NME_TSPEC_REQ_ID                                       0x9027
#define UNIFI_NME_TSPEC_CFM_ID                                       0x9028
#define UNIFI_NME_TSPEC_IND_ID                                       0x9029
#define UNIFI_NME_SCAN_RESULTS_FLUSH_REQ_ID                          0x902A
#define UNIFI_NME_SCAN_RESULTS_FLUSH_CFM_ID                          0x902B
#define UNIFI_NME_BLACKLIST_REQ_ID                                   0x902C
#define UNIFI_NME_BLACKLIST_CFM_ID                                   0x902D
#define UNIFI_NME_ROAM_START_IND_ID                                  0x902E
#define UNIFI_NME_ROAM_COMPLETE_IND_ID                               0x902F
#define UNIFI_NME_ASSOCIATION_START_IND_ID                           0x9030
#define UNIFI_NME_ASSOCIATION_COMPLETE_IND_ID                        0x9031
#define UNIFI_NME_IBSS_STATION_IND_ID                                0x9032
#define UNIFI_NME_EVENT_MASK_SET_REQ_ID                              0x9033
#define UNIFI_NME_EVENT_MASK_SET_CFM_ID                              0x9034
#define UNIFI_NME_RESTRICTED_ACCESS_ENABLE_REQ_ID                    0x9035
#define UNIFI_NME_RESTRICTED_ACCESS_ENABLE_CFM_ID                    0x9036
#define UNIFI_NME_RESTRICTED_ACCESS_DISABLE_REQ_ID                   0x9037
#define UNIFI_NME_RESTRICTED_ACCESS_DISABLE_CFM_ID                   0x9038
#define UNIFI_NME_PROFILE_SET_REQ_ID                                 0xa001
#define UNIFI_NME_PROFILE_SET_CFM_ID                                 0xa002
#define UNIFI_NME_PROFILE_DELETE_REQ_ID                              0xa003
#define UNIFI_NME_PROFILE_DELETE_CFM_ID                              0xa004
#define UNIFI_NME_PROFILE_DELETE_ALL_REQ_ID                          0xa005
#define UNIFI_NME_PROFILE_DELETE_ALL_CFM_ID                          0xa006
#define UNIFI_NME_PROFILE_ORDER_SET_REQ_ID                           0xa007
#define UNIFI_NME_PROFILE_ORDER_SET_CFM_ID                           0xa008
#define UNIFI_NME_PROFILE_CONNECT_REQ_ID                             0xa009
#define UNIFI_NME_PROFILE_CONNECT_CFM_ID                             0xa00a
#define UNIFI_NME_WPS_REQ_ID                                         0xa00b
#define UNIFI_NME_WPS_CFM_ID                                         0xa00c
#define UNIFI_NME_WPS_CANCEL_REQ_ID                                  0xa00d
#define UNIFI_NME_WPS_CANCEL_CFM_ID                                  0xa00e
#define UNIFI_NME_CONNECTION_STATUS_GET_REQ_ID                       0xa00f
#define UNIFI_NME_CONNECTION_STATUS_GET_CFM_ID                       0xa010
#define UNIFI_NME_CERTIFICATE_VALIDATE_IND_ID                        0xa011
#define UNIFI_NME_CERTIFICATE_VALIDATE_RSP_ID                        0xa012
#define UNIFI_NME_PROFILE_UPDATE_IND_ID                              0xa013
#define UNIFI_NME_PROFILE_DISCONNECT_IND_ID                          0xa014


/* -------------------------- unifi_nme_association_complete_ind -------------------------- */
typedef struct UnifiNmeAssociationCompleteInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_Status                    status;
    unifi_ConnectionInfo            connectionInfo;
    unifi_IEEE80211Reason           deauthReason;
} UnifiNmeAssociationCompleteInd_Evt;

#define send_unifi_nme_association_complete_ind(context, pid, p_appHandlesCount, p_appHandles, p_status, p_connectionInfo, p_deauthReason) \
{ \
    UnifiNmeAssociationCompleteInd_Evt *evt = (UnifiNmeAssociationCompleteInd_Evt*) CsrPmalloc(sizeof(UnifiNmeAssociationCompleteInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->status               = p_status; \
    evt->connectionInfo       = p_connectionInfo; \
    evt->deauthReason         = p_deauthReason; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_ASSOCIATION_COMPLETE_IND_ID); \
}

#define send_unifi_nme_association_complete_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_status, p_connectionInfo, p_deauthReason) \
{ \
    UnifiNmeAssociationCompleteInd_Evt *evt = (UnifiNmeAssociationCompleteInd_Evt*) CsrPmalloc(sizeof(UnifiNmeAssociationCompleteInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->status               = p_status; \
    evt->connectionInfo       = p_connectionInfo; \
    evt->deauthReason         = p_deauthReason; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_ASSOCIATION_COMPLETE_IND_ID); \
}

/* -------------------------- unifi_nme_association_start_ind -------------------------- */
typedef struct UnifiNmeAssociationStartInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_MACAddress                address;
    unifi_SSID                      ssid;
} UnifiNmeAssociationStartInd_Evt;

#define send_unifi_nme_association_start_ind(context, pid, p_appHandlesCount, p_appHandles, p_address, p_ssid) \
{ \
    UnifiNmeAssociationStartInd_Evt *evt = (UnifiNmeAssociationStartInd_Evt*) CsrPmalloc(sizeof(UnifiNmeAssociationStartInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->address              = p_address; \
    evt->ssid                 = p_ssid; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_ASSOCIATION_START_IND_ID); \
}

#define send_unifi_nme_association_start_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_address, p_ssid) \
{ \
    UnifiNmeAssociationStartInd_Evt *evt = (UnifiNmeAssociationStartInd_Evt*) CsrPmalloc(sizeof(UnifiNmeAssociationStartInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->address              = p_address; \
    evt->ssid                 = p_ssid; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_ASSOCIATION_START_IND_ID); \
}

/* -------------------------- unifi_nme_blacklist_req -------------------------- */
typedef struct UnifiNmeBlacklistReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ListAction                action;
    CsrUint8                        setAddressCount;
    unifi_MACAddress               *setAddresses;
} UnifiNmeBlacklistReq_Evt;

#define send_unifi_nme_blacklist_req(context, pid, p_appHandle, p_action, p_setAddressCount, p_setAddresses) \
{ \
    UnifiNmeBlacklistReq_Evt *evt = (UnifiNmeBlacklistReq_Evt*) CsrPmalloc(sizeof(UnifiNmeBlacklistReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->setAddressCount      = p_setAddressCount; \
    evt->setAddresses         = p_setAddresses; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_BLACKLIST_REQ_ID); \
}

#define send_unifi_nme_blacklist_req_external(context, pid, p_appHandle, p_action, p_setAddressCount, p_setAddresses) \
{ \
    UnifiNmeBlacklistReq_Evt *evt = (UnifiNmeBlacklistReq_Evt*) CsrPmalloc(sizeof(UnifiNmeBlacklistReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->setAddressCount      = p_setAddressCount; \
    evt->setAddresses         = p_setAddresses; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_BLACKLIST_REQ_ID); \
}

/* -------------------------- unifi_nme_blacklist_cfm -------------------------- */
typedef struct UnifiNmeBlacklistCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_ListAction                action;
    CsrUint8                        getAddressCount;
    unifi_MACAddress               *getAddresses;
} UnifiNmeBlacklistCfm_Evt;

#define send_unifi_nme_blacklist_cfm(context, pid, p_appHandle, p_status, p_action, p_getAddressCount, p_getAddresses) \
{ \
    UnifiNmeBlacklistCfm_Evt *evt = (UnifiNmeBlacklistCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeBlacklistCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    evt->getAddressCount      = p_getAddressCount; \
    evt->getAddresses         = p_getAddresses; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_BLACKLIST_CFM_ID); \
}

#define send_unifi_nme_blacklist_cfm_external(context, pid, p_appHandle, p_status, p_action, p_getAddressCount, p_getAddresses) \
{ \
    UnifiNmeBlacklistCfm_Evt *evt = (UnifiNmeBlacklistCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeBlacklistCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    evt->getAddressCount      = p_getAddressCount; \
    evt->getAddresses         = p_getAddresses; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_BLACKLIST_CFM_ID); \
}

/* -------------------------- unifi_nme_certificate_validate_ind -------------------------- */
typedef struct UnifiNmeCertificateValidateInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    CsrUint8                        validationId;
    CsrUint32                       certificateLength;
    CsrUint8                       *certificate;
} UnifiNmeCertificateValidateInd_Evt;

#define send_unifi_nme_certificate_validate_ind(context, pid, p_appHandlesCount, p_appHandles, p_validationId, p_certificateLength, p_certificate) \
{ \
    UnifiNmeCertificateValidateInd_Evt *evt = (UnifiNmeCertificateValidateInd_Evt*) CsrPmalloc(sizeof(UnifiNmeCertificateValidateInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->validationId         = p_validationId; \
    evt->certificateLength    = p_certificateLength; \
    evt->certificate          = p_certificate; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CERTIFICATE_VALIDATE_IND_ID); \
}

#define send_unifi_nme_certificate_validate_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_validationId, p_certificateLength, p_certificate) \
{ \
    UnifiNmeCertificateValidateInd_Evt *evt = (UnifiNmeCertificateValidateInd_Evt*) CsrPmalloc(sizeof(UnifiNmeCertificateValidateInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->validationId         = p_validationId; \
    evt->certificateLength    = p_certificateLength; \
    evt->certificate          = p_certificate; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CERTIFICATE_VALIDATE_IND_ID); \
}

/* -------------------------- unifi_nme_certificate_validate_rsp -------------------------- */
typedef struct UnifiNmeCertificateValidateRsp_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        validationId;
    unifi_Status                    status;
    unifi_CertificateStatus         result;
} UnifiNmeCertificateValidateRsp_Evt;

#define send_unifi_nme_certificate_validate_rsp(context, pid, p_appHandle, p_validationId, p_status, p_result) \
{ \
    UnifiNmeCertificateValidateRsp_Evt *evt = (UnifiNmeCertificateValidateRsp_Evt*) CsrPmalloc(sizeof(UnifiNmeCertificateValidateRsp_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->validationId         = p_validationId; \
    evt->status               = p_status; \
    evt->result               = p_result; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CERTIFICATE_VALIDATE_RSP_ID); \
}

#define send_unifi_nme_certificate_validate_rsp_external(context, pid, p_appHandle, p_validationId, p_status, p_result) \
{ \
    UnifiNmeCertificateValidateRsp_Evt *evt = (UnifiNmeCertificateValidateRsp_Evt*) CsrPmalloc(sizeof(UnifiNmeCertificateValidateRsp_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->validationId         = p_validationId; \
    evt->status               = p_status; \
    evt->result               = p_result; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CERTIFICATE_VALIDATE_RSP_ID); \
}

/* -------------------------- unifi_nme_connect_req -------------------------- */
typedef struct UnifiNmeConnectReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ConnectionConfig          connectionConfig;
} UnifiNmeConnectReq_Evt;

#define send_unifi_nme_connect_req(context, pid, p_appHandle, p_connectionConfig) \
{ \
    UnifiNmeConnectReq_Evt *evt = (UnifiNmeConnectReq_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->connectionConfig     = p_connectionConfig; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECT_REQ_ID); \
}

#define send_unifi_nme_connect_req_external(context, pid, p_appHandle, p_connectionConfig) \
{ \
    UnifiNmeConnectReq_Evt *evt = (UnifiNmeConnectReq_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->connectionConfig     = p_connectionConfig; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECT_REQ_ID); \
}

/* -------------------------- unifi_nme_connect_cfm -------------------------- */
typedef struct UnifiNmeConnectCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeConnectCfm_Evt;

#define send_unifi_nme_connect_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeConnectCfm_Evt *evt = (UnifiNmeConnectCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECT_CFM_ID); \
}

#define send_unifi_nme_connect_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeConnectCfm_Evt *evt = (UnifiNmeConnectCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECT_CFM_ID); \
}

/* -------------------------- unifi_nme_connection_quality_ind -------------------------- */
typedef struct UnifiNmeConnectionQualityInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_LinkQuality               linkQuality;
} UnifiNmeConnectionQualityInd_Evt;

#define send_unifi_nme_connection_quality_ind(context, pid, p_appHandlesCount, p_appHandles, p_linkQuality) \
{ \
    UnifiNmeConnectionQualityInd_Evt *evt = (UnifiNmeConnectionQualityInd_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectionQualityInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->linkQuality          = p_linkQuality; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECTION_QUALITY_IND_ID); \
}

#define send_unifi_nme_connection_quality_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_linkQuality) \
{ \
    UnifiNmeConnectionQualityInd_Evt *evt = (UnifiNmeConnectionQualityInd_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectionQualityInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->linkQuality          = p_linkQuality; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECTION_QUALITY_IND_ID); \
}

/* -------------------------- unifi_nme_connection_status_get_req -------------------------- */
typedef struct UnifiNmeConnectionStatusGetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeConnectionStatusGetReq_Evt;

#define send_unifi_nme_connection_status_get_req(context, pid, p_appHandle) \
{ \
    UnifiNmeConnectionStatusGetReq_Evt *evt = (UnifiNmeConnectionStatusGetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectionStatusGetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECTION_STATUS_GET_REQ_ID); \
}

#define send_unifi_nme_connection_status_get_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeConnectionStatusGetReq_Evt *evt = (UnifiNmeConnectionStatusGetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectionStatusGetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECTION_STATUS_GET_REQ_ID); \
}

/* -------------------------- unifi_nme_connection_status_get_cfm -------------------------- */
typedef struct UnifiNmeConnectionStatusGetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_ConnectionStatus          connectionStatus;
} UnifiNmeConnectionStatusGetCfm_Evt;

#define send_unifi_nme_connection_status_get_cfm(context, pid, p_appHandle, p_status, p_connectionStatus) \
{ \
    UnifiNmeConnectionStatusGetCfm_Evt *evt = (UnifiNmeConnectionStatusGetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectionStatusGetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->connectionStatus     = p_connectionStatus; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECTION_STATUS_GET_CFM_ID); \
}

#define send_unifi_nme_connection_status_get_cfm_external(context, pid, p_appHandle, p_status, p_connectionStatus) \
{ \
    UnifiNmeConnectionStatusGetCfm_Evt *evt = (UnifiNmeConnectionStatusGetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeConnectionStatusGetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->connectionStatus     = p_connectionStatus; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_CONNECTION_STATUS_GET_CFM_ID); \
}

/* -------------------------- unifi_nme_disconnect_req -------------------------- */
typedef struct UnifiNmeDisconnectReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeDisconnectReq_Evt;

#define send_unifi_nme_disconnect_req(context, pid, p_appHandle) \
{ \
    UnifiNmeDisconnectReq_Evt *evt = (UnifiNmeDisconnectReq_Evt*) CsrPmalloc(sizeof(UnifiNmeDisconnectReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_DISCONNECT_REQ_ID); \
}

#define send_unifi_nme_disconnect_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeDisconnectReq_Evt *evt = (UnifiNmeDisconnectReq_Evt*) CsrPmalloc(sizeof(UnifiNmeDisconnectReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_DISCONNECT_REQ_ID); \
}

/* -------------------------- unifi_nme_disconnect_cfm -------------------------- */
typedef struct UnifiNmeDisconnectCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeDisconnectCfm_Evt;

#define send_unifi_nme_disconnect_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeDisconnectCfm_Evt *evt = (UnifiNmeDisconnectCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeDisconnectCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_DISCONNECT_CFM_ID); \
}

#define send_unifi_nme_disconnect_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeDisconnectCfm_Evt *evt = (UnifiNmeDisconnectCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeDisconnectCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_DISCONNECT_CFM_ID); \
}

/* -------------------------- unifi_nme_event_mask_set_req -------------------------- */
typedef struct UnifiNmeEventMaskSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint32                       indMask;
} UnifiNmeEventMaskSetReq_Evt;

#define send_unifi_nme_event_mask_set_req(context, pid, p_appHandle, p_indMask) \
{ \
    UnifiNmeEventMaskSetReq_Evt *evt = (UnifiNmeEventMaskSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeEventMaskSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->indMask              = p_indMask; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_EVENT_MASK_SET_REQ_ID); \
}

#define send_unifi_nme_event_mask_set_req_external(context, pid, p_appHandle, p_indMask) \
{ \
    UnifiNmeEventMaskSetReq_Evt *evt = (UnifiNmeEventMaskSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeEventMaskSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->indMask              = p_indMask; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_EVENT_MASK_SET_REQ_ID); \
}

/* -------------------------- unifi_nme_event_mask_set_cfm -------------------------- */
typedef struct UnifiNmeEventMaskSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeEventMaskSetCfm_Evt;

#define send_unifi_nme_event_mask_set_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeEventMaskSetCfm_Evt *evt = (UnifiNmeEventMaskSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeEventMaskSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_EVENT_MASK_SET_CFM_ID); \
}

#define send_unifi_nme_event_mask_set_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeEventMaskSetCfm_Evt *evt = (UnifiNmeEventMaskSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeEventMaskSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_EVENT_MASK_SET_CFM_ID); \
}

/* -------------------------- unifi_nme_get_value_req -------------------------- */
typedef struct UnifiNmeGetValueReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_AppValueId                appValueId;
} UnifiNmeGetValueReq_Evt;

#define send_unifi_nme_get_value_req(context, pid, p_appHandle, p_appValueId) \
{ \
    UnifiNmeGetValueReq_Evt *evt = (UnifiNmeGetValueReq_Evt*) CsrPmalloc(sizeof(UnifiNmeGetValueReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->appValueId           = p_appValueId; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_GET_VALUE_REQ_ID); \
}

#define send_unifi_nme_get_value_req_external(context, pid, p_appHandle, p_appValueId) \
{ \
    UnifiNmeGetValueReq_Evt *evt = (UnifiNmeGetValueReq_Evt*) CsrPmalloc(sizeof(UnifiNmeGetValueReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->appValueId           = p_appValueId; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_GET_VALUE_REQ_ID); \
}

/* -------------------------- unifi_nme_get_value_cfm -------------------------- */
typedef struct UnifiNmeGetValueCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_AppValue                  appValue;
} UnifiNmeGetValueCfm_Evt;

#define send_unifi_nme_get_value_cfm(context, pid, p_appHandle, p_status, p_appValue) \
{ \
    UnifiNmeGetValueCfm_Evt *evt = (UnifiNmeGetValueCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeGetValueCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->appValue             = p_appValue; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_GET_VALUE_CFM_ID); \
}

#define send_unifi_nme_get_value_cfm_external(context, pid, p_appHandle, p_status, p_appValue) \
{ \
    UnifiNmeGetValueCfm_Evt *evt = (UnifiNmeGetValueCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeGetValueCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->appValue             = p_appValue; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_GET_VALUE_CFM_ID); \
}

/* -------------------------- unifi_nme_ibss_station_ind -------------------------- */
typedef struct UnifiNmeIbssStationInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_MACAddress                address;
    CsrBool                         isconnected;
} UnifiNmeIbssStationInd_Evt;

#define send_unifi_nme_ibss_station_ind(context, pid, p_appHandlesCount, p_appHandles, p_address, p_isconnected) \
{ \
    UnifiNmeIbssStationInd_Evt *evt = (UnifiNmeIbssStationInd_Evt*) CsrPmalloc(sizeof(UnifiNmeIbssStationInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->address              = p_address; \
    evt->isconnected          = p_isconnected; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_IBSS_STATION_IND_ID); \
}

#define send_unifi_nme_ibss_station_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_address, p_isconnected) \
{ \
    UnifiNmeIbssStationInd_Evt *evt = (UnifiNmeIbssStationInd_Evt*) CsrPmalloc(sizeof(UnifiNmeIbssStationInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->address              = p_address; \
    evt->isconnected          = p_isconnected; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_IBSS_STATION_IND_ID); \
}

/* -------------------------- unifi_nme_key_req -------------------------- */
typedef struct UnifiNmeKeyReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ListAction                action;
    unifi_Key                       key;
} UnifiNmeKeyReq_Evt;

#define send_unifi_nme_key_req(context, pid, p_appHandle, p_action, p_key) \
{ \
    UnifiNmeKeyReq_Evt *evt = (UnifiNmeKeyReq_Evt*) CsrPmalloc(sizeof(UnifiNmeKeyReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->key                  = p_key; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_KEY_REQ_ID); \
}

#define send_unifi_nme_key_req_external(context, pid, p_appHandle, p_action, p_key) \
{ \
    UnifiNmeKeyReq_Evt *evt = (UnifiNmeKeyReq_Evt*) CsrPmalloc(sizeof(UnifiNmeKeyReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->key                  = p_key; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_KEY_REQ_ID); \
}

/* -------------------------- unifi_nme_key_cfm -------------------------- */
typedef struct UnifiNmeKeyCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_ListAction                action;
} UnifiNmeKeyCfm_Evt;

#define send_unifi_nme_key_cfm(context, pid, p_appHandle, p_status, p_action) \
{ \
    UnifiNmeKeyCfm_Evt *evt = (UnifiNmeKeyCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeKeyCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_KEY_CFM_ID); \
}

#define send_unifi_nme_key_cfm_external(context, pid, p_appHandle, p_status, p_action) \
{ \
    UnifiNmeKeyCfm_Evt *evt = (UnifiNmeKeyCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeKeyCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_KEY_CFM_ID); \
}

/* -------------------------- unifi_nme_media_status_ind -------------------------- */
typedef struct UnifiNmeMediaStatusInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_MediaStatus               mediaStatus;
    unifi_ConnectionInfo            connectionInfo;
    unifi_IEEE80211Reason           disassocReason;
    unifi_IEEE80211Reason           deauthReason;
} UnifiNmeMediaStatusInd_Evt;

#define send_unifi_nme_media_status_ind(context, pid, p_appHandlesCount, p_appHandles, p_mediaStatus, p_connectionInfo, p_disassocReason, p_deauthReason) \
{ \
    UnifiNmeMediaStatusInd_Evt *evt = (UnifiNmeMediaStatusInd_Evt*) CsrPmalloc(sizeof(UnifiNmeMediaStatusInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->mediaStatus          = p_mediaStatus; \
    evt->connectionInfo       = p_connectionInfo; \
    evt->disassocReason       = p_disassocReason; \
    evt->deauthReason         = p_deauthReason; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MEDIA_STATUS_IND_ID); \
}

#define send_unifi_nme_media_status_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_mediaStatus, p_connectionInfo, p_disassocReason, p_deauthReason) \
{ \
    UnifiNmeMediaStatusInd_Evt *evt = (UnifiNmeMediaStatusInd_Evt*) CsrPmalloc(sizeof(UnifiNmeMediaStatusInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->mediaStatus          = p_mediaStatus; \
    evt->connectionInfo       = p_connectionInfo; \
    evt->disassocReason       = p_disassocReason; \
    evt->deauthReason         = p_deauthReason; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MEDIA_STATUS_IND_ID); \
}

/* -------------------------- unifi_nme_mib_get_req -------------------------- */
typedef struct UnifiNmeMibGetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       mibAttributeLength;
    CsrUint8                       *mibAttribute;
} UnifiNmeMibGetReq_Evt;

#define send_unifi_nme_mib_get_req(context, pid, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetReq_Evt *evt = (UnifiNmeMibGetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_REQ_ID); \
}

#define send_unifi_nme_mib_get_req_external(context, pid, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetReq_Evt *evt = (UnifiNmeMibGetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_REQ_ID); \
}

/* -------------------------- unifi_nme_mib_get_cfm -------------------------- */
typedef struct UnifiNmeMibGetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    CsrUint16                       mibAttributeLength;
    CsrUint8                       *mibAttribute;
} UnifiNmeMibGetCfm_Evt;

#define send_unifi_nme_mib_get_cfm(context, pid, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetCfm_Evt *evt = (UnifiNmeMibGetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_CFM_ID); \
}

#define send_unifi_nme_mib_get_cfm_external(context, pid, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetCfm_Evt *evt = (UnifiNmeMibGetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_CFM_ID); \
}

/* -------------------------- unifi_nme_mib_get_next_req -------------------------- */
typedef struct UnifiNmeMibGetNextReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       mibAttributeLength;
    CsrUint8                       *mibAttribute;
} UnifiNmeMibGetNextReq_Evt;

#define send_unifi_nme_mib_get_next_req(context, pid, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetNextReq_Evt *evt = (UnifiNmeMibGetNextReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetNextReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_NEXT_REQ_ID); \
}

#define send_unifi_nme_mib_get_next_req_external(context, pid, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetNextReq_Evt *evt = (UnifiNmeMibGetNextReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetNextReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_NEXT_REQ_ID); \
}

/* -------------------------- unifi_nme_mib_get_next_cfm -------------------------- */
typedef struct UnifiNmeMibGetNextCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    CsrUint16                       mibAttributeLength;
    CsrUint8                       *mibAttribute;
} UnifiNmeMibGetNextCfm_Evt;

#define send_unifi_nme_mib_get_next_cfm(context, pid, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetNextCfm_Evt *evt = (UnifiNmeMibGetNextCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetNextCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_NEXT_CFM_ID); \
}

#define send_unifi_nme_mib_get_next_cfm_external(context, pid, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibGetNextCfm_Evt *evt = (UnifiNmeMibGetNextCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMibGetNextCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_GET_NEXT_CFM_ID); \
}

/* -------------------------- unifi_nme_mib_set_req -------------------------- */
typedef struct UnifiNmeMibSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       mibAttributeLength;
    CsrUint8                       *mibAttribute;
} UnifiNmeMibSetReq_Evt;

#define send_unifi_nme_mib_set_req(context, pid, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibSetReq_Evt *evt = (UnifiNmeMibSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMibSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_SET_REQ_ID); \
}

#define send_unifi_nme_mib_set_req_external(context, pid, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
{ \
    UnifiNmeMibSetReq_Evt *evt = (UnifiNmeMibSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMibSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->mibAttributeLength   = p_mibAttributeLength; \
    evt->mibAttribute         = p_mibAttribute; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_SET_REQ_ID); \
}

/* -------------------------- unifi_nme_mib_set_cfm -------------------------- */
typedef struct UnifiNmeMibSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeMibSetCfm_Evt;

#define send_unifi_nme_mib_set_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeMibSetCfm_Evt *evt = (UnifiNmeMibSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMibSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_SET_CFM_ID); \
}

#define send_unifi_nme_mib_set_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeMibSetCfm_Evt *evt = (UnifiNmeMibSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMibSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIB_SET_CFM_ID); \
}

/* -------------------------- unifi_nme_mic_failure_ind -------------------------- */
typedef struct UnifiNmeMicFailureInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    CsrBool                         secondFailure;
    CsrUint16                       count;
    unifi_MACAddress                address;
    unifi_KeyType                   keyType;
    CsrUint16                       keyId;
    CsrUint16                       tsc[4];
} UnifiNmeMicFailureInd_Evt;

#define send_unifi_nme_mic_failure_ind(context, pid, p_appHandlesCount, p_appHandles, p_secondFailure, p_count, p_address, p_keyType, p_keyId, p_tsc) \
{ \
    UnifiNmeMicFailureInd_Evt *evt = (UnifiNmeMicFailureInd_Evt*) CsrPmalloc(sizeof(UnifiNmeMicFailureInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->secondFailure        = p_secondFailure; \
    evt->count                = p_count; \
    evt->address              = p_address; \
    evt->keyType              = p_keyType; \
    evt->keyId                = p_keyId; \
    CsrMemCpy(evt->tsc, p_tsc, 4); \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MIC_FAILURE_IND_ID); \
}

#define send_unifi_nme_mic_failure_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_secondFailure, p_count, p_address, p_keyType, p_keyId, p_tsc) \
{ \
    UnifiNmeMicFailureInd_Evt *evt = (UnifiNmeMicFailureInd_Evt*) CsrPmalloc(sizeof(UnifiNmeMicFailureInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->secondFailure        = p_secondFailure; \
    evt->count                = p_count; \
    evt->address              = p_address; \
    evt->keyType              = p_keyType; \
    evt->keyId                = p_keyId; \
    CsrMemCpy(evt->tsc, p_tsc, 4); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MIC_FAILURE_IND_ID); \
}

/* -------------------------- unifi_nme_multicast_address_req -------------------------- */
typedef struct UnifiNmeMulticastAddressReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ListAction                action;
    CsrUint8                        setAddressesCount;
    unifi_MACAddress               *setAddresses;
} UnifiNmeMulticastAddressReq_Evt;

#define send_unifi_nme_multicast_address_req(context, pid, p_appHandle, p_action, p_setAddressesCount, p_setAddresses) \
{ \
    UnifiNmeMulticastAddressReq_Evt *evt = (UnifiNmeMulticastAddressReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMulticastAddressReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->setAddressesCount    = p_setAddressesCount; \
    evt->setAddresses         = p_setAddresses; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MULTICAST_ADDRESS_REQ_ID); \
}

#define send_unifi_nme_multicast_address_req_external(context, pid, p_appHandle, p_action, p_setAddressesCount, p_setAddresses) \
{ \
    UnifiNmeMulticastAddressReq_Evt *evt = (UnifiNmeMulticastAddressReq_Evt*) CsrPmalloc(sizeof(UnifiNmeMulticastAddressReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->setAddressesCount    = p_setAddressesCount; \
    evt->setAddresses         = p_setAddresses; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MULTICAST_ADDRESS_REQ_ID); \
}

/* -------------------------- unifi_nme_multicast_address_cfm -------------------------- */
typedef struct UnifiNmeMulticastAddressCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_ListAction                action;
    CsrUint8                        getAddressesCount;
    unifi_MACAddress               *getAddresses;
} UnifiNmeMulticastAddressCfm_Evt;

#define send_unifi_nme_multicast_address_cfm(context, pid, p_appHandle, p_status, p_action, p_getAddressesCount, p_getAddresses) \
{ \
    UnifiNmeMulticastAddressCfm_Evt *evt = (UnifiNmeMulticastAddressCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMulticastAddressCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    evt->getAddressesCount    = p_getAddressesCount; \
    evt->getAddresses         = p_getAddresses; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_MULTICAST_ADDRESS_CFM_ID); \
}

#define send_unifi_nme_multicast_address_cfm_external(context, pid, p_appHandle, p_status, p_action, p_getAddressesCount, p_getAddresses) \
{ \
    UnifiNmeMulticastAddressCfm_Evt *evt = (UnifiNmeMulticastAddressCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeMulticastAddressCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    evt->getAddressesCount    = p_getAddressesCount; \
    evt->getAddresses         = p_getAddresses; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_MULTICAST_ADDRESS_CFM_ID); \
}

/* -------------------------- unifi_nme_packet_filter_set_req -------------------------- */
typedef struct UnifiNmePacketFilterSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       filterLength;
    CsrUint8                       *filter;
    unifi_PacketFilterMode          mode;
    unifi_IPV4Address               arpFilterAddress;
} UnifiNmePacketFilterSetReq_Evt;

#define send_unifi_nme_packet_filter_set_req(context, pid, p_appHandle, p_filterLength, p_filter, p_mode, p_arpFilterAddress) \
{ \
    UnifiNmePacketFilterSetReq_Evt *evt = (UnifiNmePacketFilterSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmePacketFilterSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->filterLength         = p_filterLength; \
    evt->filter               = p_filter; \
    evt->mode                 = p_mode; \
    evt->arpFilterAddress     = p_arpFilterAddress; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PACKET_FILTER_SET_REQ_ID); \
}

#define send_unifi_nme_packet_filter_set_req_external(context, pid, p_appHandle, p_filterLength, p_filter, p_mode, p_arpFilterAddress) \
{ \
    UnifiNmePacketFilterSetReq_Evt *evt = (UnifiNmePacketFilterSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmePacketFilterSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->filterLength         = p_filterLength; \
    evt->filter               = p_filter; \
    evt->mode                 = p_mode; \
    evt->arpFilterAddress     = p_arpFilterAddress; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PACKET_FILTER_SET_REQ_ID); \
}

/* -------------------------- unifi_nme_packet_filter_set_cfm -------------------------- */
typedef struct UnifiNmePacketFilterSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmePacketFilterSetCfm_Evt;

#define send_unifi_nme_packet_filter_set_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmePacketFilterSetCfm_Evt *evt = (UnifiNmePacketFilterSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmePacketFilterSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PACKET_FILTER_SET_CFM_ID); \
}

#define send_unifi_nme_packet_filter_set_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmePacketFilterSetCfm_Evt *evt = (UnifiNmePacketFilterSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmePacketFilterSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PACKET_FILTER_SET_CFM_ID); \
}

/* -------------------------- unifi_nme_pmkid_req -------------------------- */
typedef struct UnifiNmePmkidReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ListAction                action;
    CsrUint8                        setPmkidsCount;
    unifi_Pmkid                    *setPmkids;
} UnifiNmePmkidReq_Evt;

#define send_unifi_nme_pmkid_req(context, pid, p_appHandle, p_action, p_setPmkidsCount, p_setPmkids) \
{ \
    UnifiNmePmkidReq_Evt *evt = (UnifiNmePmkidReq_Evt*) CsrPmalloc(sizeof(UnifiNmePmkidReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->setPmkidsCount       = p_setPmkidsCount; \
    evt->setPmkids            = p_setPmkids; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PMKID_REQ_ID); \
}

#define send_unifi_nme_pmkid_req_external(context, pid, p_appHandle, p_action, p_setPmkidsCount, p_setPmkids) \
{ \
    UnifiNmePmkidReq_Evt *evt = (UnifiNmePmkidReq_Evt*) CsrPmalloc(sizeof(UnifiNmePmkidReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->setPmkidsCount       = p_setPmkidsCount; \
    evt->setPmkids            = p_setPmkids; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PMKID_REQ_ID); \
}

/* -------------------------- unifi_nme_pmkid_cfm -------------------------- */
typedef struct UnifiNmePmkidCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_ListAction                action;
    CsrUint8                        getPmkidsCount;
    unifi_Pmkid                    *getPmkids;
} UnifiNmePmkidCfm_Evt;

#define send_unifi_nme_pmkid_cfm(context, pid, p_appHandle, p_status, p_action, p_getPmkidsCount, p_getPmkids) \
{ \
    UnifiNmePmkidCfm_Evt *evt = (UnifiNmePmkidCfm_Evt*) CsrPmalloc(sizeof(UnifiNmePmkidCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    evt->getPmkidsCount       = p_getPmkidsCount; \
    evt->getPmkids            = p_getPmkids; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PMKID_CFM_ID); \
}

#define send_unifi_nme_pmkid_cfm_external(context, pid, p_appHandle, p_status, p_action, p_getPmkidsCount, p_getPmkids) \
{ \
    UnifiNmePmkidCfm_Evt *evt = (UnifiNmePmkidCfm_Evt*) CsrPmalloc(sizeof(UnifiNmePmkidCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->action               = p_action; \
    evt->getPmkidsCount       = p_getPmkidsCount; \
    evt->getPmkids            = p_getPmkids; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PMKID_CFM_ID); \
}

/* -------------------------- unifi_nme_pmkid_candidate_list_ind -------------------------- */
typedef struct UnifiNmePmkidCandidateListInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    CsrUint8                        pmkidCandidatesCount;
    unifi_PmkidCandidate           *pmkidCandidates;
} UnifiNmePmkidCandidateListInd_Evt;

#define send_unifi_nme_pmkid_candidate_list_ind(context, pid, p_appHandlesCount, p_appHandles, p_pmkidCandidatesCount, p_pmkidCandidates) \
{ \
    UnifiNmePmkidCandidateListInd_Evt *evt = (UnifiNmePmkidCandidateListInd_Evt*) CsrPmalloc(sizeof(UnifiNmePmkidCandidateListInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->pmkidCandidatesCount = p_pmkidCandidatesCount; \
    evt->pmkidCandidates      = p_pmkidCandidates; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PMKID_CANDIDATE_LIST_IND_ID); \
}

#define send_unifi_nme_pmkid_candidate_list_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_pmkidCandidatesCount, p_pmkidCandidates) \
{ \
    UnifiNmePmkidCandidateListInd_Evt *evt = (UnifiNmePmkidCandidateListInd_Evt*) CsrPmalloc(sizeof(UnifiNmePmkidCandidateListInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->pmkidCandidatesCount = p_pmkidCandidatesCount; \
    evt->pmkidCandidates      = p_pmkidCandidates; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PMKID_CANDIDATE_LIST_IND_ID); \
}

/* -------------------------- unifi_nme_profile_connect_req -------------------------- */
typedef struct UnifiNmeProfileConnectReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ProfileIdentity           profileIdentity;
} UnifiNmeProfileConnectReq_Evt;

#define send_unifi_nme_profile_connect_req(context, pid, p_appHandle, p_profileIdentity) \
{ \
    UnifiNmeProfileConnectReq_Evt *evt = (UnifiNmeProfileConnectReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileConnectReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profileIdentity      = p_profileIdentity; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_CONNECT_REQ_ID); \
}

#define send_unifi_nme_profile_connect_req_external(context, pid, p_appHandle, p_profileIdentity) \
{ \
    UnifiNmeProfileConnectReq_Evt *evt = (UnifiNmeProfileConnectReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileConnectReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profileIdentity      = p_profileIdentity; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_CONNECT_REQ_ID); \
}

/* -------------------------- unifi_nme_profile_connect_cfm -------------------------- */
typedef struct UnifiNmeProfileConnectCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    CsrUint8                        connectAttemptsCount;
    unifi_ConnectAttempt           *connectAttempts;
} UnifiNmeProfileConnectCfm_Evt;

#define send_unifi_nme_profile_connect_cfm(context, pid, p_appHandle, p_status, p_connectAttemptsCount, p_connectAttempts) \
{ \
    UnifiNmeProfileConnectCfm_Evt *evt = (UnifiNmeProfileConnectCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileConnectCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->connectAttemptsCount = p_connectAttemptsCount; \
    evt->connectAttempts      = p_connectAttempts; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_CONNECT_CFM_ID); \
}

#define send_unifi_nme_profile_connect_cfm_external(context, pid, p_appHandle, p_status, p_connectAttemptsCount, p_connectAttempts) \
{ \
    UnifiNmeProfileConnectCfm_Evt *evt = (UnifiNmeProfileConnectCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileConnectCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->connectAttemptsCount = p_connectAttemptsCount; \
    evt->connectAttempts      = p_connectAttempts; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_CONNECT_CFM_ID); \
}

/* -------------------------- unifi_nme_profile_delete_req -------------------------- */
typedef struct UnifiNmeProfileDeleteReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ProfileIdentity           profileIdentity;
} UnifiNmeProfileDeleteReq_Evt;

#define send_unifi_nme_profile_delete_req(context, pid, p_appHandle, p_profileIdentity) \
{ \
    UnifiNmeProfileDeleteReq_Evt *evt = (UnifiNmeProfileDeleteReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profileIdentity      = p_profileIdentity; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_REQ_ID); \
}

#define send_unifi_nme_profile_delete_req_external(context, pid, p_appHandle, p_profileIdentity) \
{ \
    UnifiNmeProfileDeleteReq_Evt *evt = (UnifiNmeProfileDeleteReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profileIdentity      = p_profileIdentity; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_REQ_ID); \
}

/* -------------------------- unifi_nme_profile_delete_cfm -------------------------- */
typedef struct UnifiNmeProfileDeleteCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeProfileDeleteCfm_Evt;

#define send_unifi_nme_profile_delete_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileDeleteCfm_Evt *evt = (UnifiNmeProfileDeleteCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_CFM_ID); \
}

#define send_unifi_nme_profile_delete_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileDeleteCfm_Evt *evt = (UnifiNmeProfileDeleteCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_CFM_ID); \
}

/* -------------------------- unifi_nme_profile_delete_all_req -------------------------- */
typedef struct UnifiNmeProfileDeleteAllReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeProfileDeleteAllReq_Evt;

#define send_unifi_nme_profile_delete_all_req(context, pid, p_appHandle) \
{ \
    UnifiNmeProfileDeleteAllReq_Evt *evt = (UnifiNmeProfileDeleteAllReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteAllReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_ALL_REQ_ID); \
}

#define send_unifi_nme_profile_delete_all_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeProfileDeleteAllReq_Evt *evt = (UnifiNmeProfileDeleteAllReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteAllReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_ALL_REQ_ID); \
}

/* -------------------------- unifi_nme_profile_delete_all_cfm -------------------------- */
typedef struct UnifiNmeProfileDeleteAllCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeProfileDeleteAllCfm_Evt;

#define send_unifi_nme_profile_delete_all_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileDeleteAllCfm_Evt *evt = (UnifiNmeProfileDeleteAllCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteAllCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_ALL_CFM_ID); \
}

#define send_unifi_nme_profile_delete_all_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileDeleteAllCfm_Evt *evt = (UnifiNmeProfileDeleteAllCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDeleteAllCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DELETE_ALL_CFM_ID); \
}

/* -------------------------- unifi_nme_profile_disconnect_ind -------------------------- */
typedef struct UnifiNmeProfileDisconnectInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    CsrUint8                        connectAttemptsCount;
    unifi_ConnectAttempt           *connectAttempts;
} UnifiNmeProfileDisconnectInd_Evt;

#define send_unifi_nme_profile_disconnect_ind(context, pid, p_appHandlesCount, p_appHandles, p_connectAttemptsCount, p_connectAttempts) \
{ \
    UnifiNmeProfileDisconnectInd_Evt *evt = (UnifiNmeProfileDisconnectInd_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDisconnectInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->connectAttemptsCount = p_connectAttemptsCount; \
    evt->connectAttempts      = p_connectAttempts; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DISCONNECT_IND_ID); \
}

#define send_unifi_nme_profile_disconnect_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_connectAttemptsCount, p_connectAttempts) \
{ \
    UnifiNmeProfileDisconnectInd_Evt *evt = (UnifiNmeProfileDisconnectInd_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileDisconnectInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->connectAttemptsCount = p_connectAttemptsCount; \
    evt->connectAttempts      = p_connectAttempts; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_DISCONNECT_IND_ID); \
}

/* -------------------------- unifi_nme_profile_order_set_req -------------------------- */
typedef struct UnifiNmeProfileOrderSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        profileIdentitysCount;
    unifi_ProfileIdentity          *profileIdentitys;
} UnifiNmeProfileOrderSetReq_Evt;

#define send_unifi_nme_profile_order_set_req(context, pid, p_appHandle, p_profileIdentitysCount, p_profileIdentitys) \
{ \
    UnifiNmeProfileOrderSetReq_Evt *evt = (UnifiNmeProfileOrderSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileOrderSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profileIdentitysCount = p_profileIdentitysCount; \
    evt->profileIdentitys     = p_profileIdentitys; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_ORDER_SET_REQ_ID); \
}

#define send_unifi_nme_profile_order_set_req_external(context, pid, p_appHandle, p_profileIdentitysCount, p_profileIdentitys) \
{ \
    UnifiNmeProfileOrderSetReq_Evt *evt = (UnifiNmeProfileOrderSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileOrderSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profileIdentitysCount = p_profileIdentitysCount; \
    evt->profileIdentitys     = p_profileIdentitys; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_ORDER_SET_REQ_ID); \
}

/* -------------------------- unifi_nme_profile_order_set_cfm -------------------------- */
typedef struct UnifiNmeProfileOrderSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeProfileOrderSetCfm_Evt;

#define send_unifi_nme_profile_order_set_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileOrderSetCfm_Evt *evt = (UnifiNmeProfileOrderSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileOrderSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_ORDER_SET_CFM_ID); \
}

#define send_unifi_nme_profile_order_set_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileOrderSetCfm_Evt *evt = (UnifiNmeProfileOrderSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileOrderSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_ORDER_SET_CFM_ID); \
}

/* -------------------------- unifi_nme_profile_set_req -------------------------- */
typedef struct UnifiNmeProfileSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Profile                   profile;
} UnifiNmeProfileSetReq_Evt;

#define send_unifi_nme_profile_set_req(context, pid, p_appHandle, p_profile) \
{ \
    UnifiNmeProfileSetReq_Evt *evt = (UnifiNmeProfileSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profile              = p_profile; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_SET_REQ_ID); \
}

#define send_unifi_nme_profile_set_req_external(context, pid, p_appHandle, p_profile) \
{ \
    UnifiNmeProfileSetReq_Evt *evt = (UnifiNmeProfileSetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->profile              = p_profile; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_SET_REQ_ID); \
}

/* -------------------------- unifi_nme_profile_set_cfm -------------------------- */
typedef struct UnifiNmeProfileSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeProfileSetCfm_Evt;

#define send_unifi_nme_profile_set_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileSetCfm_Evt *evt = (UnifiNmeProfileSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_SET_CFM_ID); \
}

#define send_unifi_nme_profile_set_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeProfileSetCfm_Evt *evt = (UnifiNmeProfileSetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_SET_CFM_ID); \
}

/* -------------------------- unifi_nme_profile_update_ind -------------------------- */
typedef struct UnifiNmeProfileUpdateInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_Profile                   profile;
} UnifiNmeProfileUpdateInd_Evt;

#define send_unifi_nme_profile_update_ind(context, pid, p_appHandlesCount, p_appHandles, p_profile) \
{ \
    UnifiNmeProfileUpdateInd_Evt *evt = (UnifiNmeProfileUpdateInd_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileUpdateInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->profile              = p_profile; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_UPDATE_IND_ID); \
}

#define send_unifi_nme_profile_update_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_profile) \
{ \
    UnifiNmeProfileUpdateInd_Evt *evt = (UnifiNmeProfileUpdateInd_Evt*) CsrPmalloc(sizeof(UnifiNmeProfileUpdateInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->profile              = p_profile; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_PROFILE_UPDATE_IND_ID); \
}

/* -------------------------- unifi_nme_restricted_access_disable_req -------------------------- */
typedef struct UnifiNmeRestrictedAccessDisableReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeRestrictedAccessDisableReq_Evt;

#define send_unifi_nme_restricted_access_disable_req(context, pid, p_appHandle) \
{ \
    UnifiNmeRestrictedAccessDisableReq_Evt *evt = (UnifiNmeRestrictedAccessDisableReq_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessDisableReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_DISABLE_REQ_ID); \
}

#define send_unifi_nme_restricted_access_disable_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeRestrictedAccessDisableReq_Evt *evt = (UnifiNmeRestrictedAccessDisableReq_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessDisableReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_DISABLE_REQ_ID); \
}

/* -------------------------- unifi_nme_restricted_access_disable_cfm -------------------------- */
typedef struct UnifiNmeRestrictedAccessDisableCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeRestrictedAccessDisableCfm_Evt;

#define send_unifi_nme_restricted_access_disable_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeRestrictedAccessDisableCfm_Evt *evt = (UnifiNmeRestrictedAccessDisableCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessDisableCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_DISABLE_CFM_ID); \
}

#define send_unifi_nme_restricted_access_disable_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeRestrictedAccessDisableCfm_Evt *evt = (UnifiNmeRestrictedAccessDisableCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessDisableCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_DISABLE_CFM_ID); \
}

/* -------------------------- unifi_nme_restricted_access_enable_req -------------------------- */
typedef struct UnifiNmeRestrictedAccessEnableReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeRestrictedAccessEnableReq_Evt;

#define send_unifi_nme_restricted_access_enable_req(context, pid, p_appHandle) \
{ \
    UnifiNmeRestrictedAccessEnableReq_Evt *evt = (UnifiNmeRestrictedAccessEnableReq_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessEnableReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_ENABLE_REQ_ID); \
}

#define send_unifi_nme_restricted_access_enable_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeRestrictedAccessEnableReq_Evt *evt = (UnifiNmeRestrictedAccessEnableReq_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessEnableReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_ENABLE_REQ_ID); \
}

/* -------------------------- unifi_nme_restricted_access_enable_cfm -------------------------- */
typedef struct UnifiNmeRestrictedAccessEnableCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeRestrictedAccessEnableCfm_Evt;

#define send_unifi_nme_restricted_access_enable_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeRestrictedAccessEnableCfm_Evt *evt = (UnifiNmeRestrictedAccessEnableCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessEnableCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_ENABLE_CFM_ID); \
}

#define send_unifi_nme_restricted_access_enable_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeRestrictedAccessEnableCfm_Evt *evt = (UnifiNmeRestrictedAccessEnableCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeRestrictedAccessEnableCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_RESTRICTED_ACCESS_ENABLE_CFM_ID); \
}

/* -------------------------- unifi_nme_roam_complete_ind -------------------------- */
typedef struct UnifiNmeRoamCompleteInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_Status                    status;
} UnifiNmeRoamCompleteInd_Evt;

#define send_unifi_nme_roam_complete_ind(context, pid, p_appHandlesCount, p_appHandles, p_status) \
{ \
    UnifiNmeRoamCompleteInd_Evt *evt = (UnifiNmeRoamCompleteInd_Evt*) CsrPmalloc(sizeof(UnifiNmeRoamCompleteInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_ROAM_COMPLETE_IND_ID); \
}

#define send_unifi_nme_roam_complete_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_status) \
{ \
    UnifiNmeRoamCompleteInd_Evt *evt = (UnifiNmeRoamCompleteInd_Evt*) CsrPmalloc(sizeof(UnifiNmeRoamCompleteInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_ROAM_COMPLETE_IND_ID); \
}

/* -------------------------- unifi_nme_roam_start_ind -------------------------- */
typedef struct UnifiNmeRoamStartInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_RoamReason                roamReason;
    unifi_IEEE80211Reason           reason80211;
} UnifiNmeRoamStartInd_Evt;

#define send_unifi_nme_roam_start_ind(context, pid, p_appHandlesCount, p_appHandles, p_roamReason, p_reason80211) \
{ \
    UnifiNmeRoamStartInd_Evt *evt = (UnifiNmeRoamStartInd_Evt*) CsrPmalloc(sizeof(UnifiNmeRoamStartInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->roamReason           = p_roamReason; \
    evt->reason80211          = p_reason80211; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_ROAM_START_IND_ID); \
}

#define send_unifi_nme_roam_start_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_roamReason, p_reason80211) \
{ \
    UnifiNmeRoamStartInd_Evt *evt = (UnifiNmeRoamStartInd_Evt*) CsrPmalloc(sizeof(UnifiNmeRoamStartInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->roamReason           = p_roamReason; \
    evt->reason80211          = p_reason80211; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_ROAM_START_IND_ID); \
}

/* -------------------------- unifi_nme_scan_full_req -------------------------- */
typedef struct UnifiNmeScanFullReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        ssidCount;
    unifi_SSID                     *ssid;
    unifi_MACAddress                bssid;
    CsrBool                         forceScan;
    unifi_BSSType                   bssType;
    unifi_ScanType                  scanType;
    CsrUint16                       channelListCount;
    CsrUint8                       *channelList;
    CsrUint16                       probeIeLength;
    CsrUint8                       *probeIe;
} UnifiNmeScanFullReq_Evt;

#define send_unifi_nme_scan_full_req(context, pid, p_appHandle, p_ssidCount, p_ssid, p_bssid, p_forceScan, p_bssType, p_scanType, p_channelListCount, p_channelList, p_probeIeLength, p_probeIe) \
{ \
    UnifiNmeScanFullReq_Evt *evt = (UnifiNmeScanFullReq_Evt*) CsrPmalloc(sizeof(UnifiNmeScanFullReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->ssidCount            = p_ssidCount; \
    evt->ssid                 = p_ssid; \
    evt->bssid                = p_bssid; \
    evt->forceScan            = p_forceScan; \
    evt->bssType              = p_bssType; \
    evt->scanType             = p_scanType; \
    evt->channelListCount     = p_channelListCount; \
    evt->channelList          = p_channelList; \
    evt->probeIeLength        = p_probeIeLength; \
    evt->probeIe              = p_probeIe; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_FULL_REQ_ID); \
}

#define send_unifi_nme_scan_full_req_external(context, pid, p_appHandle, p_ssidCount, p_ssid, p_bssid, p_forceScan, p_bssType, p_scanType, p_channelListCount, p_channelList, p_probeIeLength, p_probeIe) \
{ \
    UnifiNmeScanFullReq_Evt *evt = (UnifiNmeScanFullReq_Evt*) CsrPmalloc(sizeof(UnifiNmeScanFullReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->ssidCount            = p_ssidCount; \
    evt->ssid                 = p_ssid; \
    evt->bssid                = p_bssid; \
    evt->forceScan            = p_forceScan; \
    evt->bssType              = p_bssType; \
    evt->scanType             = p_scanType; \
    evt->channelListCount     = p_channelListCount; \
    evt->channelList          = p_channelList; \
    evt->probeIeLength        = p_probeIeLength; \
    evt->probeIe              = p_probeIe; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_FULL_REQ_ID); \
}

/* -------------------------- unifi_nme_scan_full_cfm -------------------------- */
typedef struct UnifiNmeScanFullCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeScanFullCfm_Evt;

#define send_unifi_nme_scan_full_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeScanFullCfm_Evt *evt = (UnifiNmeScanFullCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeScanFullCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_FULL_CFM_ID); \
}

#define send_unifi_nme_scan_full_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeScanFullCfm_Evt *evt = (UnifiNmeScanFullCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeScanFullCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_FULL_CFM_ID); \
}

/* -------------------------- unifi_nme_scan_result_ind -------------------------- */
typedef struct UnifiNmeScanResultInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_ScanResult                result;
} UnifiNmeScanResultInd_Evt;

#define send_unifi_nme_scan_result_ind(context, pid, p_appHandlesCount, p_appHandles, p_result) \
{ \
    UnifiNmeScanResultInd_Evt *evt = (UnifiNmeScanResultInd_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->result               = p_result; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULT_IND_ID); \
}

#define send_unifi_nme_scan_result_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_result) \
{ \
    UnifiNmeScanResultInd_Evt *evt = (UnifiNmeScanResultInd_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->result               = p_result; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULT_IND_ID); \
}

/* -------------------------- unifi_nme_scan_results_flush_req -------------------------- */
typedef struct UnifiNmeScanResultsFlushReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeScanResultsFlushReq_Evt;

#define send_unifi_nme_scan_results_flush_req(context, pid, p_appHandle) \
{ \
    UnifiNmeScanResultsFlushReq_Evt *evt = (UnifiNmeScanResultsFlushReq_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsFlushReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_FLUSH_REQ_ID); \
}

#define send_unifi_nme_scan_results_flush_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeScanResultsFlushReq_Evt *evt = (UnifiNmeScanResultsFlushReq_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsFlushReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_FLUSH_REQ_ID); \
}

/* -------------------------- unifi_nme_scan_results_flush_cfm -------------------------- */
typedef struct UnifiNmeScanResultsFlushCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeScanResultsFlushCfm_Evt;

#define send_unifi_nme_scan_results_flush_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeScanResultsFlushCfm_Evt *evt = (UnifiNmeScanResultsFlushCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsFlushCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_FLUSH_CFM_ID); \
}

#define send_unifi_nme_scan_results_flush_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeScanResultsFlushCfm_Evt *evt = (UnifiNmeScanResultsFlushCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsFlushCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_FLUSH_CFM_ID); \
}

/* -------------------------- unifi_nme_scan_results_get_req -------------------------- */
typedef struct UnifiNmeScanResultsGetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeScanResultsGetReq_Evt;

#define send_unifi_nme_scan_results_get_req(context, pid, p_appHandle) \
{ \
    UnifiNmeScanResultsGetReq_Evt *evt = (UnifiNmeScanResultsGetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsGetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_GET_REQ_ID); \
}

#define send_unifi_nme_scan_results_get_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeScanResultsGetReq_Evt *evt = (UnifiNmeScanResultsGetReq_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsGetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_GET_REQ_ID); \
}

/* -------------------------- unifi_nme_scan_results_get_cfm -------------------------- */
typedef struct UnifiNmeScanResultsGetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    CsrUint16                       scanResultsCount;
    unifi_ScanResult               *scanResults;
} UnifiNmeScanResultsGetCfm_Evt;

#define send_unifi_nme_scan_results_get_cfm(context, pid, p_appHandle, p_status, p_scanResultsCount, p_scanResults) \
{ \
    UnifiNmeScanResultsGetCfm_Evt *evt = (UnifiNmeScanResultsGetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsGetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->scanResultsCount     = p_scanResultsCount; \
    evt->scanResults          = p_scanResults; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_GET_CFM_ID); \
}

#define send_unifi_nme_scan_results_get_cfm_external(context, pid, p_appHandle, p_status, p_scanResultsCount, p_scanResults) \
{ \
    UnifiNmeScanResultsGetCfm_Evt *evt = (UnifiNmeScanResultsGetCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeScanResultsGetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->scanResultsCount     = p_scanResultsCount; \
    evt->scanResults          = p_scanResults; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SCAN_RESULTS_GET_CFM_ID); \
}

/* -------------------------- unifi_nme_set_value_req -------------------------- */
typedef struct UnifiNmeSetValueReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_AppValue                  appValue;
} UnifiNmeSetValueReq_Evt;

#define send_unifi_nme_set_value_req(context, pid, p_appHandle, p_appValue) \
{ \
    UnifiNmeSetValueReq_Evt *evt = (UnifiNmeSetValueReq_Evt*) CsrPmalloc(sizeof(UnifiNmeSetValueReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->appValue             = p_appValue; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SET_VALUE_REQ_ID); \
}

#define send_unifi_nme_set_value_req_external(context, pid, p_appHandle, p_appValue) \
{ \
    UnifiNmeSetValueReq_Evt *evt = (UnifiNmeSetValueReq_Evt*) CsrPmalloc(sizeof(UnifiNmeSetValueReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->appValue             = p_appValue; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SET_VALUE_REQ_ID); \
}

/* -------------------------- unifi_nme_set_value_cfm -------------------------- */
typedef struct UnifiNmeSetValueCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_AppValueId                appValueId;
} UnifiNmeSetValueCfm_Evt;

#define send_unifi_nme_set_value_cfm(context, pid, p_appHandle, p_status, p_appValueId) \
{ \
    UnifiNmeSetValueCfm_Evt *evt = (UnifiNmeSetValueCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeSetValueCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->appValueId           = p_appValueId; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_SET_VALUE_CFM_ID); \
}

#define send_unifi_nme_set_value_cfm_external(context, pid, p_appHandle, p_status, p_appValueId) \
{ \
    UnifiNmeSetValueCfm_Evt *evt = (UnifiNmeSetValueCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeSetValueCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->appValueId           = p_appValueId; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_SET_VALUE_CFM_ID); \
}

/* -------------------------- unifi_nme_tspec_req -------------------------- */
typedef struct UnifiNmeTspecReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_ListAction                action;
    CsrUint32                       transactionId;
    CsrBool                         strict;
    CsrUint8                        ctrlMask;
    CsrUint16                       tspecLength;
    CsrUint8                       *tspec;
    CsrUint16                       tclasLength;
    CsrUint8                       *tclas;
} UnifiNmeTspecReq_Evt;

#define send_unifi_nme_tspec_req(context, pid, p_appHandle, p_action, p_transactionId, p_strict, p_ctrlMask, p_tspecLength, p_tspec, p_tclasLength, p_tclas) \
{ \
    UnifiNmeTspecReq_Evt *evt = (UnifiNmeTspecReq_Evt*) CsrPmalloc(sizeof(UnifiNmeTspecReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->transactionId        = p_transactionId; \
    evt->strict               = p_strict; \
    evt->ctrlMask             = p_ctrlMask; \
    evt->tspecLength          = p_tspecLength; \
    evt->tspec                = p_tspec; \
    evt->tclasLength          = p_tclasLength; \
    evt->tclas                = p_tclas; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_TSPEC_REQ_ID); \
}

#define send_unifi_nme_tspec_req_external(context, pid, p_appHandle, p_action, p_transactionId, p_strict, p_ctrlMask, p_tspecLength, p_tspec, p_tclasLength, p_tclas) \
{ \
    UnifiNmeTspecReq_Evt *evt = (UnifiNmeTspecReq_Evt*) CsrPmalloc(sizeof(UnifiNmeTspecReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->action               = p_action; \
    evt->transactionId        = p_transactionId; \
    evt->strict               = p_strict; \
    evt->ctrlMask             = p_ctrlMask; \
    evt->tspecLength          = p_tspecLength; \
    evt->tspec                = p_tspec; \
    evt->tclasLength          = p_tclasLength; \
    evt->tclas                = p_tclas; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_TSPEC_REQ_ID); \
}

/* -------------------------- unifi_nme_tspec_ind -------------------------- */
typedef struct UnifiNmeTspecInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    CsrUint32                       transactionId;
    unifi_TspecResultCode           tspecResultCode;
    CsrUint16                       tspecLength;
    CsrUint8                       *tspec;
} UnifiNmeTspecInd_Evt;

#define send_unifi_nme_tspec_ind(context, pid, p_appHandlesCount, p_appHandles, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
{ \
    UnifiNmeTspecInd_Evt *evt = (UnifiNmeTspecInd_Evt*) CsrPmalloc(sizeof(UnifiNmeTspecInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->transactionId        = p_transactionId; \
    evt->tspecResultCode      = p_tspecResultCode; \
    evt->tspecLength          = p_tspecLength; \
    evt->tspec                = p_tspec; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_TSPEC_IND_ID); \
}

#define send_unifi_nme_tspec_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
{ \
    UnifiNmeTspecInd_Evt *evt = (UnifiNmeTspecInd_Evt*) CsrPmalloc(sizeof(UnifiNmeTspecInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->transactionId        = p_transactionId; \
    evt->tspecResultCode      = p_tspecResultCode; \
    evt->tspecLength          = p_tspecLength; \
    evt->tspec                = p_tspec; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_TSPEC_IND_ID); \
}

/* -------------------------- unifi_nme_tspec_cfm -------------------------- */
typedef struct UnifiNmeTspecCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    CsrUint32                       transactionId;
    unifi_TspecResultCode           tspecResultCode;
    CsrUint16                       tspecLength;
    CsrUint8                       *tspec;
} UnifiNmeTspecCfm_Evt;

#define send_unifi_nme_tspec_cfm(context, pid, p_appHandle, p_status, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
{ \
    UnifiNmeTspecCfm_Evt *evt = (UnifiNmeTspecCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeTspecCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->transactionId        = p_transactionId; \
    evt->tspecResultCode      = p_tspecResultCode; \
    evt->tspecLength          = p_tspecLength; \
    evt->tspec                = p_tspec; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_TSPEC_CFM_ID); \
}

#define send_unifi_nme_tspec_cfm_external(context, pid, p_appHandle, p_status, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
{ \
    UnifiNmeTspecCfm_Evt *evt = (UnifiNmeTspecCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeTspecCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->transactionId        = p_transactionId; \
    evt->tspecResultCode      = p_tspecResultCode; \
    evt->tspecLength          = p_tspecLength; \
    evt->tspec                = p_tspec; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_TSPEC_CFM_ID); \
}

/* -------------------------- unifi_nme_wifi_flightmode_req -------------------------- */
typedef struct UnifiNmeWifiFlightmodeReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_MACAddress                address;
    CsrUint16                       mibFilesCount;
    unifi_DataBlock                *mibFiles;
} UnifiNmeWifiFlightmodeReq_Evt;

#define send_unifi_nme_wifi_flightmode_req(context, pid, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
{ \
    UnifiNmeWifiFlightmodeReq_Evt *evt = (UnifiNmeWifiFlightmodeReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiFlightmodeReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->address              = p_address; \
    evt->mibFilesCount        = p_mibFilesCount; \
    evt->mibFiles             = p_mibFiles; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_FLIGHTMODE_REQ_ID); \
}

#define send_unifi_nme_wifi_flightmode_req_external(context, pid, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
{ \
    UnifiNmeWifiFlightmodeReq_Evt *evt = (UnifiNmeWifiFlightmodeReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiFlightmodeReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->address              = p_address; \
    evt->mibFilesCount        = p_mibFilesCount; \
    evt->mibFiles             = p_mibFiles; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_FLIGHTMODE_REQ_ID); \
}

/* -------------------------- unifi_nme_wifi_flightmode_cfm -------------------------- */
typedef struct UnifiNmeWifiFlightmodeCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeWifiFlightmodeCfm_Evt;

#define send_unifi_nme_wifi_flightmode_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWifiFlightmodeCfm_Evt *evt = (UnifiNmeWifiFlightmodeCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiFlightmodeCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_FLIGHTMODE_CFM_ID); \
}

#define send_unifi_nme_wifi_flightmode_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWifiFlightmodeCfm_Evt *evt = (UnifiNmeWifiFlightmodeCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiFlightmodeCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_FLIGHTMODE_CFM_ID); \
}

/* -------------------------- unifi_nme_wifi_off_req -------------------------- */
typedef struct UnifiNmeWifiOffReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeWifiOffReq_Evt;

#define send_unifi_nme_wifi_off_req(context, pid, p_appHandle) \
{ \
    UnifiNmeWifiOffReq_Evt *evt = (UnifiNmeWifiOffReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOffReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_OFF_REQ_ID); \
}

#define send_unifi_nme_wifi_off_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeWifiOffReq_Evt *evt = (UnifiNmeWifiOffReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOffReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_OFF_REQ_ID); \
}

/* -------------------------- unifi_nme_wifi_off_ind -------------------------- */
typedef struct UnifiNmeWifiOffInd_Evt
{
    FsmEvent                        common;
    CsrUint16                       appHandlesCount;
    void*                          *appHandles;
    unifi_ControlIndication         controlIndication;
} UnifiNmeWifiOffInd_Evt;

#define send_unifi_nme_wifi_off_ind(context, pid, p_appHandlesCount, p_appHandles, p_controlIndication) \
{ \
    UnifiNmeWifiOffInd_Evt *evt = (UnifiNmeWifiOffInd_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOffInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->controlIndication    = p_controlIndication; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_OFF_IND_ID); \
}

#define send_unifi_nme_wifi_off_ind_external(context, pid, p_appHandlesCount, p_appHandles, p_controlIndication) \
{ \
    UnifiNmeWifiOffInd_Evt *evt = (UnifiNmeWifiOffInd_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOffInd_Evt)); \
    evt->appHandlesCount      = p_appHandlesCount; \
    evt->appHandles           = p_appHandles; \
    evt->controlIndication    = p_controlIndication; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_OFF_IND_ID); \
}

/* -------------------------- unifi_nme_wifi_off_cfm -------------------------- */
typedef struct UnifiNmeWifiOffCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeWifiOffCfm_Evt;

#define send_unifi_nme_wifi_off_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWifiOffCfm_Evt *evt = (UnifiNmeWifiOffCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOffCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_OFF_CFM_ID); \
}

#define send_unifi_nme_wifi_off_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWifiOffCfm_Evt *evt = (UnifiNmeWifiOffCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOffCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_OFF_CFM_ID); \
}

/* -------------------------- unifi_nme_wifi_on_req -------------------------- */
typedef struct UnifiNmeWifiOnReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_MACAddress                address;
    CsrUint16                       mibFilesCount;
    unifi_DataBlock                *mibFiles;
} UnifiNmeWifiOnReq_Evt;

#define send_unifi_nme_wifi_on_req(context, pid, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
{ \
    UnifiNmeWifiOnReq_Evt *evt = (UnifiNmeWifiOnReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOnReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->address              = p_address; \
    evt->mibFilesCount        = p_mibFilesCount; \
    evt->mibFiles             = p_mibFiles; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_ON_REQ_ID); \
}

#define send_unifi_nme_wifi_on_req_external(context, pid, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
{ \
    UnifiNmeWifiOnReq_Evt *evt = (UnifiNmeWifiOnReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOnReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->address              = p_address; \
    evt->mibFilesCount        = p_mibFilesCount; \
    evt->mibFiles             = p_mibFiles; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_ON_REQ_ID); \
}

/* -------------------------- unifi_nme_wifi_on_cfm -------------------------- */
typedef struct UnifiNmeWifiOnCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeWifiOnCfm_Evt;

#define send_unifi_nme_wifi_on_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWifiOnCfm_Evt *evt = (UnifiNmeWifiOnCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOnCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_ON_CFM_ID); \
}

#define send_unifi_nme_wifi_on_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWifiOnCfm_Evt *evt = (UnifiNmeWifiOnCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWifiOnCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WIFI_ON_CFM_ID); \
}

/* -------------------------- unifi_nme_wps_req -------------------------- */
typedef struct UnifiNmeWpsReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        pin[8];
} UnifiNmeWpsReq_Evt;

#define send_unifi_nme_wps_req(context, pid, p_appHandle, p_pin) \
{ \
    UnifiNmeWpsReq_Evt *evt = (UnifiNmeWpsReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    CsrMemCpy(evt->pin, p_pin, 8); \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_REQ_ID); \
}

#define send_unifi_nme_wps_req_external(context, pid, p_appHandle, p_pin) \
{ \
    UnifiNmeWpsReq_Evt *evt = (UnifiNmeWpsReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    CsrMemCpy(evt->pin, p_pin, 8); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_REQ_ID); \
}

/* -------------------------- unifi_nme_wps_cfm -------------------------- */
typedef struct UnifiNmeWpsCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
    unifi_Profile                   profile;
} UnifiNmeWpsCfm_Evt;

#define send_unifi_nme_wps_cfm(context, pid, p_appHandle, p_status, p_profile) \
{ \
    UnifiNmeWpsCfm_Evt *evt = (UnifiNmeWpsCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->profile              = p_profile; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_CFM_ID); \
}

#define send_unifi_nme_wps_cfm_external(context, pid, p_appHandle, p_status, p_profile) \
{ \
    UnifiNmeWpsCfm_Evt *evt = (UnifiNmeWpsCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    evt->profile              = p_profile; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_CFM_ID); \
}

/* -------------------------- unifi_nme_wps_cancel_req -------------------------- */
typedef struct UnifiNmeWpsCancelReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} UnifiNmeWpsCancelReq_Evt;

#define send_unifi_nme_wps_cancel_req(context, pid, p_appHandle) \
{ \
    UnifiNmeWpsCancelReq_Evt *evt = (UnifiNmeWpsCancelReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsCancelReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_CANCEL_REQ_ID); \
}

#define send_unifi_nme_wps_cancel_req_external(context, pid, p_appHandle) \
{ \
    UnifiNmeWpsCancelReq_Evt *evt = (UnifiNmeWpsCancelReq_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsCancelReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_CANCEL_REQ_ID); \
}

/* -------------------------- unifi_nme_wps_cancel_cfm -------------------------- */
typedef struct UnifiNmeWpsCancelCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    unifi_Status                    status;
} UnifiNmeWpsCancelCfm_Evt;

#define send_unifi_nme_wps_cancel_cfm(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWpsCancelCfm_Evt *evt = (UnifiNmeWpsCancelCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsCancelCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_CANCEL_CFM_ID); \
}

#define send_unifi_nme_wps_cancel_cfm_external(context, pid, p_appHandle, p_status) \
{ \
    UnifiNmeWpsCancelCfm_Evt *evt = (UnifiNmeWpsCancelCfm_Evt*) CsrPmalloc(sizeof(UnifiNmeWpsCancelCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, UNIFI_NME_WPS_CANCEL_CFM_ID); \
}





#ifdef __cplusplus
}
#endif

#endif /* NME_XML_SIGNALS_H */
