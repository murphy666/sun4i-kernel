/* This is an autogenerated file */
/* Tag: noCheckHeader */

/*    CONFIDENTIAL */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2008. All rights reserved. */

#ifndef CSR_WIFI_NME_MGT_OUTPUT_H
#define CSR_WIFI_NME_MGT_OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SME_API_VALIDATE

#define call_unifi_nme_mgt_blacklist_req(context, appHandle, action, setAddressCount, setAddresses) CSR_UNUSED(appHandle), CSR_UNUSED(action), CSR_UNUSED(setAddressCount), CSR_UNUSED(setAddresses)
#define call_unifi_nme_mgt_connect_req(context, appHandle, connectionConfig) CSR_UNUSED(appHandle), CSR_UNUSED(connectionConfig)
#define call_unifi_nme_mgt_disconnect_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_unifi_nme_mgt_event_mask_set_req(context, appHandle, indMask) CSR_UNUSED(appHandle), CSR_UNUSED(indMask)
#define call_unifi_nme_mgt_get_value_req(context, appHandle, appValueId) CSR_UNUSED(appHandle), CSR_UNUSED(appValueId)
#define call_unifi_nme_mgt_key_req(context, appHandle, action, key) CSR_UNUSED(appHandle), CSR_UNUSED(action), CSR_UNUSED(key)
#define call_unifi_nme_mgt_mib_get_req(context, appHandle, mibAttributeLength, mibAttribute) CSR_UNUSED(appHandle), CSR_UNUSED(mibAttributeLength), CSR_UNUSED(mibAttribute)
#define call_unifi_nme_mgt_mib_get_next_req(context, appHandle, mibAttributeLength, mibAttribute) CSR_UNUSED(appHandle), CSR_UNUSED(mibAttributeLength), CSR_UNUSED(mibAttribute)
#define call_unifi_nme_mgt_mib_set_req(context, appHandle, mibAttributeLength, mibAttribute) CSR_UNUSED(appHandle), CSR_UNUSED(mibAttributeLength), CSR_UNUSED(mibAttribute)
#define call_unifi_nme_mgt_multicast_address_req(context, appHandle, action, setAddressesCount, setAddresses) CSR_UNUSED(appHandle), CSR_UNUSED(action), CSR_UNUSED(setAddressesCount), CSR_UNUSED(setAddresses)
#define call_unifi_nme_mgt_packet_filter_set_req(context, appHandle, filterLength, filter, mode, arpFilterAddress) CSR_UNUSED(appHandle), CSR_UNUSED(filterLength), CSR_UNUSED(filter), CSR_UNUSED(mode), CSR_UNUSED(arpFilterAddress)
#define call_unifi_nme_mgt_pmkid_req(context, appHandle, action, setPmkidsCount, setPmkids) CSR_UNUSED(appHandle), CSR_UNUSED(action), CSR_UNUSED(setPmkidsCount), CSR_UNUSED(setPmkids)
#define call_unifi_nme_mgt_restricted_access_disable_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_unifi_nme_mgt_restricted_access_enable_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_unifi_nme_mgt_scan_full_req(context, appHandle, ssidCount, ssid, bssid, forceScan, bssType, scanType, channelListCount, channelList, probeIeLength, probeIe) CSR_UNUSED(appHandle), CSR_UNUSED(ssidCount), CSR_UNUSED(ssid), CSR_UNUSED(bssid), CSR_UNUSED(forceScan), CSR_UNUSED(bssType), CSR_UNUSED(scanType), CSR_UNUSED(channelListCount), CSR_UNUSED(channelList), CSR_UNUSED(probeIeLength), CSR_UNUSED(probeIe)
#define call_unifi_nme_mgt_scan_results_flush_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_unifi_nme_mgt_scan_results_get_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_unifi_nme_mgt_set_value_req(context, appHandle, appValue) CSR_UNUSED(appHandle), CSR_UNUSED(appValue)
#define call_unifi_nme_mgt_tspec_req(context, appHandle, action, transactionId, strict, ctrlMask, tspecLength, tspec, tclasLength, tclas) CSR_UNUSED(appHandle), CSR_UNUSED(action), CSR_UNUSED(transactionId), CSR_UNUSED(strict), CSR_UNUSED(ctrlMask), CSR_UNUSED(tspecLength), CSR_UNUSED(tspec), CSR_UNUSED(tclasLength), CSR_UNUSED(tclas)
#define call_unifi_nme_mgt_wifi_flightmode_req(context, appHandle, address, mibFilesCount, mibFiles) CSR_UNUSED(appHandle), CSR_UNUSED(address), CSR_UNUSED(mibFilesCount), CSR_UNUSED(mibFiles)
#define call_unifi_nme_mgt_wifi_off_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_unifi_nme_mgt_wifi_on_req(context, appHandle, address, mibFilesCount, mibFiles) CSR_UNUSED(appHandle), CSR_UNUSED(address), CSR_UNUSED(mibFilesCount), CSR_UNUSED(mibFiles)

#else

#include "csr_wifi_nme_mgt_sap/csr_wifi_nme_mgt_sap.h"

#ifdef FSM_TRANSITION_LOCK

#define call_unifi_nme_mgt_blacklist_req(context, p_appHandle, p_action, p_setAddressCount, p_setAddresses) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_BLACKLIST_REQ appHandle = %p action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_mgt_blacklist_req(context->externalContext, p_appHandle, p_action, p_setAddressCount, p_setAddresses); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_connect_req(context, p_appHandle, p_connectionConfig) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_CONNECT_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_connect_req(context->externalContext, p_appHandle, p_connectionConfig); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_disconnect_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_DISCONNECT_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_disconnect_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_event_mask_set_req(context, p_appHandle, p_indMask) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_EVENT_MASK_SET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_event_mask_set_req(context->externalContext, p_appHandle, p_indMask); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_get_value_req(context, p_appHandle, p_appValueId) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_GET_VALUE_REQ appHandle = %p appValueId = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_AppValueId(p_appValueId)    ));\
    unifi_nme_mgt_get_value_req(context->externalContext, p_appHandle, p_appValueId); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_key_req(context, p_appHandle, p_action, p_key) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_KEY_REQ appHandle = %p action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_mgt_key_req(context->externalContext, p_appHandle, p_action, p_key); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_mib_get_req(context, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MIB_GET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_mib_get_req(context->externalContext, p_appHandle, p_mibAttributeLength, p_mibAttribute); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_mib_get_next_req(context, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MIB_GET_NEXT_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_mib_get_next_req(context->externalContext, p_appHandle, p_mibAttributeLength, p_mibAttribute); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_mib_set_req(context, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MIB_SET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_mib_set_req(context->externalContext, p_appHandle, p_mibAttributeLength, p_mibAttribute); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_multicast_address_req(context, p_appHandle, p_action, p_setAddressesCount, p_setAddresses) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MULTICAST_ADDRESS_REQ appHandle = %p action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_mgt_multicast_address_req(context->externalContext, p_appHandle, p_action, p_setAddressesCount, p_setAddresses); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_packet_filter_set_req(context, p_appHandle, p_filterLength, p_filter, p_mode, p_arpFilterAddress) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_PACKET_FILTER_SET_REQ appHandle = %p mode = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_PacketFilterMode(p_mode)    ));\
    unifi_nme_mgt_packet_filter_set_req(context->externalContext, p_appHandle, p_filterLength, p_filter, p_mode, p_arpFilterAddress); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_pmkid_req(context, p_appHandle, p_action, p_setPmkidsCount, p_setPmkids) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_PMKID_REQ appHandle = %p action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_mgt_pmkid_req(context->externalContext, p_appHandle, p_action, p_setPmkidsCount, p_setPmkids); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_restricted_access_disable_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_RESTRICTED_ACCESS_DISABLE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_restricted_access_disable_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_restricted_access_enable_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_RESTRICTED_ACCESS_ENABLE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_restricted_access_enable_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_scan_full_req(context, p_appHandle, p_ssidCount, p_ssid, p_bssid, p_forceScan, p_bssType, p_scanType, p_channelListCount, p_channelList, p_probeIeLength, p_probeIe) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SCAN_FULL_REQ appHandle = %p forceScan = %s bssType = %s scanType = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        p_forceScan?"TRUE":"FALSE", \
        trace_unifi_BSSType(p_bssType), \
        trace_unifi_ScanType(p_scanType)    ));\
    unifi_nme_mgt_scan_full_req(context->externalContext, p_appHandle, p_ssidCount, p_ssid, p_bssid, p_forceScan, p_bssType, p_scanType, p_channelListCount, p_channelList, p_probeIeLength, p_probeIe); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_scan_results_flush_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SCAN_RESULTS_FLUSH_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_scan_results_flush_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_scan_results_get_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SCAN_RESULTS_GET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_scan_results_get_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_set_value_req(context, p_appHandle, p_appValue) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SET_VALUE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_set_value_req(context->externalContext, p_appHandle, p_appValue); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_tspec_req(context, p_appHandle, p_action, p_transactionId, p_strict, p_ctrlMask, p_tspecLength, p_tspec, p_tclasLength, p_tclas) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_TSPEC_REQ appHandle = %p action = %s strict = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_ListAction(p_action), \
        p_strict?"TRUE":"FALSE"    ));\
    unifi_nme_mgt_tspec_req(context->externalContext, p_appHandle, p_action, p_transactionId, p_strict, p_ctrlMask, p_tspecLength, p_tspec, p_tclasLength, p_tclas); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_wifi_flightmode_req(context, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_WIFI_FLIGHTMODE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_wifi_flightmode_req(context->externalContext, p_appHandle, p_address, p_mibFilesCount, p_mibFiles); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_wifi_off_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_WIFI_OFF_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_wifi_off_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mgt_wifi_on_req(context, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_WIFI_ON_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    unifi_nme_mgt_wifi_on_req(context->externalContext, p_appHandle, p_address, p_mibFilesCount, p_mibFiles); \
    (void)CsrMutexLock(context->transitionLock);


#else

#define call_unifi_nme_mgt_blacklist_req(context, p_appHandle, p_action, p_setAddressCount, p_setAddresses) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_BLACKLIST_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_blacklist_req(context->externalContext, p_appHandle, p_action, p_setAddressCount, p_setAddresses);

#define call_unifi_nme_mgt_connect_req(context, p_appHandle, p_connectionConfig) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_CONNECT_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_connect_req(context->externalContext, p_appHandle, p_connectionConfig);

#define call_unifi_nme_mgt_disconnect_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_DISCONNECT_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_disconnect_req(context->externalContext, p_appHandle);

#define call_unifi_nme_mgt_event_mask_set_req(context, p_appHandle, p_indMask) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_EVENT_MASK_SET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_event_mask_set_req(context->externalContext, p_appHandle, p_indMask);

#define call_unifi_nme_mgt_get_value_req(context, p_appHandle, p_appValueId) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_GET_VALUE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_get_value_req(context->externalContext, p_appHandle, p_appValueId);

#define call_unifi_nme_mgt_key_req(context, p_appHandle, p_action, p_key) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_KEY_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_key_req(context->externalContext, p_appHandle, p_action, p_key);

#define call_unifi_nme_mgt_mib_get_req(context, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MIB_GET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_mib_get_req(context->externalContext, p_appHandle, p_mibAttributeLength, p_mibAttribute);

#define call_unifi_nme_mgt_mib_get_next_req(context, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MIB_GET_NEXT_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_mib_get_next_req(context->externalContext, p_appHandle, p_mibAttributeLength, p_mibAttribute);

#define call_unifi_nme_mgt_mib_set_req(context, p_appHandle, p_mibAttributeLength, p_mibAttribute) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MIB_SET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_mib_set_req(context->externalContext, p_appHandle, p_mibAttributeLength, p_mibAttribute);

#define call_unifi_nme_mgt_multicast_address_req(context, p_appHandle, p_action, p_setAddressesCount, p_setAddresses) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_MULTICAST_ADDRESS_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_multicast_address_req(context->externalContext, p_appHandle, p_action, p_setAddressesCount, p_setAddresses);

#define call_unifi_nme_mgt_packet_filter_set_req(context, p_appHandle, p_filterLength, p_filter, p_mode, p_arpFilterAddress) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_PACKET_FILTER_SET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_packet_filter_set_req(context->externalContext, p_appHandle, p_filterLength, p_filter, p_mode, p_arpFilterAddress);

#define call_unifi_nme_mgt_pmkid_req(context, p_appHandle, p_action, p_setPmkidsCount, p_setPmkids) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_PMKID_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_pmkid_req(context->externalContext, p_appHandle, p_action, p_setPmkidsCount, p_setPmkids);

#define call_unifi_nme_mgt_restricted_access_disable_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_RESTRICTED_ACCESS_DISABLE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_restricted_access_disable_req(context->externalContext, p_appHandle);

#define call_unifi_nme_mgt_restricted_access_enable_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_RESTRICTED_ACCESS_ENABLE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_restricted_access_enable_req(context->externalContext, p_appHandle);

#define call_unifi_nme_mgt_scan_full_req(context, p_appHandle, p_ssidCount, p_ssid, p_bssid, p_forceScan, p_bssType, p_scanType, p_channelListCount, p_channelList, p_probeIeLength, p_probeIe) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SCAN_FULL_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_scan_full_req(context->externalContext, p_appHandle, p_ssidCount, p_ssid, p_bssid, p_forceScan, p_bssType, p_scanType, p_channelListCount, p_channelList, p_probeIeLength, p_probeIe);

#define call_unifi_nme_mgt_scan_results_flush_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SCAN_RESULTS_FLUSH_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_scan_results_flush_req(context->externalContext, p_appHandle);

#define call_unifi_nme_mgt_scan_results_get_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SCAN_RESULTS_GET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_scan_results_get_req(context->externalContext, p_appHandle);

#define call_unifi_nme_mgt_set_value_req(context, p_appHandle, p_appValue) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_SET_VALUE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_set_value_req(context->externalContext, p_appHandle, p_appValue);

#define call_unifi_nme_mgt_tspec_req(context, p_appHandle, p_action, p_transactionId, p_strict, p_ctrlMask, p_tspecLength, p_tspec, p_tclasLength, p_tclas) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_TSPEC_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_tspec_req(context->externalContext, p_appHandle, p_action, p_transactionId, p_strict, p_ctrlMask, p_tspecLength, p_tspec, p_tclasLength, p_tclas);

#define call_unifi_nme_mgt_wifi_flightmode_req(context, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_WIFI_FLIGHTMODE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_wifi_flightmode_req(context->externalContext, p_appHandle, p_address, p_mibFilesCount, p_mibFiles);

#define call_unifi_nme_mgt_wifi_off_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_WIFI_OFF_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_wifi_off_req(context->externalContext, p_appHandle);

#define call_unifi_nme_mgt_wifi_on_req(context, p_appHandle, p_address, p_mibFilesCount, p_mibFiles) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MGT_WIFI_ON_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mgt_wifi_on_req(context->externalContext, p_appHandle, p_address, p_mibFilesCount, p_mibFiles);


#endif
#endif

#ifdef __cplusplus
}
#endif

#endif /* CSR_WIFI_NME_MGT_OUTPUT_H */

