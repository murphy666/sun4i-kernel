/* This is an autogenerated file */
/* Tag: noCheckHeader */

/*    CONFIDENTIAL */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2008. All rights reserved. */

#ifndef CSR_WIFI_NME_OUTPUT_H
#define CSR_WIFI_NME_OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SME_API_VALIDATE

#define call_unifi_nme_association_complete_ind(context, appHandlesCount, appHandles, status, connectionInfo, deauthReason) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(status), CSR_UNUSED(connectionInfo), CSR_UNUSED(deauthReason)
#define call_unifi_nme_association_start_ind(context, appHandlesCount, appHandles, address, ssid) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(address), CSR_UNUSED(ssid)
#define call_unifi_nme_blacklist_cfm(context, appHandle, status, action, getAddressCount, getAddresses) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(action), CSR_UNUSED(getAddressCount), CSR_UNUSED(getAddresses)
#define call_unifi_nme_certificate_validate_ind(context, appHandlesCount, appHandles, validationId, certificateLength, certificate) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(validationId), CSR_UNUSED(certificateLength), CSR_UNUSED(certificate)
#define call_unifi_nme_connect_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_connection_quality_ind(context, appHandlesCount, appHandles, linkQuality) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(linkQuality)
#define call_unifi_nme_connection_status_get_cfm(context, appHandle, status, connectionStatus) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(connectionStatus)
#define call_unifi_nme_disconnect_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_event_mask_set_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_get_value_cfm(context, appHandle, status, appValue) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(appValue)
#define call_unifi_nme_ibss_station_ind(context, appHandlesCount, appHandles, address, isconnected) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(address), CSR_UNUSED(isconnected)
#define call_unifi_nme_key_cfm(context, appHandle, status, action) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(action)
#define call_unifi_nme_media_status_ind(context, appHandlesCount, appHandles, mediaStatus, connectionInfo, disassocReason, deauthReason) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(mediaStatus), CSR_UNUSED(connectionInfo), CSR_UNUSED(disassocReason), CSR_UNUSED(deauthReason)
#define call_unifi_nme_mib_get_cfm(context, appHandle, status, mibAttributeLength, mibAttribute) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(mibAttributeLength), CSR_UNUSED(mibAttribute)
#define call_unifi_nme_mib_get_next_cfm(context, appHandle, status, mibAttributeLength, mibAttribute) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(mibAttributeLength), CSR_UNUSED(mibAttribute)
#define call_unifi_nme_mib_set_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_mic_failure_ind(context, appHandlesCount, appHandles, secondFailure, count, address, keyType, keyId, tsc) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(secondFailure), CSR_UNUSED(count), CSR_UNUSED(address), CSR_UNUSED(keyType), CSR_UNUSED(keyId), CSR_UNUSED(tsc)
#define call_unifi_nme_multicast_address_cfm(context, appHandle, status, action, getAddressesCount, getAddresses) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(action), CSR_UNUSED(getAddressesCount), CSR_UNUSED(getAddresses)
#define call_unifi_nme_packet_filter_set_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_pmkid_cfm(context, appHandle, status, action, getPmkidsCount, getPmkids) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(action), CSR_UNUSED(getPmkidsCount), CSR_UNUSED(getPmkids)
#define call_unifi_nme_pmkid_candidate_list_ind(context, appHandlesCount, appHandles, pmkidCandidatesCount, pmkidCandidates) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(pmkidCandidatesCount), CSR_UNUSED(pmkidCandidates)
#define call_unifi_nme_profile_connect_cfm(context, appHandle, status, connectAttemptsCount, connectAttempts) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(connectAttemptsCount), CSR_UNUSED(connectAttempts)
#define call_unifi_nme_profile_delete_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_profile_delete_all_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_profile_disconnect_ind(context, appHandlesCount, appHandles, connectAttemptsCount, connectAttempts) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(connectAttemptsCount), CSR_UNUSED(connectAttempts)
#define call_unifi_nme_profile_order_set_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_profile_set_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_profile_update_ind(context, appHandlesCount, appHandles, profile) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(profile)
#define call_unifi_nme_restricted_access_disable_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_restricted_access_enable_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_roam_complete_ind(context, appHandlesCount, appHandles, status) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(status)
#define call_unifi_nme_roam_start_ind(context, appHandlesCount, appHandles, roamReason, reason80211) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(roamReason), CSR_UNUSED(reason80211)
#define call_unifi_nme_scan_full_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_scan_result_ind(context, appHandlesCount, appHandles, result) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(result)
#define call_unifi_nme_scan_results_flush_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_scan_results_get_cfm(context, appHandle, status, scanResultsCount, scanResults) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(scanResultsCount), CSR_UNUSED(scanResults)
#define call_unifi_nme_set_value_cfm(context, appHandle, status, appValueId) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(appValueId)
#define call_unifi_nme_tspec_ind(context, appHandlesCount, appHandles, transactionId, tspecResultCode, tspecLength, tspec) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(transactionId), CSR_UNUSED(tspecResultCode), CSR_UNUSED(tspecLength), CSR_UNUSED(tspec)
#define call_unifi_nme_tspec_cfm(context, appHandle, status, transactionId, tspecResultCode, tspecLength, tspec) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(transactionId), CSR_UNUSED(tspecResultCode), CSR_UNUSED(tspecLength), CSR_UNUSED(tspec)
#define call_unifi_nme_wifi_flightmode_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_wifi_off_ind(context, appHandlesCount, appHandles, controlIndication) CSR_UNUSED(appHandlesCount), CSR_UNUSED(appHandles), CSR_UNUSED(controlIndication)
#define call_unifi_nme_wifi_off_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_wifi_on_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)
#define call_unifi_nme_wps_cfm(context, appHandle, status, profile) CSR_UNUSED(appHandle), CSR_UNUSED(status), CSR_UNUSED(profile)
#define call_unifi_nme_wps_cancel_cfm(context, appHandle, status) CSR_UNUSED(appHandle), CSR_UNUSED(status)

#else

#include "csr_wifi_nme_sap/csr_wifi_nme_sap.h"

#ifdef FSM_TRANSITION_LOCK

#define call_unifi_nme_association_complete_ind(context, p_appHandlesCount, p_appHandles, p_status, p_connectionInfo, p_deauthReason) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ASSOCIATION_COMPLETE_IND appHandles = %p status = %s deauthReason = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        trace_unifi_Status(p_status), \
        trace_unifi_IEEE80211Reason(p_deauthReason)    ));\
    unifi_nme_association_complete_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_status, p_connectionInfo, p_deauthReason); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_association_start_ind(context, p_appHandlesCount, p_appHandles, p_address, p_ssid) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ASSOCIATION_START_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_association_start_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_address, p_ssid); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_blacklist_cfm(context, p_appHandle, p_status, p_action, p_getAddressCount, p_getAddresses) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_BLACKLIST_CFM appHandle = %p status = %s action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_blacklist_cfm(context->externalContext, p_appHandle, p_status, p_action, p_getAddressCount, p_getAddresses); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_certificate_validate_ind(context, p_appHandlesCount, p_appHandles, p_validationId, p_certificateLength, p_certificate) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CERTIFICATE_VALIDATE_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_certificate_validate_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_validationId, p_certificateLength, p_certificate); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_connect_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CONNECT_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_connect_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_connection_quality_ind(context, p_appHandlesCount, p_appHandles, p_linkQuality) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CONNECTION_QUALITY_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_connection_quality_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_linkQuality); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_connection_status_get_cfm(context, p_appHandle, p_status, p_connectionStatus) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CONNECTION_STATUS_GET_CFM appHandle = %p status = %s connectionStatus = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_ConnectionStatus(p_connectionStatus)    ));\
    unifi_nme_connection_status_get_cfm(context->externalContext, p_appHandle, p_status, p_connectionStatus); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_disconnect_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_DISCONNECT_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_disconnect_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_event_mask_set_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_EVENT_MASK_SET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_event_mask_set_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_get_value_cfm(context, p_appHandle, p_status, p_appValue) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_GET_VALUE_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_get_value_cfm(context->externalContext, p_appHandle, p_status, p_appValue); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_ibss_station_ind(context, p_appHandlesCount, p_appHandles, p_address, p_isconnected) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_IBSS_STATION_IND appHandles = %p isconnected = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        p_isconnected?"TRUE":"FALSE"    ));\
    unifi_nme_ibss_station_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_address, p_isconnected); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_key_cfm(context, p_appHandle, p_status, p_action) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_KEY_CFM appHandle = %p status = %s action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_key_cfm(context->externalContext, p_appHandle, p_status, p_action); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_media_status_ind(context, p_appHandlesCount, p_appHandles, p_mediaStatus, p_connectionInfo, p_disassocReason, p_deauthReason) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MEDIA_STATUS_IND appHandles = %p mediaStatus = %s disassocReason = %s deauthReason = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        trace_unifi_MediaStatus(p_mediaStatus), \
        trace_unifi_IEEE80211Reason(p_disassocReason), \
        trace_unifi_IEEE80211Reason(p_deauthReason)    ));\
    unifi_nme_media_status_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_mediaStatus, p_connectionInfo, p_disassocReason, p_deauthReason); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mib_get_cfm(context, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIB_GET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_mib_get_cfm(context->externalContext, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mib_get_next_cfm(context, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIB_GET_NEXT_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_mib_get_next_cfm(context->externalContext, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mib_set_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIB_SET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_mib_set_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_mic_failure_ind(context, p_appHandlesCount, p_appHandles, p_secondFailure, p_count, p_address, p_keyType, p_keyId, p_tsc) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIC_FAILURE_IND appHandles = %p secondFailure = %s keyType = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        p_secondFailure?"TRUE":"FALSE", \
        trace_unifi_KeyType(p_keyType)    ));\
    unifi_nme_mic_failure_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_secondFailure, p_count, p_address, p_keyType, p_keyId, p_tsc); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_multicast_address_cfm(context, p_appHandle, p_status, p_action, p_getAddressesCount, p_getAddresses) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MULTICAST_ADDRESS_CFM appHandle = %p status = %s action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_multicast_address_cfm(context->externalContext, p_appHandle, p_status, p_action, p_getAddressesCount, p_getAddresses); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_packet_filter_set_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PACKET_FILTER_SET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_packet_filter_set_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_pmkid_cfm(context, p_appHandle, p_status, p_action, p_getPmkidsCount, p_getPmkids) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PMKID_CFM appHandle = %p status = %s action = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_ListAction(p_action)    ));\
    unifi_nme_pmkid_cfm(context->externalContext, p_appHandle, p_status, p_action, p_getPmkidsCount, p_getPmkids); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_pmkid_candidate_list_ind(context, p_appHandlesCount, p_appHandles, p_pmkidCandidatesCount, p_pmkidCandidates) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PMKID_CANDIDATE_LIST_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_pmkid_candidate_list_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_pmkidCandidatesCount, p_pmkidCandidates); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_connect_cfm(context, p_appHandle, p_status, p_connectAttemptsCount, p_connectAttempts) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_CONNECT_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_profile_connect_cfm(context->externalContext, p_appHandle, p_status, p_connectAttemptsCount, p_connectAttempts); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_delete_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_DELETE_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_profile_delete_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_delete_all_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_DELETE_ALL_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_profile_delete_all_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_disconnect_ind(context, p_appHandlesCount, p_appHandles, p_connectAttemptsCount, p_connectAttempts) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_DISCONNECT_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_profile_disconnect_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_connectAttemptsCount, p_connectAttempts); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_order_set_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_ORDER_SET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_profile_order_set_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_set_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_SET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_profile_set_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_profile_update_ind(context, p_appHandlesCount, p_appHandles, p_profile) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_UPDATE_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_profile_update_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_profile); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_restricted_access_disable_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_RESTRICTED_ACCESS_DISABLE_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_restricted_access_disable_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_restricted_access_enable_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_RESTRICTED_ACCESS_ENABLE_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_restricted_access_enable_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_roam_complete_ind(context, p_appHandlesCount, p_appHandles, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ROAM_COMPLETE_IND appHandles = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_roam_complete_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_roam_start_ind(context, p_appHandlesCount, p_appHandles, p_roamReason, p_reason80211) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ROAM_START_IND appHandles = %p roamReason = %s reason80211 = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        trace_unifi_RoamReason(p_roamReason), \
        trace_unifi_IEEE80211Reason(p_reason80211)    ));\
    unifi_nme_roam_start_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_roamReason, p_reason80211); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_scan_full_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_FULL_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_scan_full_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_scan_result_ind(context, p_appHandlesCount, p_appHandles, p_result) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_RESULT_IND appHandles = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles    ));\
    unifi_nme_scan_result_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_result); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_scan_results_flush_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_RESULTS_FLUSH_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_scan_results_flush_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_scan_results_get_cfm(context, p_appHandle, p_status, p_scanResultsCount, p_scanResults) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_RESULTS_GET_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_scan_results_get_cfm(context->externalContext, p_appHandle, p_status, p_scanResultsCount, p_scanResults); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_set_value_cfm(context, p_appHandle, p_status, p_appValueId) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SET_VALUE_CFM appHandle = %p status = %s appValueId = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_AppValueId(p_appValueId)    ));\
    unifi_nme_set_value_cfm(context->externalContext, p_appHandle, p_status, p_appValueId); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_tspec_ind(context, p_appHandlesCount, p_appHandles, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_TSPEC_IND appHandles = %p tspecResultCode = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        trace_unifi_TspecResultCode(p_tspecResultCode)    ));\
    unifi_nme_tspec_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_tspec_cfm(context, p_appHandle, p_status, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_TSPEC_CFM appHandle = %p status = %s tspecResultCode = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status), \
        trace_unifi_TspecResultCode(p_tspecResultCode)    ));\
    unifi_nme_tspec_cfm(context->externalContext, p_appHandle, p_status, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_wifi_flightmode_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_FLIGHTMODE_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_wifi_flightmode_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_wifi_off_ind(context, p_appHandlesCount, p_appHandles, p_controlIndication) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_OFF_IND appHandles = %p controlIndication = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandles, \
        trace_unifi_ControlIndication(p_controlIndication)    ));\
    unifi_nme_wifi_off_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_controlIndication); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_wifi_off_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_OFF_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_wifi_off_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_wifi_on_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_ON_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_wifi_on_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_wps_cfm(context, p_appHandle, p_status, p_profile) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WPS_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_wps_cfm(context->externalContext, p_appHandle, p_status, p_profile); \
    (void)CsrMutexLock(context->transitionLock);

#define call_unifi_nme_wps_cancel_cfm(context, p_appHandle, p_status) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WPS_CANCEL_CFM appHandle = %p status = %s) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle, \
        trace_unifi_Status(p_status)    ));\
    unifi_nme_wps_cancel_cfm(context->externalContext, p_appHandle, p_status); \
    (void)CsrMutexLock(context->transitionLock);


#else

#define call_unifi_nme_association_complete_ind(context, p_appHandlesCount, p_appHandles, p_status, p_connectionInfo, p_deauthReason) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ASSOCIATION_COMPLETE_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_association_complete_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_status, p_connectionInfo, p_deauthReason);

#define call_unifi_nme_association_start_ind(context, p_appHandlesCount, p_appHandles, p_address, p_ssid) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ASSOCIATION_START_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_association_start_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_address, p_ssid);

#define call_unifi_nme_blacklist_cfm(context, p_appHandle, p_status, p_action, p_getAddressCount, p_getAddresses) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_BLACKLIST_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_blacklist_cfm(context->externalContext, p_appHandle, p_status, p_action, p_getAddressCount, p_getAddresses);

#define call_unifi_nme_certificate_validate_ind(context, p_appHandlesCount, p_appHandles, p_validationId, p_certificateLength, p_certificate) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CERTIFICATE_VALIDATE_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_certificate_validate_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_validationId, p_certificateLength, p_certificate);

#define call_unifi_nme_connect_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CONNECT_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_connect_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_connection_quality_ind(context, p_appHandlesCount, p_appHandles, p_linkQuality) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CONNECTION_QUALITY_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_connection_quality_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_linkQuality);

#define call_unifi_nme_connection_status_get_cfm(context, p_appHandle, p_status, p_connectionStatus) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_CONNECTION_STATUS_GET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_connection_status_get_cfm(context->externalContext, p_appHandle, p_status, p_connectionStatus);

#define call_unifi_nme_disconnect_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_DISCONNECT_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_disconnect_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_event_mask_set_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_EVENT_MASK_SET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_event_mask_set_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_get_value_cfm(context, p_appHandle, p_status, p_appValue) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_GET_VALUE_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_get_value_cfm(context->externalContext, p_appHandle, p_status, p_appValue);

#define call_unifi_nme_ibss_station_ind(context, p_appHandlesCount, p_appHandles, p_address, p_isconnected) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_IBSS_STATION_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_ibss_station_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_address, p_isconnected);

#define call_unifi_nme_key_cfm(context, p_appHandle, p_status, p_action) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_KEY_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_key_cfm(context->externalContext, p_appHandle, p_status, p_action);

#define call_unifi_nme_media_status_ind(context, p_appHandlesCount, p_appHandles, p_mediaStatus, p_connectionInfo, p_disassocReason, p_deauthReason) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MEDIA_STATUS_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_media_status_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_mediaStatus, p_connectionInfo, p_disassocReason, p_deauthReason);

#define call_unifi_nme_mib_get_cfm(context, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIB_GET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mib_get_cfm(context->externalContext, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute);

#define call_unifi_nme_mib_get_next_cfm(context, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIB_GET_NEXT_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mib_get_next_cfm(context->externalContext, p_appHandle, p_status, p_mibAttributeLength, p_mibAttribute);

#define call_unifi_nme_mib_set_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIB_SET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mib_set_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_mic_failure_ind(context, p_appHandlesCount, p_appHandles, p_secondFailure, p_count, p_address, p_keyType, p_keyId, p_tsc) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MIC_FAILURE_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_mic_failure_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_secondFailure, p_count, p_address, p_keyType, p_keyId, p_tsc);

#define call_unifi_nme_multicast_address_cfm(context, p_appHandle, p_status, p_action, p_getAddressesCount, p_getAddresses) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_MULTICAST_ADDRESS_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_multicast_address_cfm(context->externalContext, p_appHandle, p_status, p_action, p_getAddressesCount, p_getAddresses);

#define call_unifi_nme_packet_filter_set_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PACKET_FILTER_SET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_packet_filter_set_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_pmkid_cfm(context, p_appHandle, p_status, p_action, p_getPmkidsCount, p_getPmkids) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PMKID_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_pmkid_cfm(context->externalContext, p_appHandle, p_status, p_action, p_getPmkidsCount, p_getPmkids);

#define call_unifi_nme_pmkid_candidate_list_ind(context, p_appHandlesCount, p_appHandles, p_pmkidCandidatesCount, p_pmkidCandidates) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PMKID_CANDIDATE_LIST_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_pmkid_candidate_list_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_pmkidCandidatesCount, p_pmkidCandidates);

#define call_unifi_nme_profile_connect_cfm(context, p_appHandle, p_status, p_connectAttemptsCount, p_connectAttempts) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_CONNECT_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_connect_cfm(context->externalContext, p_appHandle, p_status, p_connectAttemptsCount, p_connectAttempts);

#define call_unifi_nme_profile_delete_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_DELETE_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_delete_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_profile_delete_all_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_DELETE_ALL_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_delete_all_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_profile_disconnect_ind(context, p_appHandlesCount, p_appHandles, p_connectAttemptsCount, p_connectAttempts) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_DISCONNECT_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_disconnect_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_connectAttemptsCount, p_connectAttempts);

#define call_unifi_nme_profile_order_set_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_ORDER_SET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_order_set_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_profile_set_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_SET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_set_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_profile_update_ind(context, p_appHandlesCount, p_appHandles, p_profile) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_PROFILE_UPDATE_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_profile_update_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_profile);

#define call_unifi_nme_restricted_access_disable_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_RESTRICTED_ACCESS_DISABLE_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_restricted_access_disable_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_restricted_access_enable_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_RESTRICTED_ACCESS_ENABLE_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_restricted_access_enable_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_roam_complete_ind(context, p_appHandlesCount, p_appHandles, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ROAM_COMPLETE_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_roam_complete_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_status);

#define call_unifi_nme_roam_start_ind(context, p_appHandlesCount, p_appHandles, p_roamReason, p_reason80211) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_ROAM_START_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_roam_start_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_roamReason, p_reason80211);

#define call_unifi_nme_scan_full_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_FULL_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_scan_full_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_scan_result_ind(context, p_appHandlesCount, p_appHandles, p_result) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_RESULT_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_scan_result_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_result);

#define call_unifi_nme_scan_results_flush_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_RESULTS_FLUSH_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_scan_results_flush_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_scan_results_get_cfm(context, p_appHandle, p_status, p_scanResultsCount, p_scanResults) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SCAN_RESULTS_GET_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_scan_results_get_cfm(context->externalContext, p_appHandle, p_status, p_scanResultsCount, p_scanResults);

#define call_unifi_nme_set_value_cfm(context, p_appHandle, p_status, p_appValueId) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_SET_VALUE_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_set_value_cfm(context->externalContext, p_appHandle, p_status, p_appValueId);

#define call_unifi_nme_tspec_ind(context, p_appHandlesCount, p_appHandles, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_TSPEC_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_tspec_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec);

#define call_unifi_nme_tspec_cfm(context, p_appHandle, p_status, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_TSPEC_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_tspec_cfm(context->externalContext, p_appHandle, p_status, p_transactionId, p_tspecResultCode, p_tspecLength, p_tspec);

#define call_unifi_nme_wifi_flightmode_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_FLIGHTMODE_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_wifi_flightmode_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_wifi_off_ind(context, p_appHandlesCount, p_appHandles, p_controlIndication) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_OFF_IND) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_wifi_off_ind(context->externalContext, p_appHandlesCount, p_appHandles, p_controlIndication);

#define call_unifi_nme_wifi_off_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_OFF_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_wifi_off_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_wifi_on_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WIFI_ON_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_wifi_on_cfm(context->externalContext, p_appHandle, p_status);

#define call_unifi_nme_wps_cfm(context, p_appHandle, p_status, p_profile) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WPS_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_wps_cfm(context->externalContext, p_appHandle, p_status, p_profile);

#define call_unifi_nme_wps_cancel_cfm(context, p_appHandle, p_status) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(UNIFI_NME_WPS_CANCEL_CFM) To(env)", \
                   fsm_current_process_name((context)))); \
    unifi_nme_wps_cancel_cfm(context->externalContext, p_appHandle, p_status);


#endif
#endif

#ifdef __cplusplus
}
#endif

#endif /* CSR_WIFI_NME_OUTPUT_H */

