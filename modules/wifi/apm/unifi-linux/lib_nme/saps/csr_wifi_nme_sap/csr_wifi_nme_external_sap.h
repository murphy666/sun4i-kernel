/* This is an autogenerated file */
/* Tag: noCheckHeader */

/*    CONFIDENTIAL */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2008. All rights reserved. */

#ifndef __CSR_WIFI_NME_EXTERNAL_SAP_H__
#define __CSR_WIFI_NME_EXTERNAL_SAP_H__

#ifdef __cplusplus
extern "C" {
#endif

/* ------------------------------------------ */
typedef enum unifi_80211NetworkType
{
    unifi_80211DS                                           = 0x00,
    unifi_80211OFDM24                                       = 0x01,
    unifi_80211OFDM5                                        = 0x02,
    unifi_80211Auto                                         = 0x03
} unifi_80211NetworkType;

typedef enum unifi_80211PrivacyMode
{
    unifi_80211PrivacyDisabled                              = 0x00,
    unifi_80211PrivacyEnabled                               = 0x01
} unifi_80211PrivacyMode;

typedef enum unifi_80211dTrustLevel
{
    unifi_TrustStrict                                       = 0x01,
    unifi_TrustAdjunct                                      = 0x02,
    unifi_TrustBSS                                          = 0x03,
    unifi_TrustIBSS                                         = 0x04,
    unifi_TrustMIB                                          = 0x05,
    unifi_TrustDisabled                                     = 0x06
} unifi_80211dTrustLevel;

typedef enum unifi_AppValueId
{
    unifi_StationMACAddressValue                            = 0x00,
    unifi_PermanentMACAddressValue                          = 0x01,
    unifi_CalibrationDataValue                              = 0x02,
    unifi_ConnectionConfigValue                             = 0x03,
    unifi_AdHocConfigValue                                  = 0x04,
    unifi_ConnectionInfoValue                               = 0x05,
    unifi_ConnectionStatsValue                              = 0x06,
    unifi_CoexConfigValue                                   = 0x07,
    unifi_CoexInfoValue                                     = 0x08,
    unifi_ScanConfigValue                                   = 0x09,
    unifi_PowerConfigValue                                  = 0x0A,
    unifi_VersionsValue                                     = 0x0B,
    unifi_SmeConfigValue                                    = 0x0C,
    unifi_HostConfigValue                                   = 0x0D,
    unifi_MibConfigValue                                    = 0x0E,
    unifi_RoamingConfigValue                                = 0x0F,
    unifi_CcxConfigValue                                    = 0x10,
    unifi_RegulatoryDomainInfoValue                         = 0x11,
    unifi_LinkQualityValue                                  = 0x12,
    unifi_CloakedSsidConfigValue                            = 0x13
} unifi_AppValueId;

typedef enum unifi_AuthMode
{
    unifi_80211AuthOpen                                     = 0x0001,
    unifi_80211AuthShared                                   = 0x0002,
    unifi_8021xAuthWPA                                      = 0x0004,
    unifi_8021xAuthWPAPSK                                   = 0x0008,
    unifi_8021xAuthWPA2                                     = 0x0010,
    unifi_8021xAuthWPA2PSK                                  = 0x0020,
    unifi_WAPIAuthWAI                                       = 0x0040,
    unifi_WAPIAuthWAIPSK                                    = 0x0080,
    unifi_8021xAuthOther1x                                  = 0x0100
} unifi_AuthMode;

typedef enum unifi_BSSType
{
    unifi_Infrastructure                                    = 0x00,
    unifi_Adhoc                                             = 0x01,
    unifi_AnyBss                                            = 0x02
} unifi_BSSType;

typedef enum unifi_BasicUsability
{
    unifi_Unusable                                          = 0x00,
    unifi_Poor                                              = 0x01,
    unifi_Satisfactory                                      = 0x02,
    unifi_NotConnected                                      = 0x03
} unifi_BasicUsability;

typedef enum unifi_CertificateStatus
{
    unifi_CertificateValid                                  = 0x00,
    unifi_CertificateUnsupported                            = 0x01,
    unifi_CertificateRevoked                                = 0x02,
    unifi_CertificateExpired                                = 0x03,
    unifi_CertificateUnknown                                = 0x04
} unifi_CertificateStatus;

typedef enum unifi_CoexDirection
{
    unifi_CoexDirectionDot11Input                           = 0x01,
    unifi_CoexDirectionDot11Output                          = 0x02
} unifi_CoexDirection;

typedef enum unifi_CoexScheme
{
    unifi_CoexSchemeDisabled                                = 0x00,
    unifi_CoexSchemeCSR                                     = 0x01,
    unifi_CoexSchemeCSRChannel                              = 0x02,
    unifi_CoexSchemePTA                                     = 0x03
} unifi_CoexScheme;

typedef enum unifi_ConnectionStatus
{
    unifi_ConnectionStatusDisconnected                      = 0x00,
    unifi_ConnectionStatusConnecting                        = 0x01,
    unifi_ConnectionStatusAuthenticating                    = 0x02,
    unifi_ConnectionStatusConnected                         = 0x03,
    unifi_ConnectionStatusDisconnecting                     = 0x04
} unifi_ConnectionStatus;

typedef enum unifi_ControlIndication
{
    unifi_ControlError                                      = 0x01,
    unifi_ControlExit                                       = 0x02
} unifi_ControlIndication;

typedef enum unifi_CredentialType
{
    unifi_CredentialTypeOpenSystem                          = 0x0000,
    unifi_CredentialTypeWep64                               = 0x0001,
    unifi_CredentialTypeWep128                              = 0x0002,
    unifi_CredentialTypeWpaPsk                              = 0x0003,
    unifi_CredentialTypeWpaPassphrase                       = 0x0004,
    unifi_CredentialTypeWpa2Psk                             = 0x0005,
    unifi_CredentialTypeWpa2Passphrase                      = 0x0006,
    unifi_CredentialType8021xTls                            = 0x0007,
    unifi_CredentialType8021xTtls                           = 0x0008,
    unifi_CredentialType8021xPeapGtc                        = 0x0009,
    unifi_CredentialType8021xPeapMschapv2                   = 0x000A,
    unifi_CredentialType8021xLeap                           = 0x000B,
    unifi_CredentialType8021xFast                           = 0x000C,
    unifi_CredentialTypeWapiPsk                             = 0x000D,
    unifi_CredentialTypeWapiPassphrase                      = 0x000E,
    unifi_CredentialTypeWapi                                = 0x000F
} unifi_CredentialType;

typedef enum unifi_D3AutoScanMode
{
    unifi_PSOn                                              = 0x00,
    unifi_PSOff                                             = 0x01,
    unifi_PSAuto                                            = 0x02
} unifi_D3AutoScanMode;

typedef enum unifi_EncryptionMode
{
    unifi_EncryptionCipherNone                              = 0x0000,
    unifi_EncryptionCipherPairwiseWep40                     = 0x0001,
    unifi_EncryptionCipherPairwiseWep104                    = 0x0002,
    unifi_EncryptionCipherPairwiseTkip                      = 0x0004,
    unifi_EncryptionCipherPairwiseCcmp                      = 0x0008,
    unifi_EncryptionCipherPairwiseSms4                      = 0x0010,
    unifi_EncryptionCipherGroupWep40                        = 0x0020,
    unifi_EncryptionCipherGroupWep104                       = 0x0040,
    unifi_EncryptionCipherGroupTkip                         = 0x0080,
    unifi_EncryptionCipherGroupCcmp                         = 0x0100,
    unifi_EncryptionCipherGroupSms4                         = 0x0200
} unifi_EncryptionMode;

typedef enum unifi_FirmwareDriverInterface
{
    unifi_UnitDataInterface                                 = 0x00,
    unifi_PacketInterface                                   = 0x01
} unifi_FirmwareDriverInterface;

typedef enum unifi_HostPowerMode
{
    unifi_HostActive                                        = 0x00,
    unifi_HostPowersave                                     = 0x01,
    unifi_HostFullPowersave                                 = 0x02
} unifi_HostPowerMode;

typedef enum unifi_IEEE80211Reason
{
    unifi_IEEE80211ReasonSuccess                            = 0x0000,
    unifi_IEEE80211ReasonUnspecifiedReason                  = 0x0001,
    unifi_IEEE80211ReasonAuthenticationNotValid             = 0x0002,
    unifi_IEEE80211ReasonDeauthenticatedLeaveBss            = 0x0003,
    unifi_IEEE80211ReasonDisassociatedInactivity            = 0x0004,
    unifi_IEEE80211ReasonApOverload                         = 0x0005,
    unifi_IEEE80211ReasonClass2FrameError                   = 0x0006,
    unifi_IEEE80211ReasonClass3FrameError                   = 0x0007,
    unifi_IEEE80211ReasonDisassociatedLeaveBss              = 0x0008,
    unifi_IEEE80211ReasonAssociationNotAuthenticated        = 0x0009,
    unifi_IEEE80211ReasonDisassociatedPowerCapability       = 0x000a,
    unifi_IEEE80211ReasonDisassociatedSupportedChannels     = 0x000b,
    unifi_IEEE80211ReasonInvalidInformationElement          = 0x000d,
    unifi_IEEE80211ReasonMichaelMicFailure                  = 0x000e,
    unifi_IEEE80211ReasonFourwayHandshakeTimeout            = 0x000f,
    unifi_IEEE80211ReasonGroupKeyUpdateTimeout              = 0x0010,
    unifi_IEEE80211ReasonHandshakeElementDifferent          = 0x0011,
    unifi_IEEE80211ReasonInvalidGroupCipher                 = 0x0012,
    unifi_IEEE80211ReasonInvalidPairwiseCipher              = 0x0013,
    unifi_IEEE80211ReasonInvalidAkmp                        = 0x0014,
    unifi_IEEE80211ReasonUnsupportedRsnIEVersion            = 0x0015,
    unifi_IEEE80211ReasonInvalidRsnIECapabilities           = 0x0016,
    unifi_IEEE80211ReasonDot1XAuthFailed                    = 0x0017,
    unifi_IEEE80211ReasonCipherRejectedByPolicy             = 0x0018,
    unifi_IEEE80211ReasonServiceChangePrecludesTs           = 0x001F,
    unifi_IEEE80211ReasonQoSUnspecifiedReason               = 0x0020,
    unifi_IEEE80211ReasonQoSInsufficientBandwidth           = 0x0021,
    unifi_IEEE80211ReasonQoSExcessiveNotAck                 = 0x0022,
    unifi_IEEE80211ReasonQoSTXOPLimitExceeded               = 0x0023,
    unifi_IEEE80211ReasonQstaLeaving                        = 0x0024,
    unifi_IEEE80211ReasonEndDls                             = 0x0025,
    unifi_IEEE80211ReasonEndTs                              = 0x0025,
    unifi_IEEE80211ReasonEndBa                              = 0x0025,
    unifi_IEEE80211ReasonUnknownTs                          = 0x0026,
    unifi_IEEE80211ReasonUnknownDls                         = 0x0026,
    unifi_IEEE80211ReasonUnknownBa                          = 0x0026,
    unifi_IEEE80211ReasonTimeout                            = 0x0027,
    unifi_IEEE80211ReasonSTAKeyMismatch                     = 0x002d,
    unifi_IEEE80211ReasonUnicastKeyNegotiationTimeout       = 0xf019,
    unifi_IEEE80211ReasonMulticastKeyAnnouncementTimeout    = 0xf01a,
    unifi_IEEE80211ReasonIncompatibleUnicastKeyNegotiationIe = 0xf01b,
    unifi_IEEE80211ReasonInvalidMulticastCipher             = 0xf01c,
    unifi_IEEE80211ReasonInvalidUnicastCipher               = 0xf01d,
    unifi_IEEE80211ReasonUnsupportedWapiIeVersion           = 0xf01e,
    unifi_IEEE80211ReasonInvalidWapiCapabilityIe            = 0xf01f,
    unifi_IEEE80211ReasonWaiCertificateAuthenticationFailed = 0xf020
} unifi_IEEE80211Reason;

typedef enum unifi_IEEE80211Result
{
    unifi_IEEE80211ResultSuccess                            = 0x0000,
    unifi_IEEE80211ResultUnspecifiedFailure                 = 0x0001,
    unifi_IEEE80211ResultRefusedCapabilitiesMismatch        = 0x000a,
    unifi_IEEE80211ResultReassociationDeniedNoAssociation   = 0x000b,
    unifi_IEEE80211ResultRefusedExternalReason              = 0x000c,
    unifi_IEEE80211ResultRefusedAuthenticationMismatch      = 0x000d,
    unifi_IEEE80211ResultRefusedInvalidAuthenticationSequenceNumber = 0x000e,
    unifi_IEEE80211ResultRefusedChallengeFailure            = 0x000f,
    unifi_IEEE80211ResultRefusedAuthenticationTimeout       = 0x0010,
    unifi_IEEE80211ResultRefusedApOutOfMemory               = 0x0011,
    unifi_IEEE80211ResultRefusedBasicRatesMismatch          = 0x0012,
    unifi_IEEE80211ResultRefusedShortPreambleRequired       = 0x0013,
    unifi_IEEE80211ResultRefusedPbccModulationRequired      = 0x0014,
    unifi_IEEE80211ResultRefusedChannelAgilityRequired      = 0x0015,
    unifi_IEEE80211ResultRefusedSpectrumManagementRequired  = 0x0016,
    unifi_IEEE80211ResultRefusedPowerCapabilityUnacceptable = 0x0017,
    unifi_IEEE80211ResultRefusedSupportedChannelsUnacceptable = 0x0018,
    unifi_IEEE80211ResultRefusedShortSlotRequired           = 0x0019,
    unifi_IEEE80211ResultRefusedDsssOFDMRequired            = 0x001a,
    unifi_IEEE80211ResultRefusedNoHtSupport                 = 0x001b,
    unifi_IEEE80211ResultR0KhUnreachable                    = 0x001c,
    unifi_IEEE80211ResultRefusedPcoTransitionSupport        = 0x001d,
    unifi_IEEE80211ResultAssociationRequestRejectedTemporarily = 0x001e,
    unifi_IEEE80211ResultRobustManagementFramePolicyViolation = 0x001f,
    unifi_IEEE80211ResultFailure                            = 0x0020,
    unifi_IEEE80211ResultRefusedApBandwidthInsufficient     = 0x0021,
    unifi_IEEE80211ResultRefusedPoorOperatingChannel        = 0x0022,
    unifi_IEEE80211ResultRefusedQosRequired                 = 0x0023,
    unifi_IEEE80211ResultRefused                            = 0x0025,
    unifi_IEEE80211ResultRefusedReasonUnspecified           = 0x0025,
    unifi_IEEE80211ResultInvalidParameters                  = 0x0026,
    unifi_IEEE80211ResultRejectedWithSuggestedTspecChanges  = 0x0027,
    unifi_IEEE80211ResultRejectedInvalidIe                  = 0x0028,
    unifi_IEEE80211ResultRejectedInvalidGroupCipher         = 0x0029,
    unifi_IEEE80211ResultRejectedInvalidPairwiseCipher      = 0x002a,
    unifi_IEEE80211ResultRejectedInvalidAkmp                = 0x002b,
    unifi_IEEE80211ResultRejectedUnsupportedRsnVersion      = 0x002c,
    unifi_IEEE80211ResultRejectedInvalidRsnCapability       = 0x002d,
    unifi_IEEE80211ResultRejectedSecurityPolicy             = 0x002e,
    unifi_IEEE80211ResultRejectedForDelayPeriod             = 0x002f,
    unifi_IEEE80211ResultNotAllowed                         = 0x0030,
    unifi_IEEE80211ResultNotPresent                         = 0x0031,
    unifi_IEEE80211ResultNotQsta                            = 0x0032,
    unifi_IEEE80211ResultRejectedListenIntervalTooLarge     = 0x0033,
    unifi_IEEE80211ResultInvalidFtActionFrameCount          = 0x0034,
    unifi_IEEE80211ResultInvalidPmkid                       = 0x0035,
    unifi_IEEE80211ResultInvalidMdie                        = 0x0036,
    unifi_IEEE80211ResultInvalidFtie                        = 0x0037,
    unifi_IEEE80211ResultUnspecifiedQosFailure              = 0x00c8,
    unifi_IEEE80211ResultWrongPolicy                        = 0x00c9,
    unifi_IEEE80211ResultInsufficientBandwidth              = 0x00ca,
    unifi_IEEE80211ResultInvalidTspecParameters             = 0x00cb,
    unifi_IEEE80211ResultTimeout                            = 0x8000,
    unifi_IEEE80211ResultTooManySimultaneousRequests        = 0x8001,
    unifi_IEEE80211ResultBssAlreadyStartedOrJoined          = 0x8002,
    unifi_IEEE80211ResultNotSupported                       = 0x8003,
    unifi_IEEE80211ResultTransmissionFailure                = 0x8004,
    unifi_IEEE80211ResultRefusedNotAuthenticated            = 0x8005,
    unifi_IEEE80211ResultResetRequiredBeforeStart           = 0x8006,
    unifi_IEEE80211ResultLmInfoUnavailable                  = 0x8007,
    unifi_IEEE80211ResultInvalidUnicastCipher               = 0xf02f,
    unifi_IEEE80211ResultInvalidMulticastCipher             = 0xf030,
    unifi_IEEE80211ResultUnsupportedWapiIeVersion           = 0xf031,
    unifi_IEEE80211ResultInvalidWapiCapabilityIe            = 0xf032
} unifi_IEEE80211Result;

typedef enum unifi_IndicationsMask
{
    unifi_IndNone                                           = 0x00000000,
    unifi_IndWifiOff                                        = 0x00000001,
    unifi_IndScanResult                                     = 0x00000002,
    unifi_IndConnectionQuality                              = 0x00000004,
    unifi_IndMediaStatus                                    = 0x00000008,
    unifi_IndMicFailure                                     = 0x00000010,
    unifi_IndPmkidCandidateList                             = 0x00000020,
    unifi_IndTspec                                          = 0x00000040,
    unifi_IndRoamStart                                      = 0x00000080,
    unifi_IndRoamComplete                                   = 0x00000100,
    unifi_IndAssociationStart                               = 0x00000200,
    unifi_IndAssociationComplete                            = 0x00000400,
    unifi_IndIbssStation                                    = 0x00000800,
    unifi_IndAll                                            = 0x7FFFFFFF
} unifi_IndicationsMask;

typedef enum unifi_KeyType
{
    unifi_GroupKey                                          = 0x00,
    unifi_PairwiseKey                                       = 0x01
} unifi_KeyType;

typedef enum unifi_ListAction
{
    unifi_ListActionGet                                     = 0x00,
    unifi_ListActionAdd                                     = 0x01,
    unifi_ListActionRemove                                  = 0x02,
    unifi_ListActionFlush                                   = 0x03
} unifi_ListAction;

typedef enum unifi_MediaStatus
{
    unifi_MediaConnected                                    = 0x00,
    unifi_MediaDisconnected                                 = 0x01
} unifi_MediaStatus;

typedef enum unifi_MediaTypeMask
{
    unifi_MediaTypeNone                                     = 0x00000000,
    unifi_MediaType80211                                    = 0x00000001,
    unifi_MediaTypeAmp                                      = 0x00000002
} unifi_MediaTypeMask;

typedef enum unifi_NmeIndicationsMask
{
    unifi_IndProfileDisconnect                              = 0x10000000,
    unifi_IndProfileUpdate                                  = 0x20000000,
    unifi_IndCertificateValidate                            = 0x40000000
} unifi_NmeIndicationsMask;

typedef enum unifi_PacketFilterMode
{
    unifi_PacketFilterModeOptOut                            = 0x00,
    unifi_PacketFilterModeOptIn                             = 0x03
} unifi_PacketFilterMode;

typedef enum unifi_PowerSaveLevel
{
    unifi_PowerSaveLow                                      = 0x00,
    unifi_PowerSaveHigh                                     = 0x01,
    unifi_PowerSaveMed                                      = 0x02,
    unifi_PowerSaveAuto                                     = 0x03
} unifi_PowerSaveLevel;

typedef enum unifi_RadioIF
{
    unifi_GHZ_2_4                                           = 0x01,
    unifi_GHZ_5_0                                           = 0x02,
    unifi_GHZ_Both                                          = 0x03
} unifi_RadioIF;

typedef enum unifi_RegulatoryDomain
{
    unifi_RegulatoryDomainOther                             = 0x00,
    unifi_RegulatoryDomainFcc                               = 0x10,
    unifi_RegulatoryDomainIc                                = 0x20,
    unifi_RegulatoryDomainEtsi                              = 0x30,
    unifi_RegulatoryDomainSpain                             = 0x31,
    unifi_RegulatoryDomainFrance                            = 0x32,
    unifi_RegulatoryDomainJapan                             = 0x40,
    unifi_RegulatoryDomainJapanBis                          = 0x41,
    unifi_RegulatoryDomainChina                             = 0x50,
    unifi_RegulatoryDomainChinaBis                          = 0x51,
    unifi_RegulatoryDomainNone                              = 0xFF
} unifi_RegulatoryDomain;

typedef enum unifi_RoamReason
{
    unifi_RoamBeaconLost                                    = 0x00,
    unifi_RoamDisassociated                                 = 0x01,
    unifi_RoamDeauthenticated                               = 0x02,
    unifi_RoamBetterAPFound                                 = 0x03
} unifi_RoamReason;

typedef enum unifi_ScanType
{
    unifi_ScanAll                                           = 0x00,
    unifi_ScanActive                                        = 0x01,
    unifi_ScanPassive                                       = 0x02
} unifi_ScanType;

typedef enum unifi_SecError
{
    unifi_SecErrorUnknown                                   = 0x00
} unifi_SecError;

typedef enum unifi_Status
{
    unifi_Success                                           = 0x00,
    unifi_Error                                             = 0x01,
    unifi_NotFound                                          = 0x02,
    unifi_TimedOut                                          = 0x03,
    unifi_Cancelled                                         = 0x04,
    unifi_InvalidParameter                                  = 0x05,
    unifi_NoRoom                                            = 0x06,
    unifi_Unsupported                                       = 0x07,
    unifi_Unavailable                                       = 0x08,
    unifi_WifiOff                                           = 0x09,
    unifi_Restricted                                        = 0x10,
    unifi_SecurityError                                     = 0x11
} unifi_Status;

typedef enum unifi_TrafficType
{
    unifi_TrafficOccasional                                 = 0x00,
    unifi_TrafficBursty                                     = 0x01,
    unifi_TrafficPeriodic                                   = 0x02,
    unifi_TrafficContinuous                                 = 0x03
} unifi_TrafficType;

typedef enum unifi_TspecCtrlMask
{
    unifi_TspecCtrlMask_Strict                              = 0x01,
    unifi_TspecCtrlMask_CCX_Signalling                      = 0x02,
    unifi_TspecCtrlMask_CCX_Voice                           = 0x04
} unifi_TspecCtrlMask;

typedef enum unifi_TspecResultCode
{
    unifi_TspecResultSuccess                                = 0x00,
    unifi_TspecResultUnspecifiedFailure                     = 0x01,
    unifi_TspecResultFailure                                = 0x02,
    unifi_TspecResultRefusedReasonUnspecified               = 0x03,
    unifi_TspecResultRefused                                = 0x04,
    unifi_TspecResultInvalidTspecParameters                 = 0x05,
    unifi_TspecResultInvalidTclasParameters                 = 0x06,
    unifi_TspecResultInsufficientBandwidth                  = 0x07,
    unifi_TspecResultWrongPolicy                            = 0x08,
    unifi_TspecResultRejectedWithSuggestedChanges           = 0x09,
    unifi_TspecResultRejectedForDelayPeriod                 = 0x0A,
    unifi_TspecResultNotAllowed                             = 0x0B,
    unifi_TspecResultNotPresent                             = 0x0C,
    unifi_TspecResultTimeout                                = 0x0D,
    unifi_TspecResultNotSupported                           = 0x0E,
    unifi_TspecResultAcmMismatch                            = 0x0F,
    unifi_TspecResultIeLengthIncorrect                      = 0x10,
    unifi_TspecResultInvalidTransactionID                   = 0x11,
    unifi_TspecResultInstalled                              = 0x12,
    unifi_TspecResultTidAlreadyInstalled                    = 0x13,
    unifi_TspecResultTspecRemotelyDeleted                   = 0x14
} unifi_TspecResultCode;

typedef enum unifi_WmmMode
{
    unifi_WmmDisabled                                       = 0x00,
    unifi_WmmACEnabled                                      = 0x01,
    unifi_WmmPSEnabled                                      = 0x02,
    unifi_WmmSAEnabled                                      = 0x04,
    unifi_WmmEnabled                                        = 0xFF
} unifi_WmmMode;

typedef enum unifi_WmmQosInfoMask
{
    unifi_WmmAcMaxSpAll                                     = 0x00,
    unifi_WmmAcVo                                           = 0x01,
    unifi_WmmAcVi                                           = 0x02,
    unifi_WmmAcBk                                           = 0x04,
    unifi_WmmAcBe                                           = 0x08,
    unifi_WmmAcMaxSpTwo                                     = 0x20,
    unifi_WmmAcMaxSpFour                                    = 0x40,
    unifi_WmmAcMaxSpSix                                     = 0x60
} unifi_WmmQosInfoMask;



/* ------------------------------------------ */
#define CSR_WIF_NME_SAP_API_VERSION_MINOR                  000
#define CSR_WIFI_NME_SAP_API_VERSION_MAJOR                 1
#define UNIFI_SME_APPHANDLE                                0
#define UNIFI_PALDATA_APPHANDLE                            1
#define UNIFI_SIGNAL_STRENGTH_MAX                          10
#define UNIFI_PMKID_LIST_MAX                               10
#define UNIFI_NETWORK_USEFULNESS_MAX                       10
#define UNIFI_WEP128_KEY_MAX_OCTETS                        13
#define UNIFI_PMKID_KEY_SIZE                               16
#define UNIFI_NME_APPHANDLE                                2
#define UNIFI_SCAN_RESULTS_MAX                             25
#define UNIFI_NETWORK_PROVIDER_NAME_MAX_OCTETS             32
#define UNIFI_SSID_MAX_OCTETS                              32
#define UNIFI_MLME_COMMAND_MAX_OCTETS                      32
#define UNIFI_IPADDRESSV4_BIN_OCTETS                       4
#define UNIFI_WEP64_KEY_MAX_OCTETS                         5
#define UNIFI_SSID_LIST_MAX_OCTETS                         5
#define UNIFI_MAC_ADDRESS_BIN_OCTETS                       6
#define UNIFI_PMKID_CANDIDATES_MAX                         8


/* ------------------------------------------ */


/* ------------------------------------------ */
typedef struct unifi_AdHocConfig
{
    CsrUint16                       atimWindowTu;
    CsrUint16                       beaconPeriodTu;
    CsrUint16                       joinOnlyAttempts;
    CsrUint16                       joinAttemptIntervalMs;
} unifi_AdHocConfig;

typedef struct unifi_CcxConfig
{
    CsrUint8                        keepAliveTimeMs;
    CsrBool                         apRoamingEnabled;
    CsrUint8                        measurementsMask;
    CsrBool                         ccxRadioMgtEnabled;
} unifi_CcxConfig;

typedef struct unifi_ConnectionStats
{
    CsrUint8                        unifiTxDataRate;
    CsrUint8                        unifiRxDataRate;
    CsrUint32                       dot11RetryCount;
    CsrUint32                       dot11MultipleRetryCount;
    CsrUint32                       dot11AckFailureCount;
    CsrUint32                       dot11FrameDuplicateCount;
    CsrUint32                       dot11FcsErrorCount;
    CsrUint32                       dot11RtsSuccessCount;
    CsrUint32                       dot11RtsFailureCount;
    CsrUint32                       dot11FailedCount;
    CsrUint32                       dot11TransmittedFragmentCount;
    CsrUint32                       dot11TransmittedFrameCount;
    CsrUint32                       dot11WEPExcludedCount;
    CsrUint32                       dot11WEPICVErrorCount;
    CsrUint32                       dot11WEPUndecryptableCount;
    CsrUint32                       dot11MulticastReceivedFrameCount;
    CsrUint32                       dot11MulticastTransmittedFrameCount;
    CsrUint32                       dot11ReceivedFragmentCount;
    CsrUint32                       dot11RSNA4WayHandshakeFailures;
    CsrUint32                       dot11RSNATKIPCounterMeasuresInvoked;
    CsrUint32                       dot11RSNAStatsTKIPLocalMICFailures;
    CsrUint32                       dot11RSNAStatsTKIPReplays;
    CsrUint32                       dot11RSNAStatsTKIPICVErrors;
    CsrUint32                       dot11RSNAStatsCCMPReplays;
    CsrUint32                       dot11RSNAStatsCCMPDecryptErrors;
} unifi_ConnectionStats;

typedef struct unifi_DataBlock
{
    CsrUint16                       length;
    CsrUint8                       *data;
} unifi_DataBlock;

typedef struct unifi_EapCredentials
{
    CsrUint16                       authMode;
    CsrUint16                       encryptionMode;
    char*                           authServerUserIdentity;
    char*                           username;
    char*                           password;
    CsrUint32                       sessionLength;
    CsrUint8                       *session;
} unifi_EapCredentials;

typedef struct unifi_Empty
{
    CsrUint8                        empty;
} unifi_Empty;

typedef struct unifi_FastCredentials
{
    unifi_EapCredentials            eapCredentials;
    CsrBool                         allowPacProvisioning;
    CsrUint32                       pacLength;
    CsrUint8                       *pac;
} unifi_FastCredentials;

typedef struct unifi_IPV4Address
{
    CsrUint8                        a[4];
} unifi_IPV4Address;

typedef struct unifi_LeapCredentials
{
    CsrUint16                       encryptionMode;
    char*                           username;
    char*                           password;
} unifi_LeapCredentials;

typedef struct unifi_LinkQuality
{
    CsrInt16                        unifiRssi;
    CsrInt16                        unifiSnr;
} unifi_LinkQuality;

typedef struct unifi_MibConfig
{
    CsrBool                         unifiFixMaxTxDataRate;
    CsrUint8                        unifiFixTxDataRate;
    CsrUint16                       dot11RtsThreshold;
    CsrUint16                       dot11FragmentationThreshold;
    CsrUint16                       dot11CurrentTxPowerLevel;
} unifi_MibConfig;

typedef struct unifi_Passphrase
{
    CsrUint16                       encryptionMode;
    char*                           passphrase;
} unifi_Passphrase;

typedef struct unifi_Pmkid
{
    unifi_MACAddress                bssid;
    CsrUint8                        pmkid[16];
} unifi_Pmkid;

typedef struct unifi_PmkidCandidate
{
    unifi_MACAddress                bssid;
    CsrBool                         preAuthAllowed;
} unifi_PmkidCandidate;

typedef struct unifi_PmkidList
{
    CsrUint8                        numElements;
    unifi_Pmkid                    *pmkids;
} unifi_PmkidList;

typedef struct unifi_Psk
{
    CsrUint16                       encryptionMode;
    CsrUint8                        psk[32];
} unifi_Psk;

typedef struct unifi_RegulatoryDomainInfo
{
    CsrBool                         dot11MultiDomainCapabilityImplemented;
    CsrBool                         dot11MultiDomainCapabilityEnabled;
    unifi_RegulatoryDomain          currentRegulatoryDomain;
    CsrUint8                        currentCountryCode[2];
} unifi_RegulatoryDomainInfo;

typedef struct unifi_RoamingBandData
{
    CsrInt16                        rssiHighThreshold;
    CsrInt16                        rssiLowThreshold;
    CsrInt16                        snrHighThreshold;
    CsrInt16                        snrLowThreshold;
    CsrUint32                       monitorInterval;
    CsrUint32                       monitorWindow;
    CsrUint8                        dot11RetryRatio;
    CsrUint8                        dot11MultipleRetryRatio;
    CsrUint8                        dot11AckFailureRatio;
    CsrUint8                        dot11FcsErrorRatio;
    CsrUint8                        dot11RtsFailureRatio;
    CsrUint8                        beaconLossThreshold;
} unifi_RoamingBandData;

typedef struct unifi_SSID
{
    CsrUint8                        ssid[32];
    CsrUint8                        length;
} unifi_SSID;

typedef struct unifi_ScanConfigData
{
    CsrUint16                       intervalSeconds;
    CsrUint16                       validitySeconds;
    CsrUint16                       minActiveChannelTimeTu;
    CsrUint16                       maxActiveChannelTimeTu;
    CsrUint16                       minPassiveChannelTimeTu;
    CsrUint16                       maxPassiveChannelTimeTu;
} unifi_ScanConfigData;

typedef struct unifi_SmeConfig
{
    CsrUint8                        connectionQualityRssiChangeTrigger;
    CsrUint8                        connectionQualitySnrChangeTrigger;
    unifi_80211dTrustLevel          trustLevel;
    CsrUint8                        countryCode[2];
    CsrUint8                        wmmModeMask;
    unifi_RadioIF                   ifIndex;
    unifi_FirmwareDriverInterface   firmwareDriverInterface;
    CsrBool                         allowUnicastUseGroupCipher;
    CsrBool                         enableRestrictedAccess;
    CsrBool                         enableStrictDraftN;
    CsrBool                         enableOpportunisticKeyCaching;
} unifi_SmeConfig;

typedef struct unifi_TlsCertificate
{
    CsrUint16                       authMode;
    CsrUint16                       encryptionMode;
    char*                           username;
    CsrUint32                       certificateLength;
    CsrUint8                       *certificate;
    CsrUint16                       privateKeyLength;
    CsrUint8                       *privateKey;
    CsrUint32                       sessionLength;
    CsrUint8                       *session;
} unifi_TlsCertificate;

typedef struct unifi_TsfTime
{
    CsrUint8                        data[8];
} unifi_TsfTime;

typedef struct unifi_UsernameAndPassword
{
    char*                           username;
    char*                           password;
} unifi_UsernameAndPassword;

typedef struct unifi_Versions
{
    CsrUint32                       chipId;
    CsrUint32                       chipVersion;
    CsrUint32                       firmwareBuild;
    CsrUint32                       firmwarePatch;
    CsrUint32                       firmwareHip;
    CsrUint32                       driverBuild;
    CsrUint32                       driverHip;
    CsrUint32                       smeBuild;
    CsrUint32                       smeVariant;
    CsrUint32                       smeHip;
    char*                           smeIdString;
} unifi_Versions;

typedef struct unifi_WapiCredentials
{
    CsrUint32                       certificateLength;
    CsrUint8                       *certificate;
    CsrUint16                       privateKeyLength;
    CsrUint8                       *privateKey;
    CsrUint32                       caCertificateLength;
    CsrUint8                       *caCertificate;
} unifi_WapiCredentials;

typedef struct unifi_Wep128Keys
{
    unifi_AuthMode                  wepAuthType;
    CsrUint8                        selectedWepKey;
    CsrUint8                        key1[13];
    CsrUint8                        key2[13];
    CsrUint8                        key3[13];
    CsrUint8                        key4[13];
} unifi_Wep128Keys;

typedef struct unifi_Wep64Keys
{
    unifi_AuthMode                  wepAuthType;
    CsrUint8                        selectedWepKey;
    CsrUint8                        key1[5];
    CsrUint8                        key2[5];
    CsrUint8                        key3[5];
    CsrUint8                        key4[5];
} unifi_Wep64Keys;

typedef struct unifi_WpsPin
{
    char*                           pin;
} unifi_WpsPin;

typedef struct unifi_AddressList
{
    CsrUint8                        addressesCount;
    unifi_MACAddress               *addresses;
} unifi_AddressList;

typedef struct unifi_CloakedSsidConfig
{
    CsrUint8                        cloakedSsidsCount;
    unifi_SSID                     *cloakedSsids;
} unifi_CloakedSsidConfig;

typedef struct unifi_CoexConfig
{
    CsrBool                         coexEnable;
    CsrBool                         coexAfhChannelEnable;
    CsrBool                         coexAdvancedEnable;
    CsrBool                         coexEnableSchemeManagement;
    unifi_CoexDirection             coexDirection;
    CsrBool                         coexPeriodicWakeHost;
    CsrUint16                       coexTrafficBurstyLatencyMs;
    CsrUint16                       coexTrafficContinuousLatencyMs;
    CsrUint16                       coexObexBlackoutDurationMs;
    CsrUint16                       coexObexBlackoutPeriodMs;
    CsrUint16                       coexA2dpBlackoutDurationMs;
    CsrUint16                       coexA2dpBlackoutPeriodMs;
} unifi_CoexConfig;

typedef struct unifi_CoexInfo
{
    CsrBool                         hasTrafficData;
    unifi_TrafficType               currentTrafficType;
    CsrUint16                       currentPeriodMs;
    unifi_PowerSaveLevel            currentPowerSave;
    CsrUint16                       currentCoexPeriodMs;
    CsrUint16                       currentCoexLatencyMs;
    CsrBool                         hasBtDevice;
    CsrUint32                       currentBlackoutDurationUs;
    CsrUint32                       currentBlackoutPeriodUs;
    unifi_CoexScheme                currentCoexScheme;
} unifi_CoexInfo;

typedef struct unifi_ConnectAttempt
{
    unifi_MACAddress                bssid;
    unifi_Status                    status;
    unifi_SecError                  securityError;
} unifi_ConnectAttempt;

typedef struct unifi_ConnectionConfig
{
    unifi_SSID                      ssid;
    unifi_MACAddress                bssid;
    unifi_BSSType                   bssType;
    unifi_RadioIF                   ifIndex;
    unifi_80211PrivacyMode          privacyMode;
    CsrUint16                       authModeMask;
    CsrUint16                       encryptionModeMask;
    CsrUint16                       mlmeAssociateReqInformationElementsLength;
    CsrUint8                       *mlmeAssociateReqInformationElements;
    CsrUint8                        wmmQosInfo;
    CsrBool                         adhocJoinOnly;
    CsrUint8                        adhocChannel;
} unifi_ConnectionConfig;

typedef struct unifi_ConnectionInfo
{
    unifi_SSID                      ssid;
    unifi_MACAddress                bssid;
    unifi_80211NetworkType          networkType80211;
    CsrUint8                        channelNumber;
    CsrUint16                       channelFrequency;
    unifi_AuthMode                  authMode;
    unifi_EncryptionMode            pairwiseCipher;
    unifi_EncryptionMode            groupCipher;
    unifi_RadioIF                   ifIndex;
    CsrUint16                       atimWindowTu;
    CsrUint16                       beaconPeriodTu;
    CsrBool                         reassociation;
    CsrUint16                       beaconFrameLength;
    CsrUint8                       *beaconFrame;
    CsrUint16                       associationReqFrameLength;
    CsrUint8                       *associationReqFrame;
    CsrUint16                       associationRspFrameLength;
    CsrUint8                       *associationRspFrame;
    CsrUint16                       assocScanInfoElementsLength;
    CsrUint8                       *assocScanInfoElements;
    CsrUint16                       assocReqCapabilities;
    CsrUint16                       assocReqListenIntervalBeacons;
    unifi_MACAddress                assocReqApAddress;
    CsrUint16                       assocReqInfoElementsLength;
    CsrUint8                       *assocReqInfoElements;
    unifi_IEEE80211Result           assocRspResult;
    CsrUint16                       assocRspCapabilityInfo;
    CsrUint16                       assocRspAssociationId;
    CsrUint16                       assocRspInfoElementsLength;
    CsrUint8                       *assocRspInfoElements;
} unifi_ConnectionInfo;

typedef struct unifi_Credentials
{
    unifi_CredentialType            credentialType;
    union {
        unifi_Psk                       wpaPsk;
        unifi_Empty                     openSystem;
        unifi_Passphrase                wapiPassphrase;
        unifi_LeapCredentials           leap;
        unifi_Passphrase                wpaPassphrase;
        unifi_EapCredentials            peapGtc;
        unifi_TlsCertificate            tls;
        unifi_Psk                       wapiPsk;
        unifi_Wep128Keys                wep128Key;
        unifi_Wep64Keys                 wep64Key;
        unifi_FastCredentials           fast;
        unifi_Passphrase                wpa2Passphrase;
        unifi_EapCredentials            ttls;
        unifi_Psk                       wpa2Psk;
        unifi_WapiCredentials           wapi;
        unifi_EapCredentials            peapMsChapV2;
    } credential;

} unifi_Credentials;

typedef struct unifi_HostConfig
{
    unifi_HostPowerMode             powerMode;
    CsrUint16                       applicationDataPeriodMs;
} unifi_HostConfig;

typedef struct unifi_Key
{
    unifi_KeyType                   keyType;
    CsrUint8                        keyIndex;
    CsrBool                         wepTxKey;
    CsrUint16                       keyRsc[8];
    CsrBool                         authenticator;
    unifi_MACAddress                address;
    CsrUint8                        keyLength;
    CsrUint8                        key[32];
} unifi_Key;

typedef struct unifi_PowerConfig
{
    unifi_PowerSaveLevel            powerSaveLevel;
    CsrUint16                       listenIntervalBeacons;
    CsrBool                         rxDtims;
    unifi_D3AutoScanMode            d3AutoScanMode;
} unifi_PowerConfig;

typedef struct unifi_ProfileIdentity
{
    unifi_MACAddress                bssid;
    unifi_SSID                      ssid;
} unifi_ProfileIdentity;

typedef struct unifi_RoamingConfig
{
    unifi_RoamingBandData           roamingBands[3];
    CsrUint8                        lowQualHystWindow;
    CsrUint8                        apBlockTimeMs;
    CsrUint8                        roamMonitorPeriodMs;
    CsrUint8                        roamNumMaxTh;
    CsrBool                         disableRoamScans;
    CsrUint8                        reconnectLimit;
    unifi_ScanConfigData            roamScanCfg[3];
} unifi_RoamingConfig;

typedef struct unifi_ScanConfig
{
    unifi_ScanConfigData            scanCfg[4];
    CsrBool                         disableAutonomousScans;
    CsrUint16                       maxResults;
    CsrInt8                         highRSSIThreshold;
    CsrInt8                         lowRSSIThreshold;
    CsrInt8                         deltaRSSIThreshold;
    CsrInt8                         highSNRThreshold;
    CsrInt8                         lowSNRThreshold;
    CsrInt8                         deltaSNRThreshold;
    CsrUint16                       passiveChannelListCount;
    CsrUint8                       *passiveChannelList;
} unifi_ScanConfig;

typedef struct unifi_ScanResult
{
    unifi_SSID                      ssid;
    unifi_MACAddress                bssid;
    CsrInt16                        rssi;
    CsrInt16                        snr;
    unifi_RadioIF                   ifIndex;
    CsrUint16                       beaconPeriodTu;
    unifi_TsfTime                   timeStamp;
    unifi_TsfTime                   localTime;
    CsrUint16                       channelFrequency;
    CsrUint16                       capabilityInformation;
    CsrUint8                        channelNumber;
    unifi_BasicUsability            usability;
    unifi_BSSType                   bssType;
    CsrUint16                       informationElementsLength;
    CsrUint8                       *informationElements;
} unifi_ScanResult;

typedef struct unifi_AppValue
{
    unifi_AppValueId                id;
    union {
        unifi_CloakedSsidConfig         cloakedSsids;
        unifi_ScanConfig                scanConfig;
        unifi_RegulatoryDomainInfo      regDomInfo;
        unifi_SmeConfig                 smeConfig;
        unifi_Versions                  versions;
        unifi_CoexConfig                coexConfig;
        unifi_LinkQuality               linkQuality;
        unifi_MACAddress                stationMacAddress;
        unifi_MibConfig                 mibConfig;
        unifi_MACAddress                permanentMacAddress;
        unifi_ConnectionStats           connectionStats;
        unifi_RoamingConfig             roamingConfig;
        unifi_AdHocConfig               adHocConfig;
        unifi_ConnectionInfo            connectionInfo;
        unifi_CoexInfo                  coexInfo;
        unifi_DataBlock                 calibrationData;
        unifi_ConnectionConfig          connectionConfig;
        unifi_CcxConfig                 ccxConfig;
        unifi_PowerConfig               powerConfig;
        unifi_HostConfig                hostConfig;
    } unifi_Value_union;

} unifi_AppValue;

typedef struct unifi_Profile
{
    unifi_ProfileIdentity           profileIdentity;
    CsrUint8                        wmmQosCapabilitiesMask;
    unifi_BSSType                   bssType;
    CsrUint8                        channelNo;
    CsrUint8                        ccxOptionsMask;
    CsrBool                         cloakedSsid;
    unifi_Credentials               credentials;
} unifi_Profile;



/* ------------------------------------------ */


/* ------------------------------------------ */
extern void unifi_nme_blacklist_req(FsmContext* context,
                                    void* appHandle,
                                    unifi_ListAction action,
                                    CsrUint8 setAddressCount,
                                    const unifi_MACAddress *setAddresses);

extern void unifi_nme_certificate_validate_rsp(FsmContext* context,
                                               void* appHandle,
                                               CsrUint8 validationId,
                                               unifi_Status status,
                                               unifi_CertificateStatus result);

extern void unifi_nme_connect_req(FsmContext* context,
                                  void* appHandle,
                                  const unifi_ConnectionConfig *connectionConfig);

extern void unifi_nme_connection_status_get_req(FsmContext* context,
                                                void* appHandle);

extern void unifi_nme_disconnect_req(FsmContext* context,
                                     void* appHandle);

extern void unifi_nme_event_mask_set_req(FsmContext* context,
                                         void* appHandle,
                                         CsrUint32 indMask);

extern void unifi_nme_get_value_req(FsmContext* context,
                                    void* appHandle,
                                    unifi_AppValueId appValueId);

extern void unifi_nme_key_req(FsmContext* context,
                              void* appHandle,
                              unifi_ListAction action,
                              const unifi_Key *key);

extern void unifi_nme_mib_get_req(FsmContext* context,
                                  void* appHandle,
                                  CsrUint16 mibAttributeLength,
                                  const CsrUint8 *mibAttribute);

extern void unifi_nme_mib_get_next_req(FsmContext* context,
                                       void* appHandle,
                                       CsrUint16 mibAttributeLength,
                                       const CsrUint8 *mibAttribute);

extern void unifi_nme_mib_set_req(FsmContext* context,
                                  void* appHandle,
                                  CsrUint16 mibAttributeLength,
                                  const CsrUint8 *mibAttribute);

extern void unifi_nme_multicast_address_req(FsmContext* context,
                                            void* appHandle,
                                            unifi_ListAction action,
                                            CsrUint8 setAddressesCount,
                                            const unifi_MACAddress *setAddresses);

extern void unifi_nme_packet_filter_set_req(FsmContext* context,
                                            void* appHandle,
                                            CsrUint16 filterLength,
                                            const CsrUint8 *filter,
                                            unifi_PacketFilterMode mode,
                                            const unifi_IPV4Address *arpFilterAddress);

extern void unifi_nme_pmkid_req(FsmContext* context,
                                void* appHandle,
                                unifi_ListAction action,
                                CsrUint8 setPmkidsCount,
                                const unifi_Pmkid *setPmkids);

extern void unifi_nme_profile_connect_req(FsmContext* context,
                                          void* appHandle,
                                          const unifi_ProfileIdentity *profileIdentity);

extern void unifi_nme_profile_delete_req(FsmContext* context,
                                         void* appHandle,
                                         const unifi_ProfileIdentity *profileIdentity);

extern void unifi_nme_profile_delete_all_req(FsmContext* context,
                                             void* appHandle);

extern void unifi_nme_profile_order_set_req(FsmContext* context,
                                            void* appHandle,
                                            CsrUint8 profileIdentitysCount,
                                            const unifi_ProfileIdentity *profileIdentitys);

extern void unifi_nme_profile_set_req(FsmContext* context,
                                      void* appHandle,
                                      const unifi_Profile *profile);

extern void unifi_nme_restricted_access_disable_req(FsmContext* context,
                                                    void* appHandle);

extern void unifi_nme_restricted_access_enable_req(FsmContext* context,
                                                   void* appHandle);

extern void unifi_nme_scan_full_req(FsmContext* context,
                                    void* appHandle,
                                    CsrUint8 ssidCount,
                                    const unifi_SSID *ssid,
                                    const unifi_MACAddress *bssid,
                                    CsrBool forceScan,
                                    unifi_BSSType bssType,
                                    unifi_ScanType scanType,
                                    CsrUint16 channelListCount,
                                    const CsrUint8 *channelList,
                                    CsrUint16 probeIeLength,
                                    const CsrUint8 *probeIe);

extern void unifi_nme_scan_results_flush_req(FsmContext* context,
                                             void* appHandle);

extern void unifi_nme_scan_results_get_req(FsmContext* context,
                                           void* appHandle);

extern void unifi_nme_set_value_req(FsmContext* context,
                                    void* appHandle,
                                    const unifi_AppValue *appValue);

extern void unifi_nme_tspec_req(FsmContext* context,
                                void* appHandle,
                                unifi_ListAction action,
                                CsrUint32 transactionId,
                                CsrBool strict,
                                CsrUint8 ctrlMask,
                                CsrUint16 tspecLength,
                                const CsrUint8 *tspec,
                                CsrUint16 tclasLength,
                                const CsrUint8 *tclas);

extern void unifi_nme_wifi_flightmode_req(FsmContext* context,
                                          void* appHandle,
                                          const unifi_MACAddress *address,
                                          CsrUint16 mibFilesCount,
                                          const unifi_DataBlock *mibFiles);

extern void unifi_nme_wifi_off_req(FsmContext* context,
                                   void* appHandle);

extern void unifi_nme_wifi_on_req(FsmContext* context,
                                  void* appHandle,
                                  const unifi_MACAddress *address,
                                  CsrUint16 mibFilesCount,
                                  const unifi_DataBlock *mibFiles);

extern void unifi_nme_wps_req(FsmContext* context,
                              void* appHandle,
                              const CsrUint8 *pin);

extern void unifi_nme_wps_cancel_req(FsmContext* context,
                                     void* appHandle);



/* ------------------------------------------ */
extern void unifi_nme_association_complete_ind(void* context,
                                               CsrUint16 appHandlesCount,
                                               void* *appHandles,
                                               unifi_Status status,
                                               const unifi_ConnectionInfo *connectionInfo,
                                               unifi_IEEE80211Reason deauthReason);

extern void unifi_nme_association_start_ind(void* context,
                                            CsrUint16 appHandlesCount,
                                            void* *appHandles,
                                            const unifi_MACAddress *address,
                                            const unifi_SSID *ssid);

extern void unifi_nme_blacklist_cfm(void* context,
                                    void* appHandle,
                                    unifi_Status status,
                                    unifi_ListAction action,
                                    CsrUint8 getAddressCount,
                                    const unifi_MACAddress *getAddresses);

extern void unifi_nme_certificate_validate_ind(void* context,
                                               CsrUint16 appHandlesCount,
                                               void* *appHandles,
                                               CsrUint8 validationId,
                                               CsrUint32 certificateLength,
                                               const CsrUint8 *certificate);

extern void unifi_nme_connect_cfm(void* context,
                                  void* appHandle,
                                  unifi_Status status);

extern void unifi_nme_connection_quality_ind(void* context,
                                             CsrUint16 appHandlesCount,
                                             void* *appHandles,
                                             const unifi_LinkQuality *linkQuality);

extern void unifi_nme_connection_status_get_cfm(void* context,
                                                void* appHandle,
                                                unifi_Status status,
                                                unifi_ConnectionStatus connectionStatus);

extern void unifi_nme_disconnect_cfm(void* context,
                                     void* appHandle,
                                     unifi_Status status);

extern void unifi_nme_event_mask_set_cfm(void* context,
                                         void* appHandle,
                                         unifi_Status status);

extern void unifi_nme_get_value_cfm(void* context,
                                    void* appHandle,
                                    unifi_Status status,
                                    const unifi_AppValue *appValue);

extern void unifi_nme_ibss_station_ind(void* context,
                                       CsrUint16 appHandlesCount,
                                       void* *appHandles,
                                       const unifi_MACAddress *address,
                                       CsrBool isconnected);

extern void unifi_nme_key_cfm(void* context,
                              void* appHandle,
                              unifi_Status status,
                              unifi_ListAction action);

extern void unifi_nme_media_status_ind(void* context,
                                       CsrUint16 appHandlesCount,
                                       void* *appHandles,
                                       unifi_MediaStatus mediaStatus,
                                       const unifi_ConnectionInfo *connectionInfo,
                                       unifi_IEEE80211Reason disassocReason,
                                       unifi_IEEE80211Reason deauthReason);

extern void unifi_nme_mib_get_cfm(void* context,
                                  void* appHandle,
                                  unifi_Status status,
                                  CsrUint16 mibAttributeLength,
                                  const CsrUint8 *mibAttribute);

extern void unifi_nme_mib_get_next_cfm(void* context,
                                       void* appHandle,
                                       unifi_Status status,
                                       CsrUint16 mibAttributeLength,
                                       const CsrUint8 *mibAttribute);

extern void unifi_nme_mib_set_cfm(void* context,
                                  void* appHandle,
                                  unifi_Status status);

extern void unifi_nme_mic_failure_ind(void* context,
                                      CsrUint16 appHandlesCount,
                                      void* *appHandles,
                                      CsrBool secondFailure,
                                      CsrUint16 count,
                                      const unifi_MACAddress *address,
                                      unifi_KeyType keyType,
                                      CsrUint16 keyId,
                                      const CsrUint16 *tsc);

extern void unifi_nme_multicast_address_cfm(void* context,
                                            void* appHandle,
                                            unifi_Status status,
                                            unifi_ListAction action,
                                            CsrUint8 getAddressesCount,
                                            const unifi_MACAddress *getAddresses);

extern void unifi_nme_packet_filter_set_cfm(void* context,
                                            void* appHandle,
                                            unifi_Status status);

extern void unifi_nme_pmkid_cfm(void* context,
                                void* appHandle,
                                unifi_Status status,
                                unifi_ListAction action,
                                CsrUint8 getPmkidsCount,
                                const unifi_Pmkid *getPmkids);

extern void unifi_nme_pmkid_candidate_list_ind(void* context,
                                               CsrUint16 appHandlesCount,
                                               void* *appHandles,
                                               CsrUint8 pmkidCandidatesCount,
                                               const unifi_PmkidCandidate *pmkidCandidates);

extern void unifi_nme_profile_connect_cfm(void* context,
                                          void* appHandle,
                                          unifi_Status status,
                                          CsrUint8 connectAttemptsCount,
                                          const unifi_ConnectAttempt *connectAttempts);

extern void unifi_nme_profile_delete_cfm(void* context,
                                         void* appHandle,
                                         unifi_Status status);

extern void unifi_nme_profile_delete_all_cfm(void* context,
                                             void* appHandle,
                                             unifi_Status status);

extern void unifi_nme_profile_disconnect_ind(void* context,
                                             CsrUint16 appHandlesCount,
                                             void* *appHandles,
                                             CsrUint8 connectAttemptsCount,
                                             const unifi_ConnectAttempt *connectAttempts);

extern void unifi_nme_profile_order_set_cfm(void* context,
                                            void* appHandle,
                                            unifi_Status status);

extern void unifi_nme_profile_set_cfm(void* context,
                                      void* appHandle,
                                      unifi_Status status);

extern void unifi_nme_profile_update_ind(void* context,
                                         CsrUint16 appHandlesCount,
                                         void* *appHandles,
                                         const unifi_Profile *profile);

extern void unifi_nme_restricted_access_disable_cfm(void* context,
                                                    void* appHandle,
                                                    unifi_Status status);

extern void unifi_nme_restricted_access_enable_cfm(void* context,
                                                   void* appHandle,
                                                   unifi_Status status);

extern void unifi_nme_roam_complete_ind(void* context,
                                        CsrUint16 appHandlesCount,
                                        void* *appHandles,
                                        unifi_Status status);

extern void unifi_nme_roam_start_ind(void* context,
                                     CsrUint16 appHandlesCount,
                                     void* *appHandles,
                                     unifi_RoamReason roamReason,
                                     unifi_IEEE80211Reason reason80211);

extern void unifi_nme_scan_full_cfm(void* context,
                                    void* appHandle,
                                    unifi_Status status);

extern void unifi_nme_scan_result_ind(void* context,
                                      CsrUint16 appHandlesCount,
                                      void* *appHandles,
                                      const unifi_ScanResult *result);

extern void unifi_nme_scan_results_flush_cfm(void* context,
                                             void* appHandle,
                                             unifi_Status status);

extern void unifi_nme_scan_results_get_cfm(void* context,
                                           void* appHandle,
                                           unifi_Status status,
                                           CsrUint16 scanResultsCount,
                                           const unifi_ScanResult *scanResults);

extern void unifi_nme_set_value_cfm(void* context,
                                    void* appHandle,
                                    unifi_Status status,
                                    unifi_AppValueId appValueId);

extern void unifi_nme_tspec_ind(void* context,
                                CsrUint16 appHandlesCount,
                                void* *appHandles,
                                CsrUint32 transactionId,
                                unifi_TspecResultCode tspecResultCode,
                                CsrUint16 tspecLength,
                                const CsrUint8 *tspec);

extern void unifi_nme_tspec_cfm(void* context,
                                void* appHandle,
                                unifi_Status status,
                                CsrUint32 transactionId,
                                unifi_TspecResultCode tspecResultCode,
                                CsrUint16 tspecLength,
                                const CsrUint8 *tspec);

extern void unifi_nme_wifi_flightmode_cfm(void* context,
                                          void* appHandle,
                                          unifi_Status status);

extern void unifi_nme_wifi_off_ind(void* context,
                                   CsrUint16 appHandlesCount,
                                   void* *appHandles,
                                   unifi_ControlIndication controlIndication);

extern void unifi_nme_wifi_off_cfm(void* context,
                                   void* appHandle,
                                   unifi_Status status);

extern void unifi_nme_wifi_on_cfm(void* context,
                                  void* appHandle,
                                  unifi_Status status);

extern void unifi_nme_wps_cfm(void* context,
                              void* appHandle,
                              unifi_Status status,
                              const unifi_Profile *profile);

extern void unifi_nme_wps_cancel_cfm(void* context,
                                     void* appHandle,
                                     unifi_Status status);




#ifdef __cplusplus
}
#endif

#endif /* __CSR_WIFI_NME_EXTRNAL_SAP_H__ */
