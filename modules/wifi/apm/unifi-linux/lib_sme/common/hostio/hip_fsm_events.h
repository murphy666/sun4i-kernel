/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef HIP_XML_SIGNALS_H
#define HIP_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#include "abstractions/osa.h"
#include "fsm/csr_wifi_fsm.h"
#include "hostio/hip_fsm_types.h"
#include "event_pack_unpack/event_pack_unpack.h"
#include "sys_sap/sme_interface_hip_signal_to_sys_sap.h"
#include "sys_sap/sme_interface_hip_auto_cfm.h"

#define MA_UNITDATA_REQ_ID                                           0x0100
#define MA_UNITDATA_CFM_ID                                           0x0101
#define MA_UNITDATA_IND_ID                                           0x0103
#define MA_SNIFFDATA_IND_ID                                          0x010b
#define MA_UNITDATA_CANCEL_REQ_ID                                    0x010c
#define MA_PACKET_REQ_ID                                             0x0110
#define MA_PACKET_CFM_ID                                             0x0111
#define MA_PACKET_IND_ID                                             0x0113
#define MLME_RESET_REQ_ID                                            0x0200
#define MLME_RESET_CFM_ID                                            0x0201
#define MLME_GET_REQ_ID                                              0x0204
#define MLME_GET_CFM_ID                                              0x0205
#define MLME_SET_REQ_ID                                              0x0208
#define MLME_SET_CFM_ID                                              0x0209
#define MLME_GET_NEXT_REQ_ID                                         0x020c
#define MLME_GET_NEXT_CFM_ID                                         0x020d
#define MLME_POWERMGT_REQ_ID                                         0x0210
#define MLME_POWERMGT_CFM_ID                                         0x0211
#define MLME_SCAN_REQ_ID                                             0x0214
#define MLME_SCAN_CFM_ID                                             0x0215
#define MLME_SCAN_IND_ID                                             0x0217
#define MLME_JOIN_REQ_ID                                             0x0218
#define MLME_JOIN_CFM_ID                                             0x0219
#define MLME_AUTHENTICATE_REQ_ID                                     0x021c
#define MLME_AUTHENTICATE_CFM_ID                                     0x021d
#define MLME_AUTHENTICATE_RSP_ID                                     0x021e
#define MLME_AUTHENTICATE_IND_ID                                     0x021f
#define MLME_DEAUTHENTICATE_REQ_ID                                   0x0220
#define MLME_DEAUTHENTICATE_CFM_ID                                   0x0221
#define MLME_DEAUTHENTICATE_IND_ID                                   0x0223
#define MLME_ASSOCIATE_REQ_ID                                        0x0224
#define MLME_ASSOCIATE_CFM_ID                                        0x0225
#define MLME_ASSOCIATE_RSP_ID                                        0x0226
#define MLME_ASSOCIATE_IND_ID                                        0x0227
#define MLME_REASSOCIATE_REQ_ID                                      0x0228
#define MLME_REASSOCIATE_CFM_ID                                      0x0229
#define MLME_REASSOCIATE_RSP_ID                                      0x022a
#define MLME_REASSOCIATE_IND_ID                                      0x022b
#define MLME_DISASSOCIATE_REQ_ID                                     0x022c
#define MLME_DISASSOCIATE_CFM_ID                                     0x022d
#define MLME_DISASSOCIATE_IND_ID                                     0x022f
#define MLME_START_REQ_ID                                            0x0230
#define MLME_START_CFM_ID                                            0x0231
#define MLME_ADDTS_REQ_ID                                            0x0234
#define MLME_ADDTS_CFM_ID                                            0x0235
#define MLME_ADDTS_RSP_ID                                            0x0236
#define MLME_ADDTS_IND_ID                                            0x0237
#define MLME_DELTS_REQ_ID                                            0x0238
#define MLME_DELTS_CFM_ID                                            0x0239
#define MLME_DELTS_IND_ID                                            0x023b
#define MLME_DLS_REQ_ID                                              0x023c
#define MLME_DLS_CFM_ID                                              0x023d
#define MLME_DLS_IND_ID                                              0x023f
#define MLME_DLSTEARDOWN_REQ_ID                                      0x0240
#define MLME_DLSTEARDOWN_CFM_ID                                      0x0241
#define MLME_DLSTEARDOWN_IND_ID                                      0x0243
#define MLME_HL_SYNC_REQ_ID                                          0x0244
#define MLME_HL_SYNC_CFM_ID                                          0x0245
#define MLME_HL_SYNC_IND_ID                                          0x0247
#define MLME_ADDBA_REQ_ID                                            0x0248
#define MLME_ADDBA_CFM_ID                                            0x0249
#define MLME_ADDBA_RSP_ID                                            0x024a
#define MLME_ADDBA_IND_ID                                            0x024b
#define MLME_DELBA_REQ_ID                                            0x024c
#define MLME_DELBA_CFM_ID                                            0x024d
#define MLME_DELBA_IND_ID                                            0x024f
#define MLME_SCHEDULE_REQ_ID                                         0x0250
#define MLME_SCHEDULE_CFM_ID                                         0x0251
#define MLME_SCHEDULE_IND_ID                                         0x0253
#define MLME_MREQUEST_REQ_ID                                         0x0254
#define MLME_MREQUEST_CFM_ID                                         0x0255
#define MLME_MREQUEST_IND_ID                                         0x0257
#define MLME_MEASURE_REQ_ID                                          0x0258
#define MLME_MEASURE_CFM_ID                                          0x0259
#define MLME_MREPORT_REQ_ID                                          0x025c
#define MLME_MREPORT_CFM_ID                                          0x025d
#define MLME_MREPORT_IND_ID                                          0x025f
#define MLME_CHANNELSWITCH_REQ_ID                                    0x0260
#define MLME_CHANNELSWITCH_CFM_ID                                    0x0261
#define MLME_CHANNELSWITCH_RSP_ID                                    0x0262
#define MLME_CHANNELSWITCH_IND_ID                                    0x0263
#define MLME_TPCADAPT_REQ_ID                                         0x0264
#define MLME_TPCADAPT_CFM_ID                                         0x0265
#define MLME_SETKEYS_REQ_ID                                          0x0268
#define MLME_SETKEYS_CFM_ID                                          0x0269
#define MLME_DELETEKEYS_REQ_ID                                       0x026c
#define MLME_DELETEKEYS_CFM_ID                                       0x026d
#define MLME_MICHAELMICFAILURE_IND_ID                                0x0273
#define MLME_EAPOL_REQ_ID                                            0x0274
#define MLME_EAPOL_CFM_ID                                            0x0275
#define MLME_STAKEYESTABLISHED_IND_ID                                0x027b
#define MLME_SETPROTECTION_REQ_ID                                    0x027c
#define MLME_SETPROTECTION_CFM_ID                                    0x027d
#define MLME_PROTECTEDFRAMEDROPPED_IND_ID                            0x0283
#define MLME_SNIFFJOIN_REQ_ID                                        0x0284
#define MLME_SNIFFJOIN_CFM_ID                                        0x0285
#define MLME_CONNECTED_IND_ID                                        0x028b
#define MLME_SCAN_CANCEL_REQ_ID                                      0x028c
#define MLME_LINKMEASURE_REQ_ID                                      0x0294
#define MLME_LINKMEASURE_CFM_ID                                      0x0295
#define MLME_HL_SYNC_CANCEL_REQ_ID                                   0x0298
#define MLME_HL_SYNC_CANCEL_CFM_ID                                   0x0299
#define MLME_ADD_PERIODIC_REQ_ID                                     0x02a0
#define MLME_ADD_PERIODIC_CFM_ID                                     0x02a1
#define MLME_DEL_PERIODIC_REQ_ID                                     0x02a4
#define MLME_DEL_PERIODIC_CFM_ID                                     0x02a5
#define MLME_ADD_AUTONOMOUS_SCAN_REQ_ID                              0x02a8
#define MLME_ADD_AUTONOMOUS_SCAN_CFM_ID                              0x02a9
#define MLME_DEL_AUTONOMOUS_SCAN_REQ_ID                              0x02ac
#define MLME_DEL_AUTONOMOUS_SCAN_CFM_ID                              0x02ad
#define MLME_AUTONOMOUS_SCAN_IND_ID                                  0x02b3
#define MLME_AUTONOMOUS_SCAN_RESULTS_REQ_ID                          0x02b4
#define MLME_AUTONOMOUS_SCAN_RESULTS_CFM_ID                          0x02b5
#define MLME_AUTONOMOUS_SCAN_RESULTS_IND_ID                          0x02b7
#define MLME_SET_UNITDATA_FILTER_REQ_ID                              0x02b8
#define MLME_SET_UNITDATA_FILTER_CFM_ID                              0x02b9
#define MLME_FT_JOIN_REQ_ID                                          0x02bc
#define MLME_FT_JOIN_CFM_ID                                          0x02bd
#define MLME_RESOURCE_REQUEST_REQ_ID                                 0x02c0
#define MLME_RESOURCE_REQUEST_CFM_ID                                 0x02c1
#define MLME_RESOURCE_REQUEST_RSP_ID                                 0x02c2
#define MLME_RESOURCE_REQUEST_IND_ID                                 0x02c3
#define MLME_RESOURCE_REQUEST_LOCAL_REQ_ID                           0x02c4
#define MLME_RESOURCE_REQUEST_LOCAL_CFM_ID                           0x02c5
#define MLME_REMOTE_REQUEST_REQ_ID                                   0x02c8
#define MLME_REMOTE_REQUEST_CFM_ID                                   0x02c9
#define MLME_REMOTE_REQUEST_IND_ID                                   0x02cb
#define MLME_PAUSE_AUTONOMOUS_SCAN_REQ_ID                            0x02cc
#define MLME_PAUSE_AUTONOMOUS_SCAN_CFM_ID                            0x02cd
#define MLME_NEIGHBORREPREQ_REQ_ID                                   0x02d0
#define MLME_NEIGHBORREPREQ_CFM_ID                                   0x02d1
#define MLME_NEIGHBORREPREQ_IND_ID                                   0x02d3
#define MLME_NEIGHBORREPRESP_REQ_ID                                  0x02d4
#define MLME_NEIGHBORREPRESP_CFM_ID                                  0x02d5
#define MLME_NEIGHBORREPRESP_IND_ID                                  0x02d7
#define MLME_AUTONOMOUS_SCAN_DONE_IND_ID                             0x02db
#define MLME_ADD_TRIGGERED_GET_REQ_ID                                0x02dc
#define MLME_ADD_TRIGGERED_GET_CFM_ID                                0x02dd
#define MLME_DEL_TRIGGERED_GET_REQ_ID                                0x02e0
#define MLME_DEL_TRIGGERED_GET_CFM_ID                                0x02e1
#define MLME_TRIGGERED_GET_IND_ID                                    0x02e7
#define MLME_VSPECIFIC_REQ_ID                                        0x02ec
#define MLME_VSPECIFIC_CFM_ID                                        0x02ed
#define MLME_VSPECIFIC_IND_ID                                        0x02ef
#define MLME_ADD_WDS_REQ_ID                                          0x02f0
#define MLME_ADD_WDS_CFM_ID                                          0x02f1
#define MLME_DEL_WDS_REQ_ID                                          0x02f4
#define MLME_DEL_WDS_CFM_ID                                          0x02f5
#define MLME_ADD_BLACKOUT_REQ_ID                                     0x02f8
#define MLME_ADD_BLACKOUT_CFM_ID                                     0x02f9
#define MLME_DEL_BLACKOUT_REQ_ID                                     0x02fc
#define MLME_DEL_BLACKOUT_CFM_ID                                     0x02fd
#define MLME_SAQUERY_REQ_ID                                          0x0300
#define MLME_SAQUERY_CFM_ID                                          0x0301
#define MLME_SAQUERY_RSP_ID                                          0x0302
#define MLME_SAQUERY_IND_ID                                          0x0303
#define MLME_ADD_RX_TRIGGER_REQ_ID                                   0x0304
#define MLME_ADD_RX_TRIGGER_CFM_ID                                   0x0305
#define MLME_DEL_RX_TRIGGER_REQ_ID                                   0x0308
#define MLME_DEL_RX_TRIGGER_CFM_ID                                   0x0309
#define DS_UNITDATA_REQ_ID                                           0x0400
#define DS_UNITDATA_RSP_ID                                           0x0402
#define DS_UNITDATA_IND_ID                                           0x0403
#define DS_UNITDATA_CANCEL_IND_ID                                    0x0407
#define DS_STA_NOTIFY_REQ_ID                                         0x0408
#define DEBUG_STRING_IND_ID                                          0x0803
#define DEBUG_WORD16_IND_ID                                          0x0807
#define DEBUG_GENERIC_REQ_ID                                         0x0808
#define DEBUG_GENERIC_CFM_ID                                         0x0809
#define DEBUG_GENERIC_IND_ID                                         0x080b


/* Signal Sizes */
#define HIP_SIGNAL_HEADER_SIZE 6
#define DEBUG_GENERIC_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 24)
#define DEBUG_GENERIC_IND_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 24)
#define DEBUG_GENERIC_CFM_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 24)
#define DEBUG_STRING_IND_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 8)
#define DEBUG_WORD16_IND_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 40)
#define DS_STA_NOTIFY_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 16)
#define DS_UNITDATA_REQ_SIZE                                         (HIP_SIGNAL_HEADER_SIZE + 28)
#define DS_UNITDATA_IND_SIZE                                         (HIP_SIGNAL_HEADER_SIZE + 32)
#define DS_UNITDATA_RSP_SIZE                                         (HIP_SIGNAL_HEADER_SIZE + 32)
#define DS_UNITDATA_CANCEL_IND_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 12)
#define MA_PACKET_REQ_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 16)
#define MA_PACKET_IND_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 32)
#define MA_PACKET_CFM_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 18)
#define MA_SNIFFDATA_IND_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 32)
#define MA_UNITDATA_REQ_SIZE                                         (HIP_SIGNAL_HEADER_SIZE + 30)
#define MA_UNITDATA_IND_SIZE                                         (HIP_SIGNAL_HEADER_SIZE + 34)
#define MA_UNITDATA_CFM_SIZE                                         (HIP_SIGNAL_HEADER_SIZE + 32)
#define MA_UNITDATA_CANCEL_REQ_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADDBA_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 28)
#define MLME_ADDBA_IND_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 24)
#define MLME_ADDBA_RSP_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 26)
#define MLME_ADDBA_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 26)
#define MLME_ADDTS_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADDTS_IND_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_ADDTS_RSP_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_ADDTS_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_AUTONOMOUS_SCAN_REQ_SIZE                            (HIP_SIGNAL_HEADER_SIZE + 32)
#define MLME_ADD_AUTONOMOUS_SCAN_CFM_SIZE                            (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_BLACKOUT_REQ_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 32)
#define MLME_ADD_BLACKOUT_CFM_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_PERIODIC_REQ_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_ADD_PERIODIC_CFM_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_RX_TRIGGER_REQ_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_RX_TRIGGER_CFM_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_TRIGGERED_GET_REQ_SIZE                              (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_ADD_TRIGGERED_GET_CFM_SIZE                              (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_ADD_WDS_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_ADD_WDS_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_ASSOCIATE_REQ_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_ASSOCIATE_IND_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_ASSOCIATE_RSP_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 24)
#define MLME_ASSOCIATE_CFM_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_AUTHENTICATE_REQ_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_AUTHENTICATE_IND_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_AUTHENTICATE_RSP_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_AUTHENTICATE_CFM_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_AUTONOMOUS_SCAN_IND_SIZE                                (HIP_SIGNAL_HEADER_SIZE + 52)
#define MLME_AUTONOMOUS_SCAN_DONE_IND_SIZE                           (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_AUTONOMOUS_SCAN_RESULTS_REQ_SIZE                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_AUTONOMOUS_SCAN_RESULTS_IND_SIZE                        (HIP_SIGNAL_HEADER_SIZE + 24)
#define MLME_AUTONOMOUS_SCAN_RESULTS_CFM_SIZE                        (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_CHANNELSWITCH_REQ_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_CHANNELSWITCH_IND_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_CHANNELSWITCH_RSP_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_CHANNELSWITCH_CFM_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_CONNECTED_IND_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DEAUTHENTICATE_REQ_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DEAUTHENTICATE_IND_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DEAUTHENTICATE_CFM_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DELBA_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DELBA_IND_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DELBA_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DELETEKEYS_REQ_SIZE                                     (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_DELETEKEYS_CFM_SIZE                                     (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DELTS_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DELTS_IND_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DELTS_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DEL_AUTONOMOUS_SCAN_REQ_SIZE                            (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DEL_AUTONOMOUS_SCAN_CFM_SIZE                            (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_DEL_BLACKOUT_REQ_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DEL_BLACKOUT_CFM_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_DEL_PERIODIC_REQ_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DEL_PERIODIC_CFM_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_DEL_RX_TRIGGER_REQ_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DEL_RX_TRIGGER_CFM_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_DEL_TRIGGERED_GET_REQ_SIZE                              (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DEL_TRIGGERED_GET_CFM_SIZE                              (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_DEL_WDS_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_DEL_WDS_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DISASSOCIATE_REQ_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DISASSOCIATE_IND_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DISASSOCIATE_CFM_SIZE                                   (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_DLS_REQ_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DLS_IND_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DLS_CFM_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_DLSTEARDOWN_REQ_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_DLSTEARDOWN_IND_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_DLSTEARDOWN_CFM_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_EAPOL_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 26)
#define MLME_EAPOL_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_FT_JOIN_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 44)
#define MLME_FT_JOIN_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_GET_REQ_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 8)
#define MLME_GET_CFM_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_GET_NEXT_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 8)
#define MLME_GET_NEXT_CFM_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_HL_SYNC_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_HL_SYNC_IND_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_HL_SYNC_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_HL_SYNC_CANCEL_REQ_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_HL_SYNC_CANCEL_CFM_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_JOIN_REQ_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 44)
#define MLME_JOIN_CFM_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_LINKMEASURE_REQ_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_LINKMEASURE_CFM_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 28)
#define MLME_MEASURE_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_MEASURE_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_MICHAELMICFAILURE_IND_SIZE                              (HIP_SIGNAL_HEADER_SIZE + 28)
#define MLME_MREPORT_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_MREPORT_IND_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_MREPORT_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_MREQUEST_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_MREQUEST_IND_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_MREQUEST_CFM_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_NEIGHBORREPREQ_REQ_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_NEIGHBORREPREQ_IND_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_NEIGHBORREPREQ_CFM_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_NEIGHBORREPRESP_REQ_SIZE                                (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_NEIGHBORREPRESP_IND_SIZE                                (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_NEIGHBORREPRESP_CFM_SIZE                                (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_PAUSE_AUTONOMOUS_SCAN_REQ_SIZE                          (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_PAUSE_AUTONOMOUS_SCAN_CFM_SIZE                          (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_POWERMGT_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_POWERMGT_CFM_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_PROTECTEDFRAMEDROPPED_IND_SIZE                          (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_REASSOCIATE_REQ_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_REASSOCIATE_IND_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 28)
#define MLME_REASSOCIATE_RSP_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 24)
#define MLME_REASSOCIATE_CFM_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_REMOTE_REQUEST_REQ_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_REMOTE_REQUEST_IND_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_REMOTE_REQUEST_CFM_SIZE                                 (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_RESET_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_RESET_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_RESOURCE_REQUEST_REQ_SIZE                               (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_RESOURCE_REQUEST_IND_SIZE                               (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_RESOURCE_REQUEST_RSP_SIZE                               (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_RESOURCE_REQUEST_CFM_SIZE                               (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_RESOURCE_REQUEST_LOCAL_REQ_SIZE                         (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_RESOURCE_REQUEST_LOCAL_CFM_SIZE                         (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_SAQUERY_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 30)
#define MLME_SAQUERY_IND_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 30)
#define MLME_SAQUERY_RSP_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 30)
#define MLME_SAQUERY_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 30)
#define MLME_SCAN_REQ_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 34)
#define MLME_SCAN_IND_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 52)
#define MLME_SCAN_CFM_SIZE                                           (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_SCAN_CANCEL_REQ_SIZE                                    (HIP_SIGNAL_HEADER_SIZE + 8)
#define MLME_SCHEDULE_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_SCHEDULE_IND_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 8)
#define MLME_SCHEDULE_CFM_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_SET_REQ_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 8)
#define MLME_SET_CFM_SIZE                                            (HIP_SIGNAL_HEADER_SIZE + 12)
#define MLME_SETKEYS_REQ_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 42)
#define MLME_SETKEYS_CFM_SIZE                                        (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_SETPROTECTION_REQ_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 18)
#define MLME_SETPROTECTION_CFM_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_SET_UNITDATA_FILTER_REQ_SIZE                            (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_SET_UNITDATA_FILTER_CFM_SIZE                            (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_SNIFFJOIN_REQ_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_SNIFFJOIN_CFM_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 10)
#define MLME_STAKEYESTABLISHED_IND_SIZE                              (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_START_REQ_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 22)
#define MLME_START_CFM_SIZE                                          (HIP_SIGNAL_HEADER_SIZE + 16)
#define MLME_TPCADAPT_REQ_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 20)
#define MLME_TPCADAPT_CFM_SIZE                                       (HIP_SIGNAL_HEADER_SIZE + 24)
#define MLME_TRIGGERED_GET_IND_SIZE                                  (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_VSPECIFIC_REQ_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_VSPECIFIC_IND_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 14)
#define MLME_VSPECIFIC_CFM_SIZE                                      (HIP_SIGNAL_HEADER_SIZE + 10)


/* -------------------------- debug_generic_ind -------------------------- */
typedef struct DebugGenericInd_Evt
{
    FsmEvent                        common;
    DataReference                   debugVariable;
    DataReference                   dummyDataRef2;
    CsrUint16                       debugWords[8];
} DebugGenericInd_Evt;

#define build_debug_generic_ind(event, pid, p_debugVariable, p_debugWords) \
{ \
    DebugGenericInd_Evt *evt = (DebugGenericInd_Evt*) CsrPmalloc(sizeof(DebugGenericInd_Evt)); \
    evt->common.id            = DEBUG_GENERIC_IND_ID; \
    evt->common.destination   = pid; \
    evt->debugVariable        = p_debugVariable; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemCpy(evt->debugWords, p_debugWords, sizeof(evt->debugWords)); \
    event = (FsmEvent*)evt; \
}

#define send_debug_generic_ind(context, p_debugVariable, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_generic_ind(newevt, 0, p_debugVariable, p_debugWords); \
    fsm_send_event((context), newevt, pid, DEBUG_GENERIC_IND_ID); \
}

#define send_debug_generic_ind_external(context, pid, p_debugVariable, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_generic_ind(newevt, pid, p_debugVariable, p_debugWords); \
    fsm_send_event_external((context), newevt, pid, DEBUG_GENERIC_IND_ID); \
}

#define send_debug_generic_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (DEBUG_GENERIC_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect DEBUG_GENERIC_IND Size %d bytes .... Should be %d", packedEventSize, DEBUG_GENERIC_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DEBUG_GENERIC_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        DebugGenericInd_Evt *evt = (DebugGenericInd_Evt*) CsrPmalloc(sizeof(DebugGenericInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->debugVariable = dr1; \
        evt->dummyDataRef2 = dr2; \
        { \
        int i; \
        for(i=0; i<8; i++) \
        { \
            evt->debugWords[i] = event_unpack_CsrUint16(&buffer); \
        } \
        } \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, DEBUG_GENERIC_IND_ID); \
    } \
}

/* -------------------------- debug_generic_cfm -------------------------- */
typedef struct DebugGenericCfm_Evt
{
    FsmEvent                        common;
    DataReference                   debugVariable;
    DataReference                   dummyDataRef2;
    CsrUint16                       debugWords[8];
} DebugGenericCfm_Evt;

#define build_debug_generic_cfm(event, pid, p_debugVariable, p_debugWords) \
{ \
    DebugGenericCfm_Evt *evt = (DebugGenericCfm_Evt*) CsrPmalloc(sizeof(DebugGenericCfm_Evt)); \
    evt->common.id            = DEBUG_GENERIC_CFM_ID; \
    evt->common.destination   = pid; \
    evt->debugVariable        = p_debugVariable; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemCpy(evt->debugWords, p_debugWords, sizeof(evt->debugWords)); \
    event = (FsmEvent*)evt; \
}

#define send_debug_generic_cfm(context, p_debugVariable, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_generic_cfm(newevt, 0, p_debugVariable, p_debugWords); \
    fsm_send_event((context), newevt, pid, DEBUG_GENERIC_CFM_ID); \
}

#define send_debug_generic_cfm_external(context, pid, p_debugVariable, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_generic_cfm(newevt, pid, p_debugVariable, p_debugWords); \
    fsm_send_event_external((context), newevt, pid, DEBUG_GENERIC_CFM_ID); \
}

#define send_debug_generic_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (DEBUG_GENERIC_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect DEBUG_GENERIC_CFM Size %d bytes .... Should be %d", packedEventSize, DEBUG_GENERIC_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DEBUG_GENERIC_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        DebugGenericCfm_Evt *evt = (DebugGenericCfm_Evt*) CsrPmalloc(sizeof(DebugGenericCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->debugVariable = dr1; \
        evt->dummyDataRef2 = dr2; \
        { \
        int i; \
        for(i=0; i<8; i++) \
        { \
            evt->debugWords[i] = event_unpack_CsrUint16(&buffer); \
        } \
        } \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, DEBUG_GENERIC_CFM_ID); \
    } \
}

/* -------------------------- debug_string_ind -------------------------- */
typedef struct DebugStringInd_Evt
{
    FsmEvent                        common;
    DataReference                   debugMessage;
    DataReference                   dummyDataRef2;
} DebugStringInd_Evt;

#define build_debug_string_ind(event, pid, p_debugMessage) \
{ \
    DebugStringInd_Evt *evt = (DebugStringInd_Evt*) CsrPmalloc(sizeof(DebugStringInd_Evt)); \
    evt->common.id            = DEBUG_STRING_IND_ID; \
    evt->common.destination   = pid; \
    evt->debugMessage         = p_debugMessage; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    event = (FsmEvent*)evt; \
}

#define send_debug_string_ind(context, p_debugMessage) \
{ \
    FsmEvent *newevt; \
    build_debug_string_ind(newevt, 0, p_debugMessage); \
    fsm_send_event((context), newevt, pid, DEBUG_STRING_IND_ID); \
}

#define send_debug_string_ind_external(context, pid, p_debugMessage) \
{ \
    FsmEvent *newevt; \
    build_debug_string_ind(newevt, pid, p_debugMessage); \
    fsm_send_event_external((context), newevt, pid, DEBUG_STRING_IND_ID); \
}

#define send_debug_string_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (DEBUG_STRING_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect DEBUG_STRING_IND Size %d bytes .... Should be %d", packedEventSize, DEBUG_STRING_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DEBUG_STRING_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        DebugStringInd_Evt *evt = (DebugStringInd_Evt*) CsrPmalloc(sizeof(DebugStringInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->debugMessage = dr1; \
        evt->dummyDataRef2 = dr2; \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, DEBUG_STRING_IND_ID); \
    } \
}

/* -------------------------- debug_word16_ind -------------------------- */
typedef struct DebugWord16Ind_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    CsrUint16                       debugWords[16];
} DebugWord16Ind_Evt;

#define build_debug_word16_ind(event, pid, p_debugWords) \
{ \
    DebugWord16Ind_Evt *evt = (DebugWord16Ind_Evt*) CsrPmalloc(sizeof(DebugWord16Ind_Evt)); \
    evt->common.id            = DEBUG_WORD16_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemCpy(evt->debugWords, p_debugWords, sizeof(evt->debugWords)); \
    event = (FsmEvent*)evt; \
}

#define send_debug_word16_ind(context, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_word16_ind(newevt, 0, p_debugWords); \
    fsm_send_event((context), newevt, pid, DEBUG_WORD16_IND_ID); \
}

#define send_debug_word16_ind_external(context, pid, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_word16_ind(newevt, pid, p_debugWords); \
    fsm_send_event_external((context), newevt, pid, DEBUG_WORD16_IND_ID); \
}

#define send_debug_word16_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (DEBUG_WORD16_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect DEBUG_WORD16_IND Size %d bytes .... Should be %d", packedEventSize, DEBUG_WORD16_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DEBUG_WORD16_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DEBUG_WORD16_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        DebugWord16Ind_Evt *evt = (DebugWord16Ind_Evt*) CsrPmalloc(sizeof(DebugWord16Ind_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        { \
        int i; \
        for(i=0; i<16; i++) \
        { \
            evt->debugWords[i] = event_unpack_CsrUint16(&buffer); \
        } \
        } \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, DEBUG_WORD16_IND_ID); \
    } \
}

/* -------------------------- ds_unitdata_ind -------------------------- */
typedef struct DsUnitdataInd_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                da;
    unifi_MACAddress                sa;
    RoutingInformation              routingInformation;
    ReceptionStatus                 receptionStatus;
    Priority                        priority;
    ServiceClass                    serviceClass;
    ClientTag                       hostTag;
} DsUnitdataInd_Evt;

#define build_ds_unitdata_ind(event, pid, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_hostTag) \
{ \
    DsUnitdataInd_Evt *evt = (DsUnitdataInd_Evt*) CsrPmalloc(sizeof(DsUnitdataInd_Evt)); \
    evt->common.id            = DS_UNITDATA_IND_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->da                   = p_da; \
    evt->sa                   = p_sa; \
    evt->routingInformation   = p_routingInformation; \
    evt->receptionStatus      = p_receptionStatus; \
    evt->priority             = p_priority; \
    evt->serviceClass         = p_serviceClass; \
    evt->hostTag              = p_hostTag; \
    event = (FsmEvent*)evt; \
}

#define send_ds_unitdata_ind(context, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ds_unitdata_ind(newevt, 0, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_hostTag); \
    fsm_send_event((context), newevt, pid, DS_UNITDATA_IND_ID); \
}

#define send_ds_unitdata_ind_external(context, pid, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ds_unitdata_ind(newevt, pid, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_hostTag); \
    fsm_send_event_external((context), newevt, pid, DS_UNITDATA_IND_ID); \
}

#define send_ds_unitdata_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (DS_UNITDATA_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect DS_UNITDATA_IND Size %d bytes .... Should be %d", packedEventSize, DS_UNITDATA_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DS_UNITDATA_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        DsUnitdataInd_Evt *evt = (DsUnitdataInd_Evt*) CsrPmalloc(sizeof(DsUnitdataInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->data = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->da, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->sa, 6); \
        evt->routingInformation = event_unpack_CsrUint16(&buffer); \
        evt->receptionStatus = event_unpack_CsrUint16(&buffer); \
        evt->priority = event_unpack_CsrUint16(&buffer); \
        evt->serviceClass = event_unpack_CsrUint16(&buffer); \
        evt->hostTag = event_unpack_CsrUint32(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, DS_UNITDATA_IND_ID); \
    } \
}

/* -------------------------- ds_unitdata_cancel_ind -------------------------- */
typedef struct DsUnitdataCancelInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ClientTag                       hostTag;
} DsUnitdataCancelInd_Evt;

#define build_ds_unitdata_cancel_ind(event, pid, p_hostTag) \
{ \
    DsUnitdataCancelInd_Evt *evt = (DsUnitdataCancelInd_Evt*) CsrPmalloc(sizeof(DsUnitdataCancelInd_Evt)); \
    evt->common.id            = DS_UNITDATA_CANCEL_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->hostTag              = p_hostTag; \
    event = (FsmEvent*)evt; \
}

#define send_ds_unitdata_cancel_ind(context, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ds_unitdata_cancel_ind(newevt, 0, p_hostTag); \
    fsm_send_event((context), newevt, pid, DS_UNITDATA_CANCEL_IND_ID); \
}

#define send_ds_unitdata_cancel_ind_external(context, pid, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ds_unitdata_cancel_ind(newevt, pid, p_hostTag); \
    fsm_send_event_external((context), newevt, pid, DS_UNITDATA_CANCEL_IND_ID); \
}

#define send_ds_unitdata_cancel_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (DS_UNITDATA_CANCEL_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect DS_UNITDATA_CANCEL_IND Size %d bytes .... Should be %d", packedEventSize, DS_UNITDATA_CANCEL_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DS_UNITDATA_CANCEL_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for DS_UNITDATA_CANCEL_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        DsUnitdataCancelInd_Evt *evt = (DsUnitdataCancelInd_Evt*) CsrPmalloc(sizeof(DsUnitdataCancelInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->hostTag = event_unpack_CsrUint32(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, DS_UNITDATA_CANCEL_IND_ID); \
    } \
}

/* -------------------------- ma_packet_ind -------------------------- */
typedef struct MaPacketInd_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    TsfTime                         localTime;
    ChannelNumber                   channel;
    ReceptionStatus                 receptionStatus;
    Decibels                        rssi;
    Decibels                        snr;
    Rate                            rate;
    Rcpi                            rcpiMeasurement;
    Rsni                            rsniMeasurement;
    CsrUint16                       msduFragmentNumber;
} MaPacketInd_Evt;

#define build_ma_packet_ind(event, pid, p_data, p_localTime, p_channel, p_receptionStatus, p_rssi, p_snr, p_rate, p_rcpiMeasurement, p_rsniMeasurement, p_msduFragmentNumber) \
{ \
    MaPacketInd_Evt *evt = (MaPacketInd_Evt*) CsrPmalloc(sizeof(MaPacketInd_Evt)); \
    evt->common.id            = MA_PACKET_IND_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->localTime            = p_localTime; \
    evt->channel              = p_channel; \
    evt->receptionStatus      = p_receptionStatus; \
    evt->rssi                 = p_rssi; \
    evt->snr                  = p_snr; \
    evt->rate                 = p_rate; \
    evt->rcpiMeasurement      = p_rcpiMeasurement; \
    evt->rsniMeasurement      = p_rsniMeasurement; \
    evt->msduFragmentNumber   = p_msduFragmentNumber; \
    event = (FsmEvent*)evt; \
}

#define send_ma_packet_ind(context, p_data, p_localTime, p_channel, p_receptionStatus, p_rssi, p_snr, p_rate, p_rcpiMeasurement, p_rsniMeasurement, p_msduFragmentNumber) \
{ \
    FsmEvent *newevt; \
    build_ma_packet_ind(newevt, 0, p_data, p_localTime, p_channel, p_receptionStatus, p_rssi, p_snr, p_rate, p_rcpiMeasurement, p_rsniMeasurement, p_msduFragmentNumber); \
    fsm_send_event((context), newevt, pid, MA_PACKET_IND_ID); \
}

#define send_ma_packet_ind_external(context, pid, p_data, p_localTime, p_channel, p_receptionStatus, p_rssi, p_snr, p_rate, p_rcpiMeasurement, p_rsniMeasurement, p_msduFragmentNumber) \
{ \
    FsmEvent *newevt; \
    build_ma_packet_ind(newevt, pid, p_data, p_localTime, p_channel, p_receptionStatus, p_rssi, p_snr, p_rate, p_rcpiMeasurement, p_rsniMeasurement, p_msduFragmentNumber); \
    fsm_send_event_external((context), newevt, pid, MA_PACKET_IND_ID); \
}

#define send_ma_packet_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MA_PACKET_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MA_PACKET_IND Size %d bytes .... Should be %d", packedEventSize, MA_PACKET_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_PACKET_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MaPacketInd_Evt *evt = (MaPacketInd_Evt*) CsrPmalloc(sizeof(MaPacketInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->data = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->localTime, 8); \
        evt->channel = event_unpack_CsrUint16(&buffer); \
        evt->receptionStatus = event_unpack_CsrUint16(&buffer); \
        evt->rssi = event_unpack_CsrInt16(&buffer); \
        evt->snr = event_unpack_CsrInt16(&buffer); \
        evt->rate = event_unpack_CsrUint16(&buffer); \
        evt->rcpiMeasurement = event_unpack_CsrUint16(&buffer); \
        evt->rsniMeasurement = event_unpack_CsrUint16(&buffer); \
        evt->msduFragmentNumber = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MA_PACKET_IND_ID); \
    } \
}

/* -------------------------- ma_packet_cfm -------------------------- */
typedef struct MaPacketCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    TransmissionStatus              transmissionStatus;
    CsrUint16                       retryCount;
    Rate                            rate;
    ClientTag                       hostTag;
} MaPacketCfm_Evt;

#define build_ma_packet_cfm(event, pid, p_transmissionStatus, p_retryCount, p_rate, p_hostTag) \
{ \
    MaPacketCfm_Evt *evt = (MaPacketCfm_Evt*) CsrPmalloc(sizeof(MaPacketCfm_Evt)); \
    evt->common.id            = MA_PACKET_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->transmissionStatus   = p_transmissionStatus; \
    evt->retryCount           = p_retryCount; \
    evt->rate                 = p_rate; \
    evt->hostTag              = p_hostTag; \
    event = (FsmEvent*)evt; \
}

#define send_ma_packet_cfm(context, p_transmissionStatus, p_retryCount, p_rate, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ma_packet_cfm(newevt, 0, p_transmissionStatus, p_retryCount, p_rate, p_hostTag); \
    fsm_send_event((context), newevt, pid, MA_PACKET_CFM_ID); \
}

#define send_ma_packet_cfm_external(context, pid, p_transmissionStatus, p_retryCount, p_rate, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ma_packet_cfm(newevt, pid, p_transmissionStatus, p_retryCount, p_rate, p_hostTag); \
    fsm_send_event_external((context), newevt, pid, MA_PACKET_CFM_ID); \
}

#define send_ma_packet_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MA_PACKET_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MA_PACKET_CFM Size %d bytes .... Should be %d", packedEventSize, MA_PACKET_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_PACKET_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_PACKET_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MaPacketCfm_Evt *evt = (MaPacketCfm_Evt*) CsrPmalloc(sizeof(MaPacketCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->transmissionStatus = event_unpack_CsrUint16(&buffer); \
        evt->retryCount = event_unpack_CsrUint16(&buffer); \
        evt->rate = event_unpack_CsrUint16(&buffer); \
        evt->hostTag = event_unpack_CsrUint32(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MA_PACKET_CFM_ID); \
    } \
}

/* -------------------------- ma_sniffdata_ind -------------------------- */
typedef struct MaSniffdataInd_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    TsfTime                         timestamp;
    Microseconds16                  duration;
    Rate                            rate;
    AntennaId                       antennaId;
    Decibels                        rssi;
    Decibels                        snr;
    HertzDelta                      frequencyOffset;
    SnifferReceptionStatus          receptionStatus;
} MaSniffdataInd_Evt;

#define build_ma_sniffdata_ind(event, pid, p_data, p_timestamp, p_duration, p_rate, p_antennaId, p_rssi, p_snr, p_frequencyOffset, p_receptionStatus) \
{ \
    MaSniffdataInd_Evt *evt = (MaSniffdataInd_Evt*) CsrPmalloc(sizeof(MaSniffdataInd_Evt)); \
    evt->common.id            = MA_SNIFFDATA_IND_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->timestamp            = p_timestamp; \
    evt->duration             = p_duration; \
    evt->rate                 = p_rate; \
    evt->antennaId            = p_antennaId; \
    evt->rssi                 = p_rssi; \
    evt->snr                  = p_snr; \
    evt->frequencyOffset      = p_frequencyOffset; \
    evt->receptionStatus      = p_receptionStatus; \
    event = (FsmEvent*)evt; \
}

#define send_ma_sniffdata_ind(context, p_data, p_timestamp, p_duration, p_rate, p_antennaId, p_rssi, p_snr, p_frequencyOffset, p_receptionStatus) \
{ \
    FsmEvent *newevt; \
    build_ma_sniffdata_ind(newevt, 0, p_data, p_timestamp, p_duration, p_rate, p_antennaId, p_rssi, p_snr, p_frequencyOffset, p_receptionStatus); \
    fsm_send_event((context), newevt, pid, MA_SNIFFDATA_IND_ID); \
}

#define send_ma_sniffdata_ind_external(context, pid, p_data, p_timestamp, p_duration, p_rate, p_antennaId, p_rssi, p_snr, p_frequencyOffset, p_receptionStatus) \
{ \
    FsmEvent *newevt; \
    build_ma_sniffdata_ind(newevt, pid, p_data, p_timestamp, p_duration, p_rate, p_antennaId, p_rssi, p_snr, p_frequencyOffset, p_receptionStatus); \
    fsm_send_event_external((context), newevt, pid, MA_SNIFFDATA_IND_ID); \
}

#define send_ma_sniffdata_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MA_SNIFFDATA_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MA_SNIFFDATA_IND Size %d bytes .... Should be %d", packedEventSize, MA_SNIFFDATA_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_SNIFFDATA_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MaSniffdataInd_Evt *evt = (MaSniffdataInd_Evt*) CsrPmalloc(sizeof(MaSniffdataInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->data = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->timestamp, 8); \
        evt->duration = event_unpack_CsrUint16(&buffer); \
        evt->rate = event_unpack_CsrUint16(&buffer); \
        evt->antennaId = event_unpack_CsrUint16(&buffer); \
        evt->rssi = event_unpack_CsrInt16(&buffer); \
        evt->snr = event_unpack_CsrInt16(&buffer); \
        evt->frequencyOffset = event_unpack_CsrInt32(&buffer); \
        evt->receptionStatus = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MA_SNIFFDATA_IND_ID); \
    } \
}

/* -------------------------- ma_unitdata_ind -------------------------- */
typedef struct MaUnitdataInd_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                da;
    unifi_MACAddress                sa;
    RoutingInformation              routingInformation;
    ReceptionStatus                 receptionStatus;
    Priority                        priority;
    ServiceClass                    serviceClass;
    Decibels                        rssi;
    Decibels                        snr;
    Rate                            rate;
} MaUnitdataInd_Evt;

#define build_ma_unitdata_ind(event, pid, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_rssi, p_snr, p_rate) \
{ \
    MaUnitdataInd_Evt *evt = (MaUnitdataInd_Evt*) CsrPmalloc(sizeof(MaUnitdataInd_Evt)); \
    evt->common.id            = MA_UNITDATA_IND_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->da                   = p_da; \
    evt->sa                   = p_sa; \
    evt->routingInformation   = p_routingInformation; \
    evt->receptionStatus      = p_receptionStatus; \
    evt->priority             = p_priority; \
    evt->serviceClass         = p_serviceClass; \
    evt->rssi                 = p_rssi; \
    evt->snr                  = p_snr; \
    evt->rate                 = p_rate; \
    event = (FsmEvent*)evt; \
}

#define send_ma_unitdata_ind(context, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_rssi, p_snr, p_rate) \
{ \
    FsmEvent *newevt; \
    build_ma_unitdata_ind(newevt, 0, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_rssi, p_snr, p_rate); \
    fsm_send_event((context), newevt, pid, MA_UNITDATA_IND_ID); \
}

#define send_ma_unitdata_ind_external(context, pid, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_rssi, p_snr, p_rate) \
{ \
    FsmEvent *newevt; \
    build_ma_unitdata_ind(newevt, pid, p_data, p_da, p_sa, p_routingInformation, p_receptionStatus, p_priority, p_serviceClass, p_rssi, p_snr, p_rate); \
    fsm_send_event_external((context), newevt, pid, MA_UNITDATA_IND_ID); \
}

#define send_ma_unitdata_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MA_UNITDATA_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MA_UNITDATA_IND Size %d bytes .... Should be %d", packedEventSize, MA_UNITDATA_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_UNITDATA_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MaUnitdataInd_Evt *evt = (MaUnitdataInd_Evt*) CsrPmalloc(sizeof(MaUnitdataInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->data = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->da, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->sa, 6); \
        evt->routingInformation = event_unpack_CsrUint16(&buffer); \
        evt->receptionStatus = event_unpack_CsrUint16(&buffer); \
        evt->priority = event_unpack_CsrUint16(&buffer); \
        evt->serviceClass = event_unpack_CsrUint16(&buffer); \
        evt->rssi = event_unpack_CsrInt16(&buffer); \
        evt->snr = event_unpack_CsrInt16(&buffer); \
        evt->rate = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MA_UNITDATA_IND_ID); \
    } \
}

/* -------------------------- ma_unitdata_cfm -------------------------- */
typedef struct MaUnitdataCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                da;
    unifi_MACAddress                sa;
    TransmissionStatus              transmissionStatus;
    Priority                        providedPriority;
    ServiceClass                    providedServiceClass;
    ClientTag                       providedHostTag;
    Rate                            rate;
} MaUnitdataCfm_Evt;

#define build_ma_unitdata_cfm(event, pid, p_da, p_sa, p_transmissionStatus, p_providedPriority, p_providedServiceClass, p_providedHostTag, p_rate) \
{ \
    MaUnitdataCfm_Evt *evt = (MaUnitdataCfm_Evt*) CsrPmalloc(sizeof(MaUnitdataCfm_Evt)); \
    evt->common.id            = MA_UNITDATA_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->da                   = p_da; \
    evt->sa                   = p_sa; \
    evt->transmissionStatus   = p_transmissionStatus; \
    evt->providedPriority     = p_providedPriority; \
    evt->providedServiceClass = p_providedServiceClass; \
    evt->providedHostTag      = p_providedHostTag; \
    evt->rate                 = p_rate; \
    event = (FsmEvent*)evt; \
}

#define send_ma_unitdata_cfm(context, p_da, p_sa, p_transmissionStatus, p_providedPriority, p_providedServiceClass, p_providedHostTag, p_rate) \
{ \
    FsmEvent *newevt; \
    build_ma_unitdata_cfm(newevt, 0, p_da, p_sa, p_transmissionStatus, p_providedPriority, p_providedServiceClass, p_providedHostTag, p_rate); \
    fsm_send_event((context), newevt, pid, MA_UNITDATA_CFM_ID); \
}

#define send_ma_unitdata_cfm_external(context, pid, p_da, p_sa, p_transmissionStatus, p_providedPriority, p_providedServiceClass, p_providedHostTag, p_rate) \
{ \
    FsmEvent *newevt; \
    build_ma_unitdata_cfm(newevt, pid, p_da, p_sa, p_transmissionStatus, p_providedPriority, p_providedServiceClass, p_providedHostTag, p_rate); \
    fsm_send_event_external((context), newevt, pid, MA_UNITDATA_CFM_ID); \
}

#define send_ma_unitdata_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MA_UNITDATA_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MA_UNITDATA_CFM Size %d bytes .... Should be %d", packedEventSize, MA_UNITDATA_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_UNITDATA_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MA_UNITDATA_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MaUnitdataCfm_Evt *evt = (MaUnitdataCfm_Evt*) CsrPmalloc(sizeof(MaUnitdataCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->da, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->sa, 6); \
        evt->transmissionStatus = event_unpack_CsrUint16(&buffer); \
        evt->providedPriority = event_unpack_CsrUint16(&buffer); \
        evt->providedServiceClass = event_unpack_CsrUint16(&buffer); \
        evt->providedHostTag = event_unpack_CsrUint32(&buffer); \
        evt->rate = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MA_UNITDATA_CFM_ID); \
    } \
}

/* -------------------------- mlme_addba_ind -------------------------- */
typedef struct MlmeAddbaInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    DialogToken                     dialogToken;
    Priority                        tid;
    BlockAckPolicy                  blockAckPolicy;
    CsrUint16                       bufferSize;
    TimeUnits                       blockAckTimeout;
} MlmeAddbaInd_Evt;

#define build_mlme_addba_ind(event, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    MlmeAddbaInd_Evt *evt = (MlmeAddbaInd_Evt*) CsrPmalloc(sizeof(MlmeAddbaInd_Evt)); \
    evt->common.id            = MLME_ADDBA_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->tid                  = p_tid; \
    evt->blockAckPolicy       = p_blockAckPolicy; \
    evt->bufferSize           = p_bufferSize; \
    evt->blockAckTimeout      = p_blockAckTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addba_ind(context, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_addba_ind(newevt, 0, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout); \
    fsm_send_event((context), newevt, pid, MLME_ADDBA_IND_ID); \
}

#define send_mlme_addba_ind_external(context, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_addba_ind(newevt, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout); \
    fsm_send_event_external((context), newevt, pid, MLME_ADDBA_IND_ID); \
}

#define send_mlme_addba_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADDBA_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADDBA_IND Size %d bytes .... Should be %d", packedEventSize, MLME_ADDBA_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADDBA_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADDBA_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddbaInd_Evt *evt = (MlmeAddbaInd_Evt*) CsrPmalloc(sizeof(MlmeAddbaInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerQstaAddress, 6); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        evt->tid = event_unpack_CsrUint16(&buffer); \
        evt->blockAckPolicy = event_unpack_CsrUint16(&buffer); \
        evt->bufferSize = event_unpack_CsrUint16(&buffer); \
        evt->blockAckTimeout = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADDBA_IND_ID); \
    } \
}

/* -------------------------- mlme_addba_cfm -------------------------- */
typedef struct MlmeAddbaCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    DialogToken                     dialogToken;
    Priority                        tid;
    ResultCode                      resultCode;
    BlockAckPolicy                  blockAckPolicy;
    CsrUint16                       bufferSize;
    TimeUnits                       blockAckTimeout;
} MlmeAddbaCfm_Evt;

#define build_mlme_addba_cfm(event, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    MlmeAddbaCfm_Evt *evt = (MlmeAddbaCfm_Evt*) CsrPmalloc(sizeof(MlmeAddbaCfm_Evt)); \
    evt->common.id            = MLME_ADDBA_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->tid                  = p_tid; \
    evt->resultCode           = p_resultCode; \
    evt->blockAckPolicy       = p_blockAckPolicy; \
    evt->bufferSize           = p_bufferSize; \
    evt->blockAckTimeout      = p_blockAckTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addba_cfm(context, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_addba_cfm(newevt, 0, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout); \
    fsm_send_event((context), newevt, pid, MLME_ADDBA_CFM_ID); \
}

#define send_mlme_addba_cfm_external(context, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_addba_cfm(newevt, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout); \
    fsm_send_event_external((context), newevt, pid, MLME_ADDBA_CFM_ID); \
}

#define send_mlme_addba_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADDBA_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADDBA_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADDBA_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADDBA_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADDBA_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddbaCfm_Evt *evt = (MlmeAddbaCfm_Evt*) CsrPmalloc(sizeof(MlmeAddbaCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerQstaAddress, 6); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        evt->tid = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->blockAckPolicy = event_unpack_CsrUint16(&buffer); \
        evt->bufferSize = event_unpack_CsrUint16(&buffer); \
        evt->blockAckTimeout = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADDBA_CFM_ID); \
    } \
}

/* -------------------------- mlme_addts_ind -------------------------- */
typedef struct MlmeAddtsInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    DialogToken                     dialogToken;
    unifi_MACAddress                nonApqstaAddress;
} MlmeAddtsInd_Evt;

#define build_mlme_addts_ind(event, pid, p_informationElements, p_dialogToken, p_nonApqstaAddress) \
{ \
    MlmeAddtsInd_Evt *evt = (MlmeAddtsInd_Evt*) CsrPmalloc(sizeof(MlmeAddtsInd_Evt)); \
    evt->common.id            = MLME_ADDTS_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->dialogToken          = p_dialogToken; \
    evt->nonApqstaAddress     = p_nonApqstaAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addts_ind(context, p_informationElements, p_dialogToken, p_nonApqstaAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_addts_ind(newevt, 0, p_informationElements, p_dialogToken, p_nonApqstaAddress); \
    fsm_send_event((context), newevt, pid, MLME_ADDTS_IND_ID); \
}

#define send_mlme_addts_ind_external(context, pid, p_informationElements, p_dialogToken, p_nonApqstaAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_addts_ind(newevt, pid, p_informationElements, p_dialogToken, p_nonApqstaAddress); \
    fsm_send_event_external((context), newevt, pid, MLME_ADDTS_IND_ID); \
}

#define send_mlme_addts_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADDTS_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADDTS_IND Size %d bytes .... Should be %d", packedEventSize, MLME_ADDTS_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADDTS_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddtsInd_Evt *evt = (MlmeAddtsInd_Evt*) CsrPmalloc(sizeof(MlmeAddtsInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->nonApqstaAddress, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADDTS_IND_ID); \
    } \
}

/* -------------------------- mlme_addts_cfm -------------------------- */
typedef struct MlmeAddtsCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
} MlmeAddtsCfm_Evt;

#define build_mlme_addts_cfm(event, pid, p_informationElements, p_resultCode, p_dialogToken) \
{ \
    MlmeAddtsCfm_Evt *evt = (MlmeAddtsCfm_Evt*) CsrPmalloc(sizeof(MlmeAddtsCfm_Evt)); \
    evt->common.id            = MLME_ADDTS_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addts_cfm(context, p_informationElements, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_addts_cfm(newevt, 0, p_informationElements, p_resultCode, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_ADDTS_CFM_ID); \
}

#define send_mlme_addts_cfm_external(context, pid, p_informationElements, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_addts_cfm(newevt, pid, p_informationElements, p_resultCode, p_dialogToken); \
    fsm_send_event_external((context), newevt, pid, MLME_ADDTS_CFM_ID); \
}

#define send_mlme_addts_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADDTS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADDTS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADDTS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADDTS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddtsCfm_Evt *evt = (MlmeAddtsCfm_Evt*) CsrPmalloc(sizeof(MlmeAddtsCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADDTS_CFM_ID); \
    } \
}

/* -------------------------- mlme_add_autonomous_scan_cfm -------------------------- */
typedef struct MlmeAddAutonomousScanCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    AutonomousScanId                autonomousScanId;
} MlmeAddAutonomousScanCfm_Evt;

#define build_mlme_add_autonomous_scan_cfm(event, pid, p_resultCode, p_autonomousScanId) \
{ \
    MlmeAddAutonomousScanCfm_Evt *evt = (MlmeAddAutonomousScanCfm_Evt*) CsrPmalloc(sizeof(MlmeAddAutonomousScanCfm_Evt)); \
    evt->common.id            = MLME_ADD_AUTONOMOUS_SCAN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_autonomous_scan_cfm(context, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_autonomous_scan_cfm(newevt, 0, p_resultCode, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_ADD_AUTONOMOUS_SCAN_CFM_ID); \
}

#define send_mlme_add_autonomous_scan_cfm_external(context, pid, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_autonomous_scan_cfm(newevt, pid, p_resultCode, p_autonomousScanId); \
    fsm_send_event_external((context), newevt, pid, MLME_ADD_AUTONOMOUS_SCAN_CFM_ID); \
}

#define send_mlme_add_autonomous_scan_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADD_AUTONOMOUS_SCAN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADD_AUTONOMOUS_SCAN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADD_AUTONOMOUS_SCAN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_AUTONOMOUS_SCAN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_AUTONOMOUS_SCAN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddAutonomousScanCfm_Evt *evt = (MlmeAddAutonomousScanCfm_Evt*) CsrPmalloc(sizeof(MlmeAddAutonomousScanCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADD_AUTONOMOUS_SCAN_CFM_ID); \
    } \
}

/* -------------------------- mlme_add_blackout_cfm -------------------------- */
typedef struct MlmeAddBlackoutCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    BlackoutId                      blackoutId;
    ResultCode                      resultCode;
} MlmeAddBlackoutCfm_Evt;

#define build_mlme_add_blackout_cfm(event, pid, p_blackoutId, p_resultCode) \
{ \
    MlmeAddBlackoutCfm_Evt *evt = (MlmeAddBlackoutCfm_Evt*) CsrPmalloc(sizeof(MlmeAddBlackoutCfm_Evt)); \
    evt->common.id            = MLME_ADD_BLACKOUT_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->blackoutId           = p_blackoutId; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_blackout_cfm(context, p_blackoutId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_blackout_cfm(newevt, 0, p_blackoutId, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_ADD_BLACKOUT_CFM_ID); \
}

#define send_mlme_add_blackout_cfm_external(context, pid, p_blackoutId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_blackout_cfm(newevt, pid, p_blackoutId, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_ADD_BLACKOUT_CFM_ID); \
}

#define send_mlme_add_blackout_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADD_BLACKOUT_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADD_BLACKOUT_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADD_BLACKOUT_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_BLACKOUT_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_BLACKOUT_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddBlackoutCfm_Evt *evt = (MlmeAddBlackoutCfm_Evt*) CsrPmalloc(sizeof(MlmeAddBlackoutCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->blackoutId = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADD_BLACKOUT_CFM_ID); \
    } \
}

/* -------------------------- mlme_add_periodic_cfm -------------------------- */
typedef struct MlmeAddPeriodicCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    PeriodicId                      periodicId;
    ResultCode                      resultCode;
} MlmeAddPeriodicCfm_Evt;

#define build_mlme_add_periodic_cfm(event, pid, p_periodicId, p_resultCode) \
{ \
    MlmeAddPeriodicCfm_Evt *evt = (MlmeAddPeriodicCfm_Evt*) CsrPmalloc(sizeof(MlmeAddPeriodicCfm_Evt)); \
    evt->common.id            = MLME_ADD_PERIODIC_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->periodicId           = p_periodicId; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_periodic_cfm(context, p_periodicId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_periodic_cfm(newevt, 0, p_periodicId, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_ADD_PERIODIC_CFM_ID); \
}

#define send_mlme_add_periodic_cfm_external(context, pid, p_periodicId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_periodic_cfm(newevt, pid, p_periodicId, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_ADD_PERIODIC_CFM_ID); \
}

#define send_mlme_add_periodic_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADD_PERIODIC_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADD_PERIODIC_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADD_PERIODIC_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_PERIODIC_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_PERIODIC_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddPeriodicCfm_Evt *evt = (MlmeAddPeriodicCfm_Evt*) CsrPmalloc(sizeof(MlmeAddPeriodicCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->periodicId = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADD_PERIODIC_CFM_ID); \
    } \
}

/* -------------------------- mlme_add_rx_trigger_cfm -------------------------- */
typedef struct MlmeAddRxTriggerCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    TriggerId                       triggerId;
    ResultCode                      resultCode;
} MlmeAddRxTriggerCfm_Evt;

#define build_mlme_add_rx_trigger_cfm(event, pid, p_triggerId, p_resultCode) \
{ \
    MlmeAddRxTriggerCfm_Evt *evt = (MlmeAddRxTriggerCfm_Evt*) CsrPmalloc(sizeof(MlmeAddRxTriggerCfm_Evt)); \
    evt->common.id            = MLME_ADD_RX_TRIGGER_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->triggerId            = p_triggerId; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_rx_trigger_cfm(context, p_triggerId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_rx_trigger_cfm(newevt, 0, p_triggerId, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_ADD_RX_TRIGGER_CFM_ID); \
}

#define send_mlme_add_rx_trigger_cfm_external(context, pid, p_triggerId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_rx_trigger_cfm(newevt, pid, p_triggerId, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_ADD_RX_TRIGGER_CFM_ID); \
}

#define send_mlme_add_rx_trigger_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADD_RX_TRIGGER_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADD_RX_TRIGGER_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADD_RX_TRIGGER_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_RX_TRIGGER_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_RX_TRIGGER_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddRxTriggerCfm_Evt *evt = (MlmeAddRxTriggerCfm_Evt*) CsrPmalloc(sizeof(MlmeAddRxTriggerCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->triggerId = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADD_RX_TRIGGER_CFM_ID); \
    } \
}

/* -------------------------- mlme_add_triggered_get_cfm -------------------------- */
typedef struct MlmeAddTriggeredGetCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    TriggeredId                     triggeredId;
} MlmeAddTriggeredGetCfm_Evt;

#define build_mlme_add_triggered_get_cfm(event, pid, p_resultCode, p_triggeredId) \
{ \
    MlmeAddTriggeredGetCfm_Evt *evt = (MlmeAddTriggeredGetCfm_Evt*) CsrPmalloc(sizeof(MlmeAddTriggeredGetCfm_Evt)); \
    evt->common.id            = MLME_ADD_TRIGGERED_GET_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->triggeredId          = p_triggeredId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_triggered_get_cfm(context, p_resultCode, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_triggered_get_cfm(newevt, 0, p_resultCode, p_triggeredId); \
    fsm_send_event((context), newevt, pid, MLME_ADD_TRIGGERED_GET_CFM_ID); \
}

#define send_mlme_add_triggered_get_cfm_external(context, pid, p_resultCode, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_triggered_get_cfm(newevt, pid, p_resultCode, p_triggeredId); \
    fsm_send_event_external((context), newevt, pid, MLME_ADD_TRIGGERED_GET_CFM_ID); \
}

#define send_mlme_add_triggered_get_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADD_TRIGGERED_GET_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADD_TRIGGERED_GET_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADD_TRIGGERED_GET_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_TRIGGERED_GET_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_TRIGGERED_GET_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddTriggeredGetCfm_Evt *evt = (MlmeAddTriggeredGetCfm_Evt*) CsrPmalloc(sizeof(MlmeAddTriggeredGetCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->triggeredId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADD_TRIGGERED_GET_CFM_ID); \
    } \
}

/* -------------------------- mlme_add_wds_cfm -------------------------- */
typedef struct MlmeAddWdsCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeAddWdsCfm_Evt;

#define build_mlme_add_wds_cfm(event, pid, p_resultCode) \
{ \
    MlmeAddWdsCfm_Evt *evt = (MlmeAddWdsCfm_Evt*) CsrPmalloc(sizeof(MlmeAddWdsCfm_Evt)); \
    evt->common.id            = MLME_ADD_WDS_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_wds_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_wds_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_ADD_WDS_CFM_ID); \
}

#define send_mlme_add_wds_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_wds_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_ADD_WDS_CFM_ID); \
}

#define send_mlme_add_wds_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ADD_WDS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ADD_WDS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ADD_WDS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_WDS_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ADD_WDS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAddWdsCfm_Evt *evt = (MlmeAddWdsCfm_Evt*) CsrPmalloc(sizeof(MlmeAddWdsCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ADD_WDS_CFM_ID); \
    } \
}

/* -------------------------- mlme_associate_ind -------------------------- */
typedef struct MlmeAssociateInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    CapabilityInformation           capabilityInformation;
    BeaconPeriods                   listenInterval;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
} MlmeAssociateInd_Evt;

#define build_mlme_associate_ind(event, pid, p_informationElements, p_peerStaAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest) \
{ \
    MlmeAssociateInd_Evt *evt = (MlmeAssociateInd_Evt*) CsrPmalloc(sizeof(MlmeAssociateInd_Evt)); \
    evt->common.id            = MLME_ASSOCIATE_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->listenInterval       = p_listenInterval; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_associate_ind(context, p_informationElements, p_peerStaAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest) \
{ \
    FsmEvent *newevt; \
    build_mlme_associate_ind(newevt, 0, p_informationElements, p_peerStaAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest); \
    fsm_send_event((context), newevt, pid, MLME_ASSOCIATE_IND_ID); \
}

#define send_mlme_associate_ind_external(context, pid, p_informationElements, p_peerStaAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest) \
{ \
    FsmEvent *newevt; \
    build_mlme_associate_ind(newevt, pid, p_informationElements, p_peerStaAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest); \
    fsm_send_event_external((context), newevt, pid, MLME_ASSOCIATE_IND_ID); \
}

#define send_mlme_associate_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ASSOCIATE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ASSOCIATE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_ASSOCIATE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_ASSOCIATE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAssociateInd_Evt *evt = (MlmeAssociateInd_Evt*) CsrPmalloc(sizeof(MlmeAssociateInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->listenInterval = event_unpack_CsrUint16(&buffer); \
        evt->rcpiRequest = event_unpack_CsrUint16(&buffer); \
        evt->rsniRequest = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ASSOCIATE_IND_ID); \
    } \
}

/* -------------------------- mlme_associate_cfm -------------------------- */
typedef struct MlmeAssociateCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   exchangedFrames;
    ResultCode                      resultCode;
    CapabilityInformation           capabilityInformation;
    AssociationId                   associationId;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
    Rcpi                            rcpiResponse;
    Rsni                            rsniResponse;
} MlmeAssociateCfm_Evt;

#define build_mlme_associate_cfm(event, pid, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse) \
{ \
    MlmeAssociateCfm_Evt *evt = (MlmeAssociateCfm_Evt*) CsrPmalloc(sizeof(MlmeAssociateCfm_Evt)); \
    evt->common.id            = MLME_ASSOCIATE_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    evt->exchangedFrames      = p_exchangedFrames; \
    evt->resultCode           = p_resultCode; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->associationId        = p_associationId; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    evt->rcpiResponse         = p_rcpiResponse; \
    evt->rsniResponse         = p_rsniResponse; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_associate_cfm(context, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse) \
{ \
    FsmEvent *newevt; \
    build_mlme_associate_cfm(newevt, 0, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse); \
    fsm_send_event((context), newevt, pid, MLME_ASSOCIATE_CFM_ID); \
}

#define send_mlme_associate_cfm_external(context, pid, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse) \
{ \
    FsmEvent *newevt; \
    build_mlme_associate_cfm(newevt, pid, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse); \
    fsm_send_event_external((context), newevt, pid, MLME_ASSOCIATE_CFM_ID); \
}

#define send_mlme_associate_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_ASSOCIATE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_ASSOCIATE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_ASSOCIATE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAssociateCfm_Evt *evt = (MlmeAssociateCfm_Evt*) CsrPmalloc(sizeof(MlmeAssociateCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->exchangedFrames = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->associationId = event_unpack_CsrUint16(&buffer); \
        evt->rcpiRequest = event_unpack_CsrUint16(&buffer); \
        evt->rsniRequest = event_unpack_CsrUint16(&buffer); \
        evt->rcpiResponse = event_unpack_CsrUint16(&buffer); \
        evt->rsniResponse = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_ASSOCIATE_CFM_ID); \
    } \
}

/* -------------------------- mlme_authenticate_ind -------------------------- */
typedef struct MlmeAuthenticateInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    AuthenticationType              authenticationType;
} MlmeAuthenticateInd_Evt;

#define build_mlme_authenticate_ind(event, pid, p_informationElements, p_peerStaAddress, p_authenticationType) \
{ \
    MlmeAuthenticateInd_Evt *evt = (MlmeAuthenticateInd_Evt*) CsrPmalloc(sizeof(MlmeAuthenticateInd_Evt)); \
    evt->common.id            = MLME_AUTHENTICATE_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->authenticationType   = p_authenticationType; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_authenticate_ind(context, p_informationElements, p_peerStaAddress, p_authenticationType) \
{ \
    FsmEvent *newevt; \
    build_mlme_authenticate_ind(newevt, 0, p_informationElements, p_peerStaAddress, p_authenticationType); \
    fsm_send_event((context), newevt, pid, MLME_AUTHENTICATE_IND_ID); \
}

#define send_mlme_authenticate_ind_external(context, pid, p_informationElements, p_peerStaAddress, p_authenticationType) \
{ \
    FsmEvent *newevt; \
    build_mlme_authenticate_ind(newevt, pid, p_informationElements, p_peerStaAddress, p_authenticationType); \
    fsm_send_event_external((context), newevt, pid, MLME_AUTHENTICATE_IND_ID); \
}

#define send_mlme_authenticate_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_AUTHENTICATE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_AUTHENTICATE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_AUTHENTICATE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTHENTICATE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAuthenticateInd_Evt *evt = (MlmeAuthenticateInd_Evt*) CsrPmalloc(sizeof(MlmeAuthenticateInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->authenticationType = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_AUTHENTICATE_IND_ID); \
    } \
}

/* -------------------------- mlme_authenticate_cfm -------------------------- */
typedef struct MlmeAuthenticateCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    AuthenticationType              authenticationType;
    ResultCode                      resultCode;
} MlmeAuthenticateCfm_Evt;

#define build_mlme_authenticate_cfm(event, pid, p_informationElements, p_peerStaAddress, p_authenticationType, p_resultCode) \
{ \
    MlmeAuthenticateCfm_Evt *evt = (MlmeAuthenticateCfm_Evt*) CsrPmalloc(sizeof(MlmeAuthenticateCfm_Evt)); \
    evt->common.id            = MLME_AUTHENTICATE_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->authenticationType   = p_authenticationType; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_authenticate_cfm(context, p_informationElements, p_peerStaAddress, p_authenticationType, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_authenticate_cfm(newevt, 0, p_informationElements, p_peerStaAddress, p_authenticationType, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_AUTHENTICATE_CFM_ID); \
}

#define send_mlme_authenticate_cfm_external(context, pid, p_informationElements, p_peerStaAddress, p_authenticationType, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_authenticate_cfm(newevt, pid, p_informationElements, p_peerStaAddress, p_authenticationType, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_AUTHENTICATE_CFM_ID); \
}

#define send_mlme_authenticate_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_AUTHENTICATE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_AUTHENTICATE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_AUTHENTICATE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTHENTICATE_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAuthenticateCfm_Evt *evt = (MlmeAuthenticateCfm_Evt*) CsrPmalloc(sizeof(MlmeAuthenticateCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->authenticationType = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_AUTHENTICATE_CFM_ID); \
    } \
}

/* -------------------------- mlme_autonomous_scan_ind -------------------------- */
typedef struct MlmeAutonomousScanInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    AutonomousScanId                autonomousScanId;
    BssType                         bssType;
    unifi_MACAddress                bssid;
    TimeUnits                       beaconPeriod;
    TsfTime                         timestamp;
    TsfTime                         localTime;
    ChannelNumber                   channel;
    Megahertz                       channelFrequency;
    CapabilityInformation           capabilityInformation;
    Decibels                        rssi;
    Decibels                        snr;
    ReportedFrame                   reportedFrameInformation;
    Rcpi                            rcpiMeasurement;
    Rsni                            rsniMeasurement;
} MlmeAutonomousScanInd_Evt;

#define build_mlme_autonomous_scan_ind(event, pid, p_informationElements, p_autonomousScanId, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement) \
{ \
    MlmeAutonomousScanInd_Evt *evt = (MlmeAutonomousScanInd_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanInd_Evt)); \
    evt->common.id            = MLME_AUTONOMOUS_SCAN_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->autonomousScanId     = p_autonomousScanId; \
    evt->bssType              = p_bssType; \
    evt->bssid                = p_bssid; \
    evt->beaconPeriod         = p_beaconPeriod; \
    evt->timestamp            = p_timestamp; \
    evt->localTime            = p_localTime; \
    evt->channel              = p_channel; \
    evt->channelFrequency     = p_channelFrequency; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->rssi                 = p_rssi; \
    evt->snr                  = p_snr; \
    evt->reportedFrameInformation = p_reportedFrameInformation; \
    evt->rcpiMeasurement      = p_rcpiMeasurement; \
    evt->rsniMeasurement      = p_rsniMeasurement; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_autonomous_scan_ind(context, p_informationElements, p_autonomousScanId, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_ind(newevt, 0, p_informationElements, p_autonomousScanId, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement); \
    fsm_send_event((context), newevt, pid, MLME_AUTONOMOUS_SCAN_IND_ID); \
}

#define send_mlme_autonomous_scan_ind_external(context, pid, p_informationElements, p_autonomousScanId, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_ind(newevt, pid, p_informationElements, p_autonomousScanId, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement); \
    fsm_send_event_external((context), newevt, pid, MLME_AUTONOMOUS_SCAN_IND_ID); \
}

#define send_mlme_autonomous_scan_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_AUTONOMOUS_SCAN_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_AUTONOMOUS_SCAN_IND Size %d bytes .... Should be %d", packedEventSize, MLME_AUTONOMOUS_SCAN_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAutonomousScanInd_Evt *evt = (MlmeAutonomousScanInd_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        evt->bssType = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->bssid, 6); \
        evt->beaconPeriod = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->timestamp, 8); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->localTime, 8); \
        evt->channel = event_unpack_CsrUint16(&buffer); \
        evt->channelFrequency = event_unpack_CsrUint16(&buffer); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->rssi = event_unpack_CsrInt16(&buffer); \
        evt->snr = event_unpack_CsrInt16(&buffer); \
        evt->reportedFrameInformation = event_unpack_CsrUint16(&buffer); \
        evt->rcpiMeasurement = event_unpack_CsrUint16(&buffer); \
        evt->rsniMeasurement = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_AUTONOMOUS_SCAN_IND_ID); \
    } \
}

/* -------------------------- mlme_autonomous_scan_done_ind -------------------------- */
typedef struct MlmeAutonomousScanDoneInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    AutonomousScanId                autonomousScanId;
} MlmeAutonomousScanDoneInd_Evt;

#define build_mlme_autonomous_scan_done_ind(event, pid, p_resultCode, p_autonomousScanId) \
{ \
    MlmeAutonomousScanDoneInd_Evt *evt = (MlmeAutonomousScanDoneInd_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanDoneInd_Evt)); \
    evt->common.id            = MLME_AUTONOMOUS_SCAN_DONE_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_autonomous_scan_done_ind(context, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_done_ind(newevt, 0, p_resultCode, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_AUTONOMOUS_SCAN_DONE_IND_ID); \
}

#define send_mlme_autonomous_scan_done_ind_external(context, pid, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_done_ind(newevt, pid, p_resultCode, p_autonomousScanId); \
    fsm_send_event_external((context), newevt, pid, MLME_AUTONOMOUS_SCAN_DONE_IND_ID); \
}

#define send_mlme_autonomous_scan_done_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_AUTONOMOUS_SCAN_DONE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_AUTONOMOUS_SCAN_DONE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_AUTONOMOUS_SCAN_DONE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_DONE_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_DONE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAutonomousScanDoneInd_Evt *evt = (MlmeAutonomousScanDoneInd_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanDoneInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_AUTONOMOUS_SCAN_DONE_IND_ID); \
    } \
}

/* -------------------------- mlme_autonomous_scan_results_ind -------------------------- */
typedef struct MlmeAutonomousScanResultsInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    AutonomousScanId                autonomousScanId;
    unifi_MACAddress                bssid;
    ChannelNumber                   channel;
    Megahertz                       channelFrequency;
    Decibels                        rssi;
    Decibels                        snr;
} MlmeAutonomousScanResultsInd_Evt;

#define build_mlme_autonomous_scan_results_ind(event, pid, p_autonomousScanId, p_bssid, p_channel, p_channelFrequency, p_rssi, p_snr) \
{ \
    MlmeAutonomousScanResultsInd_Evt *evt = (MlmeAutonomousScanResultsInd_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanResultsInd_Evt)); \
    evt->common.id            = MLME_AUTONOMOUS_SCAN_RESULTS_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->autonomousScanId     = p_autonomousScanId; \
    evt->bssid                = p_bssid; \
    evt->channel              = p_channel; \
    evt->channelFrequency     = p_channelFrequency; \
    evt->rssi                 = p_rssi; \
    evt->snr                  = p_snr; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_autonomous_scan_results_ind(context, p_autonomousScanId, p_bssid, p_channel, p_channelFrequency, p_rssi, p_snr) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_results_ind(newevt, 0, p_autonomousScanId, p_bssid, p_channel, p_channelFrequency, p_rssi, p_snr); \
    fsm_send_event((context), newevt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_IND_ID); \
}

#define send_mlme_autonomous_scan_results_ind_external(context, pid, p_autonomousScanId, p_bssid, p_channel, p_channelFrequency, p_rssi, p_snr) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_results_ind(newevt, pid, p_autonomousScanId, p_bssid, p_channel, p_channelFrequency, p_rssi, p_snr); \
    fsm_send_event_external((context), newevt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_IND_ID); \
}

#define send_mlme_autonomous_scan_results_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_AUTONOMOUS_SCAN_RESULTS_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_AUTONOMOUS_SCAN_RESULTS_IND Size %d bytes .... Should be %d", packedEventSize, MLME_AUTONOMOUS_SCAN_RESULTS_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_RESULTS_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_RESULTS_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAutonomousScanResultsInd_Evt *evt = (MlmeAutonomousScanResultsInd_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanResultsInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->bssid, 6); \
        evt->channel = event_unpack_CsrUint16(&buffer); \
        evt->channelFrequency = event_unpack_CsrUint16(&buffer); \
        evt->rssi = event_unpack_CsrInt16(&buffer); \
        evt->snr = event_unpack_CsrInt16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_IND_ID); \
    } \
}

/* -------------------------- mlme_autonomous_scan_results_cfm -------------------------- */
typedef struct MlmeAutonomousScanResultsCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    AutonomousScanId                autonomousScanId;
} MlmeAutonomousScanResultsCfm_Evt;

#define build_mlme_autonomous_scan_results_cfm(event, pid, p_resultCode, p_autonomousScanId) \
{ \
    MlmeAutonomousScanResultsCfm_Evt *evt = (MlmeAutonomousScanResultsCfm_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanResultsCfm_Evt)); \
    evt->common.id            = MLME_AUTONOMOUS_SCAN_RESULTS_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_autonomous_scan_results_cfm(context, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_results_cfm(newevt, 0, p_resultCode, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_CFM_ID); \
}

#define send_mlme_autonomous_scan_results_cfm_external(context, pid, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_results_cfm(newevt, pid, p_resultCode, p_autonomousScanId); \
    fsm_send_event_external((context), newevt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_CFM_ID); \
}

#define send_mlme_autonomous_scan_results_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_AUTONOMOUS_SCAN_RESULTS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_AUTONOMOUS_SCAN_RESULTS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_AUTONOMOUS_SCAN_RESULTS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_RESULTS_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_AUTONOMOUS_SCAN_RESULTS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeAutonomousScanResultsCfm_Evt *evt = (MlmeAutonomousScanResultsCfm_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanResultsCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_CFM_ID); \
    } \
}

/* -------------------------- mlme_channelswitch_ind -------------------------- */
typedef struct MlmeChannelswitchInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    ChannelSwitchMode               mode;
    ChannelNumber                   channelNumber;
    ChannelOffset                   secondaryChannelOffset;
    BeaconPeriods                   channelSwitchCount;
} MlmeChannelswitchInd_Evt;

#define build_mlme_channelswitch_ind(event, pid, p_informationElements, p_peerMacAddress, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    MlmeChannelswitchInd_Evt *evt = (MlmeChannelswitchInd_Evt*) CsrPmalloc(sizeof(MlmeChannelswitchInd_Evt)); \
    evt->common.id            = MLME_CHANNELSWITCH_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->mode                 = p_mode; \
    evt->channelNumber        = p_channelNumber; \
    evt->secondaryChannelOffset = p_secondaryChannelOffset; \
    evt->channelSwitchCount   = p_channelSwitchCount; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_channelswitch_ind(context, p_informationElements, p_peerMacAddress, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    FsmEvent *newevt; \
    build_mlme_channelswitch_ind(newevt, 0, p_informationElements, p_peerMacAddress, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount); \
    fsm_send_event((context), newevt, pid, MLME_CHANNELSWITCH_IND_ID); \
}

#define send_mlme_channelswitch_ind_external(context, pid, p_informationElements, p_peerMacAddress, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    FsmEvent *newevt; \
    build_mlme_channelswitch_ind(newevt, pid, p_informationElements, p_peerMacAddress, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount); \
    fsm_send_event_external((context), newevt, pid, MLME_CHANNELSWITCH_IND_ID); \
}

#define send_mlme_channelswitch_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_CHANNELSWITCH_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_CHANNELSWITCH_IND Size %d bytes .... Should be %d", packedEventSize, MLME_CHANNELSWITCH_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_CHANNELSWITCH_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeChannelswitchInd_Evt *evt = (MlmeChannelswitchInd_Evt*) CsrPmalloc(sizeof(MlmeChannelswitchInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->mode = event_unpack_CsrUint16(&buffer); \
        evt->channelNumber = event_unpack_CsrUint16(&buffer); \
        evt->secondaryChannelOffset = event_unpack_CsrUint16(&buffer); \
        evt->channelSwitchCount = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_CHANNELSWITCH_IND_ID); \
    } \
}

/* -------------------------- mlme_channelswitch_cfm -------------------------- */
typedef struct MlmeChannelswitchCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeChannelswitchCfm_Evt;

#define build_mlme_channelswitch_cfm(event, pid, p_resultCode) \
{ \
    MlmeChannelswitchCfm_Evt *evt = (MlmeChannelswitchCfm_Evt*) CsrPmalloc(sizeof(MlmeChannelswitchCfm_Evt)); \
    evt->common.id            = MLME_CHANNELSWITCH_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_channelswitch_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_channelswitch_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_CHANNELSWITCH_CFM_ID); \
}

#define send_mlme_channelswitch_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_channelswitch_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_CHANNELSWITCH_CFM_ID); \
}

#define send_mlme_channelswitch_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_CHANNELSWITCH_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_CHANNELSWITCH_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_CHANNELSWITCH_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_CHANNELSWITCH_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_CHANNELSWITCH_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeChannelswitchCfm_Evt *evt = (MlmeChannelswitchCfm_Evt*) CsrPmalloc(sizeof(MlmeChannelswitchCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_CHANNELSWITCH_CFM_ID); \
    } \
}

/* -------------------------- mlme_connected_ind -------------------------- */
typedef struct MlmeConnectedInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ConnectionStatus                connectionStatus;
    unifi_MACAddress                peerMacAddress;
} MlmeConnectedInd_Evt;

#define build_mlme_connected_ind(event, pid, p_connectionStatus, p_peerMacAddress) \
{ \
    MlmeConnectedInd_Evt *evt = (MlmeConnectedInd_Evt*) CsrPmalloc(sizeof(MlmeConnectedInd_Evt)); \
    evt->common.id            = MLME_CONNECTED_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->connectionStatus     = p_connectionStatus; \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_connected_ind(context, p_connectionStatus, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_connected_ind(newevt, 0, p_connectionStatus, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_CONNECTED_IND_ID); \
}

#define send_mlme_connected_ind_external(context, pid, p_connectionStatus, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_connected_ind(newevt, pid, p_connectionStatus, p_peerMacAddress); \
    fsm_send_event_external((context), newevt, pid, MLME_CONNECTED_IND_ID); \
}

#define send_mlme_connected_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_CONNECTED_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_CONNECTED_IND Size %d bytes .... Should be %d", packedEventSize, MLME_CONNECTED_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_CONNECTED_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_CONNECTED_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeConnectedInd_Evt *evt = (MlmeConnectedInd_Evt*) CsrPmalloc(sizeof(MlmeConnectedInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->connectionStatus = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_CONNECTED_IND_ID); \
    } \
}

/* -------------------------- mlme_deauthenticate_ind -------------------------- */
typedef struct MlmeDeauthenticateInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ReasonCode                      reasonCode;
} MlmeDeauthenticateInd_Evt;

#define build_mlme_deauthenticate_ind(event, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    MlmeDeauthenticateInd_Evt *evt = (MlmeDeauthenticateInd_Evt*) CsrPmalloc(sizeof(MlmeDeauthenticateInd_Evt)); \
    evt->common.id            = MLME_DEAUTHENTICATE_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_deauthenticate_ind(context, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deauthenticate_ind(newevt, 0, p_informationElements, p_peerStaAddress, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DEAUTHENTICATE_IND_ID); \
}

#define send_mlme_deauthenticate_ind_external(context, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deauthenticate_ind(newevt, pid, p_informationElements, p_peerStaAddress, p_reasonCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DEAUTHENTICATE_IND_ID); \
}

#define send_mlme_deauthenticate_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEAUTHENTICATE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEAUTHENTICATE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_DEAUTHENTICATE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEAUTHENTICATE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDeauthenticateInd_Evt *evt = (MlmeDeauthenticateInd_Evt*) CsrPmalloc(sizeof(MlmeDeauthenticateInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->reasonCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEAUTHENTICATE_IND_ID); \
    } \
}

/* -------------------------- mlme_deauthenticate_cfm -------------------------- */
typedef struct MlmeDeauthenticateCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ResultCode                      resultCode;
} MlmeDeauthenticateCfm_Evt;

#define build_mlme_deauthenticate_cfm(event, pid, p_peerStaAddress, p_resultCode) \
{ \
    MlmeDeauthenticateCfm_Evt *evt = (MlmeDeauthenticateCfm_Evt*) CsrPmalloc(sizeof(MlmeDeauthenticateCfm_Evt)); \
    evt->common.id            = MLME_DEAUTHENTICATE_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_deauthenticate_cfm(context, p_peerStaAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deauthenticate_cfm(newevt, 0, p_peerStaAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DEAUTHENTICATE_CFM_ID); \
}

#define send_mlme_deauthenticate_cfm_external(context, pid, p_peerStaAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deauthenticate_cfm(newevt, pid, p_peerStaAddress, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DEAUTHENTICATE_CFM_ID); \
}

#define send_mlme_deauthenticate_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEAUTHENTICATE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEAUTHENTICATE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEAUTHENTICATE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEAUTHENTICATE_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEAUTHENTICATE_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDeauthenticateCfm_Evt *evt = (MlmeDeauthenticateCfm_Evt*) CsrPmalloc(sizeof(MlmeDeauthenticateCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEAUTHENTICATE_CFM_ID); \
    } \
}

/* -------------------------- mlme_delba_ind -------------------------- */
typedef struct MlmeDelbaInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    Initiator                       direction;
    Priority                        tid;
    ReasonCode                      reasonCode;
} MlmeDelbaInd_Evt;

#define build_mlme_delba_ind(event, pid, p_peerQstaAddress, p_direction, p_tid, p_reasonCode) \
{ \
    MlmeDelbaInd_Evt *evt = (MlmeDelbaInd_Evt*) CsrPmalloc(sizeof(MlmeDelbaInd_Evt)); \
    evt->common.id            = MLME_DELBA_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->direction            = p_direction; \
    evt->tid                  = p_tid; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_delba_ind(context, p_peerQstaAddress, p_direction, p_tid, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delba_ind(newevt, 0, p_peerQstaAddress, p_direction, p_tid, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DELBA_IND_ID); \
}

#define send_mlme_delba_ind_external(context, pid, p_peerQstaAddress, p_direction, p_tid, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delba_ind(newevt, pid, p_peerQstaAddress, p_direction, p_tid, p_reasonCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DELBA_IND_ID); \
}

#define send_mlme_delba_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DELBA_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DELBA_IND Size %d bytes .... Should be %d", packedEventSize, MLME_DELBA_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELBA_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELBA_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelbaInd_Evt *evt = (MlmeDelbaInd_Evt*) CsrPmalloc(sizeof(MlmeDelbaInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerQstaAddress, 6); \
        evt->direction = event_unpack_CsrUint16(&buffer); \
        evt->tid = event_unpack_CsrUint16(&buffer); \
        evt->reasonCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DELBA_IND_ID); \
    } \
}

/* -------------------------- mlme_delba_cfm -------------------------- */
typedef struct MlmeDelbaCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    Initiator                       direction;
    Priority                        tid;
    ResultCode                      resultCode;
} MlmeDelbaCfm_Evt;

#define build_mlme_delba_cfm(event, pid, p_peerQstaAddress, p_direction, p_tid, p_resultCode) \
{ \
    MlmeDelbaCfm_Evt *evt = (MlmeDelbaCfm_Evt*) CsrPmalloc(sizeof(MlmeDelbaCfm_Evt)); \
    evt->common.id            = MLME_DELBA_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->direction            = p_direction; \
    evt->tid                  = p_tid; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_delba_cfm(context, p_peerQstaAddress, p_direction, p_tid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delba_cfm(newevt, 0, p_peerQstaAddress, p_direction, p_tid, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DELBA_CFM_ID); \
}

#define send_mlme_delba_cfm_external(context, pid, p_peerQstaAddress, p_direction, p_tid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delba_cfm(newevt, pid, p_peerQstaAddress, p_direction, p_tid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DELBA_CFM_ID); \
}

#define send_mlme_delba_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DELBA_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DELBA_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DELBA_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELBA_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELBA_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelbaCfm_Evt *evt = (MlmeDelbaCfm_Evt*) CsrPmalloc(sizeof(MlmeDelbaCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerQstaAddress, 6); \
        evt->direction = event_unpack_CsrUint16(&buffer); \
        evt->tid = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DELBA_CFM_ID); \
    } \
}

/* -------------------------- mlme_deletekeys_cfm -------------------------- */
typedef struct MlmeDeletekeysCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeDeletekeysCfm_Evt;

#define build_mlme_deletekeys_cfm(event, pid, p_resultCode) \
{ \
    MlmeDeletekeysCfm_Evt *evt = (MlmeDeletekeysCfm_Evt*) CsrPmalloc(sizeof(MlmeDeletekeysCfm_Evt)); \
    evt->common.id            = MLME_DELETEKEYS_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_deletekeys_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deletekeys_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DELETEKEYS_CFM_ID); \
}

#define send_mlme_deletekeys_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deletekeys_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DELETEKEYS_CFM_ID); \
}

#define send_mlme_deletekeys_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DELETEKEYS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DELETEKEYS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DELETEKEYS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELETEKEYS_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELETEKEYS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDeletekeysCfm_Evt *evt = (MlmeDeletekeysCfm_Evt*) CsrPmalloc(sizeof(MlmeDeletekeysCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DELETEKEYS_CFM_ID); \
    } \
}

/* -------------------------- mlme_delts_ind -------------------------- */
typedef struct MlmeDeltsInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                nonApqstaAddress;
    TsInfo                          tsInfo;
    ReasonCode                      reasonCode;
} MlmeDeltsInd_Evt;

#define build_mlme_delts_ind(event, pid, p_nonApqstaAddress, p_tsInfo, p_reasonCode) \
{ \
    MlmeDeltsInd_Evt *evt = (MlmeDeltsInd_Evt*) CsrPmalloc(sizeof(MlmeDeltsInd_Evt)); \
    evt->common.id            = MLME_DELTS_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->nonApqstaAddress     = p_nonApqstaAddress; \
    evt->tsInfo               = p_tsInfo; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_delts_ind(context, p_nonApqstaAddress, p_tsInfo, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delts_ind(newevt, 0, p_nonApqstaAddress, p_tsInfo, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DELTS_IND_ID); \
}

#define send_mlme_delts_ind_external(context, pid, p_nonApqstaAddress, p_tsInfo, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delts_ind(newevt, pid, p_nonApqstaAddress, p_tsInfo, p_reasonCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DELTS_IND_ID); \
}

#define send_mlme_delts_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DELTS_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DELTS_IND Size %d bytes .... Should be %d", packedEventSize, MLME_DELTS_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELTS_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELTS_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDeltsInd_Evt *evt = (MlmeDeltsInd_Evt*) CsrPmalloc(sizeof(MlmeDeltsInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->nonApqstaAddress, 6); \
        evt->tsInfo = event_unpack_CsrUint32(&buffer); \
        evt->reasonCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DELTS_IND_ID); \
    } \
}

/* -------------------------- mlme_delts_cfm -------------------------- */
typedef struct MlmeDeltsCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    unifi_MACAddress                nonApqstaAddress;
    TsInfo                          tsInfo;
} MlmeDeltsCfm_Evt;

#define build_mlme_delts_cfm(event, pid, p_resultCode, p_nonApqstaAddress, p_tsInfo) \
{ \
    MlmeDeltsCfm_Evt *evt = (MlmeDeltsCfm_Evt*) CsrPmalloc(sizeof(MlmeDeltsCfm_Evt)); \
    evt->common.id            = MLME_DELTS_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->nonApqstaAddress     = p_nonApqstaAddress; \
    evt->tsInfo               = p_tsInfo; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_delts_cfm(context, p_resultCode, p_nonApqstaAddress, p_tsInfo) \
{ \
    FsmEvent *newevt; \
    build_mlme_delts_cfm(newevt, 0, p_resultCode, p_nonApqstaAddress, p_tsInfo); \
    fsm_send_event((context), newevt, pid, MLME_DELTS_CFM_ID); \
}

#define send_mlme_delts_cfm_external(context, pid, p_resultCode, p_nonApqstaAddress, p_tsInfo) \
{ \
    FsmEvent *newevt; \
    build_mlme_delts_cfm(newevt, pid, p_resultCode, p_nonApqstaAddress, p_tsInfo); \
    fsm_send_event_external((context), newevt, pid, MLME_DELTS_CFM_ID); \
}

#define send_mlme_delts_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DELTS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DELTS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DELTS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELTS_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DELTS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDeltsCfm_Evt *evt = (MlmeDeltsCfm_Evt*) CsrPmalloc(sizeof(MlmeDeltsCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->nonApqstaAddress, 6); \
        evt->tsInfo = event_unpack_CsrUint32(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DELTS_CFM_ID); \
    } \
}

/* -------------------------- mlme_del_autonomous_scan_cfm -------------------------- */
typedef struct MlmeDelAutonomousScanCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    AutonomousScanId                autonomousScanId;
} MlmeDelAutonomousScanCfm_Evt;

#define build_mlme_del_autonomous_scan_cfm(event, pid, p_resultCode, p_autonomousScanId) \
{ \
    MlmeDelAutonomousScanCfm_Evt *evt = (MlmeDelAutonomousScanCfm_Evt*) CsrPmalloc(sizeof(MlmeDelAutonomousScanCfm_Evt)); \
    evt->common.id            = MLME_DEL_AUTONOMOUS_SCAN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_autonomous_scan_cfm(context, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_autonomous_scan_cfm(newevt, 0, p_resultCode, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_AUTONOMOUS_SCAN_CFM_ID); \
}

#define send_mlme_del_autonomous_scan_cfm_external(context, pid, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_autonomous_scan_cfm(newevt, pid, p_resultCode, p_autonomousScanId); \
    fsm_send_event_external((context), newevt, pid, MLME_DEL_AUTONOMOUS_SCAN_CFM_ID); \
}

#define send_mlme_del_autonomous_scan_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEL_AUTONOMOUS_SCAN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEL_AUTONOMOUS_SCAN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEL_AUTONOMOUS_SCAN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_AUTONOMOUS_SCAN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_AUTONOMOUS_SCAN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelAutonomousScanCfm_Evt *evt = (MlmeDelAutonomousScanCfm_Evt*) CsrPmalloc(sizeof(MlmeDelAutonomousScanCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEL_AUTONOMOUS_SCAN_CFM_ID); \
    } \
}

/* -------------------------- mlme_del_blackout_cfm -------------------------- */
typedef struct MlmeDelBlackoutCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    BlackoutId                      blackoutId;
    ResultCode                      resultCode;
} MlmeDelBlackoutCfm_Evt;

#define build_mlme_del_blackout_cfm(event, pid, p_blackoutId, p_resultCode) \
{ \
    MlmeDelBlackoutCfm_Evt *evt = (MlmeDelBlackoutCfm_Evt*) CsrPmalloc(sizeof(MlmeDelBlackoutCfm_Evt)); \
    evt->common.id            = MLME_DEL_BLACKOUT_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->blackoutId           = p_blackoutId; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_blackout_cfm(context, p_blackoutId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_blackout_cfm(newevt, 0, p_blackoutId, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DEL_BLACKOUT_CFM_ID); \
}

#define send_mlme_del_blackout_cfm_external(context, pid, p_blackoutId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_blackout_cfm(newevt, pid, p_blackoutId, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DEL_BLACKOUT_CFM_ID); \
}

#define send_mlme_del_blackout_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEL_BLACKOUT_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEL_BLACKOUT_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEL_BLACKOUT_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_BLACKOUT_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_BLACKOUT_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelBlackoutCfm_Evt *evt = (MlmeDelBlackoutCfm_Evt*) CsrPmalloc(sizeof(MlmeDelBlackoutCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->blackoutId = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEL_BLACKOUT_CFM_ID); \
    } \
}

/* -------------------------- mlme_del_periodic_cfm -------------------------- */
typedef struct MlmeDelPeriodicCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    PeriodicId                      periodicId;
    ResultCode                      resultCode;
} MlmeDelPeriodicCfm_Evt;

#define build_mlme_del_periodic_cfm(event, pid, p_periodicId, p_resultCode) \
{ \
    MlmeDelPeriodicCfm_Evt *evt = (MlmeDelPeriodicCfm_Evt*) CsrPmalloc(sizeof(MlmeDelPeriodicCfm_Evt)); \
    evt->common.id            = MLME_DEL_PERIODIC_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->periodicId           = p_periodicId; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_periodic_cfm(context, p_periodicId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_periodic_cfm(newevt, 0, p_periodicId, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DEL_PERIODIC_CFM_ID); \
}

#define send_mlme_del_periodic_cfm_external(context, pid, p_periodicId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_periodic_cfm(newevt, pid, p_periodicId, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DEL_PERIODIC_CFM_ID); \
}

#define send_mlme_del_periodic_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEL_PERIODIC_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEL_PERIODIC_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEL_PERIODIC_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_PERIODIC_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_PERIODIC_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelPeriodicCfm_Evt *evt = (MlmeDelPeriodicCfm_Evt*) CsrPmalloc(sizeof(MlmeDelPeriodicCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->periodicId = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEL_PERIODIC_CFM_ID); \
    } \
}

/* -------------------------- mlme_del_rx_trigger_cfm -------------------------- */
typedef struct MlmeDelRxTriggerCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    TriggerId                       triggerId;
    ResultCode                      resultCode;
} MlmeDelRxTriggerCfm_Evt;

#define build_mlme_del_rx_trigger_cfm(event, pid, p_triggerId, p_resultCode) \
{ \
    MlmeDelRxTriggerCfm_Evt *evt = (MlmeDelRxTriggerCfm_Evt*) CsrPmalloc(sizeof(MlmeDelRxTriggerCfm_Evt)); \
    evt->common.id            = MLME_DEL_RX_TRIGGER_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->triggerId            = p_triggerId; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_rx_trigger_cfm(context, p_triggerId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_rx_trigger_cfm(newevt, 0, p_triggerId, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DEL_RX_TRIGGER_CFM_ID); \
}

#define send_mlme_del_rx_trigger_cfm_external(context, pid, p_triggerId, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_rx_trigger_cfm(newevt, pid, p_triggerId, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DEL_RX_TRIGGER_CFM_ID); \
}

#define send_mlme_del_rx_trigger_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEL_RX_TRIGGER_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEL_RX_TRIGGER_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEL_RX_TRIGGER_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_RX_TRIGGER_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_RX_TRIGGER_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelRxTriggerCfm_Evt *evt = (MlmeDelRxTriggerCfm_Evt*) CsrPmalloc(sizeof(MlmeDelRxTriggerCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->triggerId = event_unpack_CsrUint16(&buffer); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEL_RX_TRIGGER_CFM_ID); \
    } \
}

/* -------------------------- mlme_del_triggered_get_cfm -------------------------- */
typedef struct MlmeDelTriggeredGetCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    TriggeredId                     triggeredId;
} MlmeDelTriggeredGetCfm_Evt;

#define build_mlme_del_triggered_get_cfm(event, pid, p_resultCode, p_triggeredId) \
{ \
    MlmeDelTriggeredGetCfm_Evt *evt = (MlmeDelTriggeredGetCfm_Evt*) CsrPmalloc(sizeof(MlmeDelTriggeredGetCfm_Evt)); \
    evt->common.id            = MLME_DEL_TRIGGERED_GET_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->triggeredId          = p_triggeredId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_triggered_get_cfm(context, p_resultCode, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_triggered_get_cfm(newevt, 0, p_resultCode, p_triggeredId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_TRIGGERED_GET_CFM_ID); \
}

#define send_mlme_del_triggered_get_cfm_external(context, pid, p_resultCode, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_triggered_get_cfm(newevt, pid, p_resultCode, p_triggeredId); \
    fsm_send_event_external((context), newevt, pid, MLME_DEL_TRIGGERED_GET_CFM_ID); \
}

#define send_mlme_del_triggered_get_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEL_TRIGGERED_GET_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEL_TRIGGERED_GET_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEL_TRIGGERED_GET_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_TRIGGERED_GET_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_TRIGGERED_GET_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelTriggeredGetCfm_Evt *evt = (MlmeDelTriggeredGetCfm_Evt*) CsrPmalloc(sizeof(MlmeDelTriggeredGetCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->triggeredId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEL_TRIGGERED_GET_CFM_ID); \
    } \
}

/* -------------------------- mlme_del_wds_cfm -------------------------- */
typedef struct MlmeDelWdsCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeDelWdsCfm_Evt;

#define build_mlme_del_wds_cfm(event, pid, p_resultCode) \
{ \
    MlmeDelWdsCfm_Evt *evt = (MlmeDelWdsCfm_Evt*) CsrPmalloc(sizeof(MlmeDelWdsCfm_Evt)); \
    evt->common.id            = MLME_DEL_WDS_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_wds_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_wds_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DEL_WDS_CFM_ID); \
}

#define send_mlme_del_wds_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_wds_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DEL_WDS_CFM_ID); \
}

#define send_mlme_del_wds_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DEL_WDS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DEL_WDS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DEL_WDS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_WDS_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DEL_WDS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDelWdsCfm_Evt *evt = (MlmeDelWdsCfm_Evt*) CsrPmalloc(sizeof(MlmeDelWdsCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DEL_WDS_CFM_ID); \
    } \
}

/* -------------------------- mlme_disassociate_ind -------------------------- */
typedef struct MlmeDisassociateInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ReasonCode                      reasonCode;
} MlmeDisassociateInd_Evt;

#define build_mlme_disassociate_ind(event, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    MlmeDisassociateInd_Evt *evt = (MlmeDisassociateInd_Evt*) CsrPmalloc(sizeof(MlmeDisassociateInd_Evt)); \
    evt->common.id            = MLME_DISASSOCIATE_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_disassociate_ind(context, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_disassociate_ind(newevt, 0, p_informationElements, p_peerStaAddress, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DISASSOCIATE_IND_ID); \
}

#define send_mlme_disassociate_ind_external(context, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_disassociate_ind(newevt, pid, p_informationElements, p_peerStaAddress, p_reasonCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DISASSOCIATE_IND_ID); \
}

#define send_mlme_disassociate_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DISASSOCIATE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DISASSOCIATE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_DISASSOCIATE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DISASSOCIATE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDisassociateInd_Evt *evt = (MlmeDisassociateInd_Evt*) CsrPmalloc(sizeof(MlmeDisassociateInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->reasonCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DISASSOCIATE_IND_ID); \
    } \
}

/* -------------------------- mlme_disassociate_cfm -------------------------- */
typedef struct MlmeDisassociateCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeDisassociateCfm_Evt;

#define build_mlme_disassociate_cfm(event, pid, p_resultCode) \
{ \
    MlmeDisassociateCfm_Evt *evt = (MlmeDisassociateCfm_Evt*) CsrPmalloc(sizeof(MlmeDisassociateCfm_Evt)); \
    evt->common.id            = MLME_DISASSOCIATE_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_disassociate_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_disassociate_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DISASSOCIATE_CFM_ID); \
}

#define send_mlme_disassociate_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_disassociate_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DISASSOCIATE_CFM_ID); \
}

#define send_mlme_disassociate_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DISASSOCIATE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DISASSOCIATE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DISASSOCIATE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DISASSOCIATE_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DISASSOCIATE_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDisassociateCfm_Evt *evt = (MlmeDisassociateCfm_Evt*) CsrPmalloc(sizeof(MlmeDisassociateCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DISASSOCIATE_CFM_ID); \
    } \
}

/* -------------------------- mlme_dls_ind -------------------------- */
typedef struct MlmeDlsInd_Evt
{
    FsmEvent                        common;
    DataReference                   supportedRates;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    CapabilityInformation           capabilityInformation;
    Seconds                         dlsTimeoutValue;
    TimeUnits                       dlsResponseTimeout;
} MlmeDlsInd_Evt;

#define build_mlme_dls_ind(event, pid, p_supportedRates, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout) \
{ \
    MlmeDlsInd_Evt *evt = (MlmeDlsInd_Evt*) CsrPmalloc(sizeof(MlmeDlsInd_Evt)); \
    evt->common.id            = MLME_DLS_IND_ID; \
    evt->common.destination   = pid; \
    evt->supportedRates       = p_supportedRates; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->dlsTimeoutValue      = p_dlsTimeoutValue; \
    evt->dlsResponseTimeout   = p_dlsResponseTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_dls_ind(context, p_supportedRates, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_dls_ind(newevt, 0, p_supportedRates, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout); \
    fsm_send_event((context), newevt, pid, MLME_DLS_IND_ID); \
}

#define send_mlme_dls_ind_external(context, pid, p_supportedRates, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_dls_ind(newevt, pid, p_supportedRates, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout); \
    fsm_send_event_external((context), newevt, pid, MLME_DLS_IND_ID); \
}

#define send_mlme_dls_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DLS_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DLS_IND Size %d bytes .... Should be %d", packedEventSize, MLME_DLS_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DLS_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDlsInd_Evt *evt = (MlmeDlsInd_Evt*) CsrPmalloc(sizeof(MlmeDlsInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->supportedRates = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->dlsTimeoutValue = event_unpack_CsrUint16(&buffer); \
        evt->dlsResponseTimeout = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DLS_IND_ID); \
    } \
}

/* -------------------------- mlme_dls_cfm -------------------------- */
typedef struct MlmeDlsCfm_Evt
{
    FsmEvent                        common;
    DataReference                   supportedRates;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    ResultCode                      resultCode;
    CapabilityInformation           capabilityInformation;
    Seconds                         dlsTimeoutValue;
} MlmeDlsCfm_Evt;

#define build_mlme_dls_cfm(event, pid, p_supportedRates, p_peerMacAddress, p_resultCode, p_capabilityInformation, p_dlsTimeoutValue) \
{ \
    MlmeDlsCfm_Evt *evt = (MlmeDlsCfm_Evt*) CsrPmalloc(sizeof(MlmeDlsCfm_Evt)); \
    evt->common.id            = MLME_DLS_CFM_ID; \
    evt->common.destination   = pid; \
    evt->supportedRates       = p_supportedRates; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->resultCode           = p_resultCode; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->dlsTimeoutValue      = p_dlsTimeoutValue; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_dls_cfm(context, p_supportedRates, p_peerMacAddress, p_resultCode, p_capabilityInformation, p_dlsTimeoutValue) \
{ \
    FsmEvent *newevt; \
    build_mlme_dls_cfm(newevt, 0, p_supportedRates, p_peerMacAddress, p_resultCode, p_capabilityInformation, p_dlsTimeoutValue); \
    fsm_send_event((context), newevt, pid, MLME_DLS_CFM_ID); \
}

#define send_mlme_dls_cfm_external(context, pid, p_supportedRates, p_peerMacAddress, p_resultCode, p_capabilityInformation, p_dlsTimeoutValue) \
{ \
    FsmEvent *newevt; \
    build_mlme_dls_cfm(newevt, pid, p_supportedRates, p_peerMacAddress, p_resultCode, p_capabilityInformation, p_dlsTimeoutValue); \
    fsm_send_event_external((context), newevt, pid, MLME_DLS_CFM_ID); \
}

#define send_mlme_dls_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DLS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DLS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DLS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DLS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDlsCfm_Evt *evt = (MlmeDlsCfm_Evt*) CsrPmalloc(sizeof(MlmeDlsCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->supportedRates = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->dlsTimeoutValue = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DLS_CFM_ID); \
    } \
}

/* -------------------------- mlme_dlsteardown_ind -------------------------- */
typedef struct MlmeDlsteardownInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    ReasonCode                      reasonCode;
} MlmeDlsteardownInd_Evt;

#define build_mlme_dlsteardown_ind(event, pid, p_peerMacAddress, p_reasonCode) \
{ \
    MlmeDlsteardownInd_Evt *evt = (MlmeDlsteardownInd_Evt*) CsrPmalloc(sizeof(MlmeDlsteardownInd_Evt)); \
    evt->common.id            = MLME_DLSTEARDOWN_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_dlsteardown_ind(context, p_peerMacAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_dlsteardown_ind(newevt, 0, p_peerMacAddress, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DLSTEARDOWN_IND_ID); \
}

#define send_mlme_dlsteardown_ind_external(context, pid, p_peerMacAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_dlsteardown_ind(newevt, pid, p_peerMacAddress, p_reasonCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DLSTEARDOWN_IND_ID); \
}

#define send_mlme_dlsteardown_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DLSTEARDOWN_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DLSTEARDOWN_IND Size %d bytes .... Should be %d", packedEventSize, MLME_DLSTEARDOWN_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DLSTEARDOWN_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DLSTEARDOWN_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDlsteardownInd_Evt *evt = (MlmeDlsteardownInd_Evt*) CsrPmalloc(sizeof(MlmeDlsteardownInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->reasonCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DLSTEARDOWN_IND_ID); \
    } \
}

/* -------------------------- mlme_dlsteardown_cfm -------------------------- */
typedef struct MlmeDlsteardownCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress1;
    unifi_MACAddress                peerMacAddress2;
    ResultCode                      resultCode;
} MlmeDlsteardownCfm_Evt;

#define build_mlme_dlsteardown_cfm(event, pid, p_peerMacAddress1, p_peerMacAddress2, p_resultCode) \
{ \
    MlmeDlsteardownCfm_Evt *evt = (MlmeDlsteardownCfm_Evt*) CsrPmalloc(sizeof(MlmeDlsteardownCfm_Evt)); \
    evt->common.id            = MLME_DLSTEARDOWN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress1      = p_peerMacAddress1; \
    evt->peerMacAddress2      = p_peerMacAddress2; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_dlsteardown_cfm(context, p_peerMacAddress1, p_peerMacAddress2, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_dlsteardown_cfm(newevt, 0, p_peerMacAddress1, p_peerMacAddress2, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_DLSTEARDOWN_CFM_ID); \
}

#define send_mlme_dlsteardown_cfm_external(context, pid, p_peerMacAddress1, p_peerMacAddress2, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_dlsteardown_cfm(newevt, pid, p_peerMacAddress1, p_peerMacAddress2, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_DLSTEARDOWN_CFM_ID); \
}

#define send_mlme_dlsteardown_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_DLSTEARDOWN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_DLSTEARDOWN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_DLSTEARDOWN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DLSTEARDOWN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_DLSTEARDOWN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeDlsteardownCfm_Evt *evt = (MlmeDlsteardownCfm_Evt*) CsrPmalloc(sizeof(MlmeDlsteardownCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress1, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress2, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_DLSTEARDOWN_CFM_ID); \
    } \
}

/* -------------------------- mlme_eapol_cfm -------------------------- */
typedef struct MlmeEapolCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    Priority                        providedPriority;
    ClientTag                       providedHostTag;
} MlmeEapolCfm_Evt;

#define build_mlme_eapol_cfm(event, pid, p_resultCode, p_providedPriority, p_providedHostTag) \
{ \
    MlmeEapolCfm_Evt *evt = (MlmeEapolCfm_Evt*) CsrPmalloc(sizeof(MlmeEapolCfm_Evt)); \
    evt->common.id            = MLME_EAPOL_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->providedPriority     = p_providedPriority; \
    evt->providedHostTag      = p_providedHostTag; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_eapol_cfm(context, p_resultCode, p_providedPriority, p_providedHostTag) \
{ \
    FsmEvent *newevt; \
    build_mlme_eapol_cfm(newevt, 0, p_resultCode, p_providedPriority, p_providedHostTag); \
    fsm_send_event((context), newevt, pid, MLME_EAPOL_CFM_ID); \
}

#define send_mlme_eapol_cfm_external(context, pid, p_resultCode, p_providedPriority, p_providedHostTag) \
{ \
    FsmEvent *newevt; \
    build_mlme_eapol_cfm(newevt, pid, p_resultCode, p_providedPriority, p_providedHostTag); \
    fsm_send_event_external((context), newevt, pid, MLME_EAPOL_CFM_ID); \
}

#define send_mlme_eapol_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_EAPOL_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_EAPOL_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_EAPOL_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_EAPOL_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_EAPOL_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeEapolCfm_Evt *evt = (MlmeEapolCfm_Evt*) CsrPmalloc(sizeof(MlmeEapolCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->providedPriority = event_unpack_CsrUint16(&buffer); \
        evt->providedHostTag = event_unpack_CsrUint32(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_EAPOL_CFM_ID); \
    } \
}

/* -------------------------- mlme_ft_join_cfm -------------------------- */
typedef struct MlmeFtJoinCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeFtJoinCfm_Evt;

#define build_mlme_ft_join_cfm(event, pid, p_resultCode) \
{ \
    MlmeFtJoinCfm_Evt *evt = (MlmeFtJoinCfm_Evt*) CsrPmalloc(sizeof(MlmeFtJoinCfm_Evt)); \
    evt->common.id            = MLME_FT_JOIN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_ft_join_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_ft_join_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_FT_JOIN_CFM_ID); \
}

#define send_mlme_ft_join_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_ft_join_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_FT_JOIN_CFM_ID); \
}

#define send_mlme_ft_join_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_FT_JOIN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_FT_JOIN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_FT_JOIN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_FT_JOIN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_FT_JOIN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeFtJoinCfm_Evt *evt = (MlmeFtJoinCfm_Evt*) CsrPmalloc(sizeof(MlmeFtJoinCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_FT_JOIN_CFM_ID); \
    } \
}

/* -------------------------- mlme_get_cfm -------------------------- */
typedef struct MlmeGetCfm_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttributeValue;
    DataReference                   dummyDataRef2;
    MibStatus                       status;
    CsrUint16                       errorIndex;
} MlmeGetCfm_Evt;

#define build_mlme_get_cfm(event, pid, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    MlmeGetCfm_Evt *evt = (MlmeGetCfm_Evt*) CsrPmalloc(sizeof(MlmeGetCfm_Evt)); \
    evt->common.id            = MLME_GET_CFM_ID; \
    evt->common.destination   = pid; \
    evt->mibAttributeValue    = p_mibAttributeValue; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->status               = p_status; \
    evt->errorIndex           = p_errorIndex; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_get_cfm(context, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    FsmEvent *newevt; \
    build_mlme_get_cfm(newevt, 0, p_mibAttributeValue, p_status, p_errorIndex); \
    fsm_send_event((context), newevt, pid, MLME_GET_CFM_ID); \
}

#define send_mlme_get_cfm_external(context, pid, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    FsmEvent *newevt; \
    build_mlme_get_cfm(newevt, pid, p_mibAttributeValue, p_status, p_errorIndex); \
    fsm_send_event_external((context), newevt, pid, MLME_GET_CFM_ID); \
}

#define send_mlme_get_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_GET_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_GET_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_GET_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_GET_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeGetCfm_Evt *evt = (MlmeGetCfm_Evt*) CsrPmalloc(sizeof(MlmeGetCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->mibAttributeValue = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->status = event_unpack_CsrUint16(&buffer); \
        evt->errorIndex = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_GET_CFM_ID); \
    } \
}

/* -------------------------- mlme_get_next_cfm -------------------------- */
typedef struct MlmeGetNextCfm_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttributeValue;
    DataReference                   dummyDataRef2;
    MibStatus                       status;
    CsrUint16                       errorIndex;
} MlmeGetNextCfm_Evt;

#define build_mlme_get_next_cfm(event, pid, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    MlmeGetNextCfm_Evt *evt = (MlmeGetNextCfm_Evt*) CsrPmalloc(sizeof(MlmeGetNextCfm_Evt)); \
    evt->common.id            = MLME_GET_NEXT_CFM_ID; \
    evt->common.destination   = pid; \
    evt->mibAttributeValue    = p_mibAttributeValue; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->status               = p_status; \
    evt->errorIndex           = p_errorIndex; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_get_next_cfm(context, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    FsmEvent *newevt; \
    build_mlme_get_next_cfm(newevt, 0, p_mibAttributeValue, p_status, p_errorIndex); \
    fsm_send_event((context), newevt, pid, MLME_GET_NEXT_CFM_ID); \
}

#define send_mlme_get_next_cfm_external(context, pid, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    FsmEvent *newevt; \
    build_mlme_get_next_cfm(newevt, pid, p_mibAttributeValue, p_status, p_errorIndex); \
    fsm_send_event_external((context), newevt, pid, MLME_GET_NEXT_CFM_ID); \
}

#define send_mlme_get_next_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_GET_NEXT_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_GET_NEXT_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_GET_NEXT_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_GET_NEXT_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeGetNextCfm_Evt *evt = (MlmeGetNextCfm_Evt*) CsrPmalloc(sizeof(MlmeGetNextCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->mibAttributeValue = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->status = event_unpack_CsrUint16(&buffer); \
        evt->errorIndex = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_GET_NEXT_CFM_ID); \
    } \
}

/* -------------------------- mlme_hl_sync_ind -------------------------- */
typedef struct MlmeHlSyncInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                groupAddress;
    unifi_MACAddress                sourceAddress;
    SequenceNumber                  sequenceNumber;
} MlmeHlSyncInd_Evt;

#define build_mlme_hl_sync_ind(event, pid, p_groupAddress, p_sourceAddress, p_sequenceNumber) \
{ \
    MlmeHlSyncInd_Evt *evt = (MlmeHlSyncInd_Evt*) CsrPmalloc(sizeof(MlmeHlSyncInd_Evt)); \
    evt->common.id            = MLME_HL_SYNC_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->groupAddress         = p_groupAddress; \
    evt->sourceAddress        = p_sourceAddress; \
    evt->sequenceNumber       = p_sequenceNumber; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_hl_sync_ind(context, p_groupAddress, p_sourceAddress, p_sequenceNumber) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_ind(newevt, 0, p_groupAddress, p_sourceAddress, p_sequenceNumber); \
    fsm_send_event((context), newevt, pid, MLME_HL_SYNC_IND_ID); \
}

#define send_mlme_hl_sync_ind_external(context, pid, p_groupAddress, p_sourceAddress, p_sequenceNumber) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_ind(newevt, pid, p_groupAddress, p_sourceAddress, p_sequenceNumber); \
    fsm_send_event_external((context), newevt, pid, MLME_HL_SYNC_IND_ID); \
}

#define send_mlme_hl_sync_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_HL_SYNC_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_HL_SYNC_IND Size %d bytes .... Should be %d", packedEventSize, MLME_HL_SYNC_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_HL_SYNC_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_HL_SYNC_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeHlSyncInd_Evt *evt = (MlmeHlSyncInd_Evt*) CsrPmalloc(sizeof(MlmeHlSyncInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->groupAddress, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->sourceAddress, 6); \
        evt->sequenceNumber = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_HL_SYNC_IND_ID); \
    } \
}

/* -------------------------- mlme_hl_sync_cfm -------------------------- */
typedef struct MlmeHlSyncCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                groupAddress;
    ResultCode                      resultCode;
} MlmeHlSyncCfm_Evt;

#define build_mlme_hl_sync_cfm(event, pid, p_groupAddress, p_resultCode) \
{ \
    MlmeHlSyncCfm_Evt *evt = (MlmeHlSyncCfm_Evt*) CsrPmalloc(sizeof(MlmeHlSyncCfm_Evt)); \
    evt->common.id            = MLME_HL_SYNC_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->groupAddress         = p_groupAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_hl_sync_cfm(context, p_groupAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_cfm(newevt, 0, p_groupAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_HL_SYNC_CFM_ID); \
}

#define send_mlme_hl_sync_cfm_external(context, pid, p_groupAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_cfm(newevt, pid, p_groupAddress, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_HL_SYNC_CFM_ID); \
}

#define send_mlme_hl_sync_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_HL_SYNC_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_HL_SYNC_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_HL_SYNC_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_HL_SYNC_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_HL_SYNC_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeHlSyncCfm_Evt *evt = (MlmeHlSyncCfm_Evt*) CsrPmalloc(sizeof(MlmeHlSyncCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->groupAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_HL_SYNC_CFM_ID); \
    } \
}

/* -------------------------- mlme_hl_sync_cancel_cfm -------------------------- */
typedef struct MlmeHlSyncCancelCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                groupAddress;
    ResultCode                      resultCode;
} MlmeHlSyncCancelCfm_Evt;

#define build_mlme_hl_sync_cancel_cfm(event, pid, p_groupAddress, p_resultCode) \
{ \
    MlmeHlSyncCancelCfm_Evt *evt = (MlmeHlSyncCancelCfm_Evt*) CsrPmalloc(sizeof(MlmeHlSyncCancelCfm_Evt)); \
    evt->common.id            = MLME_HL_SYNC_CANCEL_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->groupAddress         = p_groupAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_hl_sync_cancel_cfm(context, p_groupAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_cancel_cfm(newevt, 0, p_groupAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_HL_SYNC_CANCEL_CFM_ID); \
}

#define send_mlme_hl_sync_cancel_cfm_external(context, pid, p_groupAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_cancel_cfm(newevt, pid, p_groupAddress, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_HL_SYNC_CANCEL_CFM_ID); \
}

#define send_mlme_hl_sync_cancel_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_HL_SYNC_CANCEL_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_HL_SYNC_CANCEL_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_HL_SYNC_CANCEL_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_HL_SYNC_CANCEL_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_HL_SYNC_CANCEL_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeHlSyncCancelCfm_Evt *evt = (MlmeHlSyncCancelCfm_Evt*) CsrPmalloc(sizeof(MlmeHlSyncCancelCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->groupAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_HL_SYNC_CANCEL_CFM_ID); \
    } \
}

/* -------------------------- mlme_join_cfm -------------------------- */
typedef struct MlmeJoinCfm_Evt
{
    FsmEvent                        common;
    DataReference                   beaconFrame;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeJoinCfm_Evt;

#define build_mlme_join_cfm(event, pid, p_beaconFrame, p_resultCode) \
{ \
    MlmeJoinCfm_Evt *evt = (MlmeJoinCfm_Evt*) CsrPmalloc(sizeof(MlmeJoinCfm_Evt)); \
    evt->common.id            = MLME_JOIN_CFM_ID; \
    evt->common.destination   = pid; \
    evt->beaconFrame          = p_beaconFrame; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_join_cfm(context, p_beaconFrame, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_join_cfm(newevt, 0, p_beaconFrame, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_JOIN_CFM_ID); \
}

#define send_mlme_join_cfm_external(context, pid, p_beaconFrame, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_join_cfm(newevt, pid, p_beaconFrame, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_JOIN_CFM_ID); \
}

#define send_mlme_join_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_JOIN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_JOIN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_JOIN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_JOIN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeJoinCfm_Evt *evt = (MlmeJoinCfm_Evt*) CsrPmalloc(sizeof(MlmeJoinCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->beaconFrame = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_JOIN_CFM_ID); \
    } \
}

/* -------------------------- mlme_linkmeasure_cfm -------------------------- */
typedef struct MlmeLinkmeasureCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
    Decibels                        transmitPower;
    Decibels                        linkMargin;
    AntennaId                       receiveAntennaId;
    AntennaId                       transmitAntennaId;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
    Rcpi                            rcpiReport;
    Rsni                            rsniReport;
} MlmeLinkmeasureCfm_Evt;

#define build_mlme_linkmeasure_cfm(event, pid, p_informationElements, p_resultCode, p_dialogToken, p_transmitPower, p_linkMargin, p_receiveAntennaId, p_transmitAntennaId, p_rcpiRequest, p_rsniRequest, p_rcpiReport, p_rsniReport) \
{ \
    MlmeLinkmeasureCfm_Evt *evt = (MlmeLinkmeasureCfm_Evt*) CsrPmalloc(sizeof(MlmeLinkmeasureCfm_Evt)); \
    evt->common.id            = MLME_LINKMEASURE_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    evt->transmitPower        = p_transmitPower; \
    evt->linkMargin           = p_linkMargin; \
    evt->receiveAntennaId     = p_receiveAntennaId; \
    evt->transmitAntennaId    = p_transmitAntennaId; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    evt->rcpiReport           = p_rcpiReport; \
    evt->rsniReport           = p_rsniReport; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_linkmeasure_cfm(context, p_informationElements, p_resultCode, p_dialogToken, p_transmitPower, p_linkMargin, p_receiveAntennaId, p_transmitAntennaId, p_rcpiRequest, p_rsniRequest, p_rcpiReport, p_rsniReport) \
{ \
    FsmEvent *newevt; \
    build_mlme_linkmeasure_cfm(newevt, 0, p_informationElements, p_resultCode, p_dialogToken, p_transmitPower, p_linkMargin, p_receiveAntennaId, p_transmitAntennaId, p_rcpiRequest, p_rsniRequest, p_rcpiReport, p_rsniReport); \
    fsm_send_event((context), newevt, pid, MLME_LINKMEASURE_CFM_ID); \
}

#define send_mlme_linkmeasure_cfm_external(context, pid, p_informationElements, p_resultCode, p_dialogToken, p_transmitPower, p_linkMargin, p_receiveAntennaId, p_transmitAntennaId, p_rcpiRequest, p_rsniRequest, p_rcpiReport, p_rsniReport) \
{ \
    FsmEvent *newevt; \
    build_mlme_linkmeasure_cfm(newevt, pid, p_informationElements, p_resultCode, p_dialogToken, p_transmitPower, p_linkMargin, p_receiveAntennaId, p_transmitAntennaId, p_rcpiRequest, p_rsniRequest, p_rcpiReport, p_rsniReport); \
    fsm_send_event_external((context), newevt, pid, MLME_LINKMEASURE_CFM_ID); \
}

#define send_mlme_linkmeasure_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_LINKMEASURE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_LINKMEASURE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_LINKMEASURE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_LINKMEASURE_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeLinkmeasureCfm_Evt *evt = (MlmeLinkmeasureCfm_Evt*) CsrPmalloc(sizeof(MlmeLinkmeasureCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        evt->transmitPower = event_unpack_CsrInt16(&buffer); \
        evt->linkMargin = event_unpack_CsrInt16(&buffer); \
        evt->receiveAntennaId = event_unpack_CsrUint16(&buffer); \
        evt->transmitAntennaId = event_unpack_CsrUint16(&buffer); \
        evt->rcpiRequest = event_unpack_CsrUint16(&buffer); \
        evt->rsniRequest = event_unpack_CsrUint16(&buffer); \
        evt->rcpiReport = event_unpack_CsrUint16(&buffer); \
        evt->rsniReport = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_LINKMEASURE_CFM_ID); \
    } \
}

/* -------------------------- mlme_measure_cfm -------------------------- */
typedef struct MlmeMeasureCfm_Evt
{
    FsmEvent                        common;
    DataReference                   measurementReportSet;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
} MlmeMeasureCfm_Evt;

#define build_mlme_measure_cfm(event, pid, p_measurementReportSet, p_resultCode, p_dialogToken) \
{ \
    MlmeMeasureCfm_Evt *evt = (MlmeMeasureCfm_Evt*) CsrPmalloc(sizeof(MlmeMeasureCfm_Evt)); \
    evt->common.id            = MLME_MEASURE_CFM_ID; \
    evt->common.destination   = pid; \
    evt->measurementReportSet = p_measurementReportSet; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_measure_cfm(context, p_measurementReportSet, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_measure_cfm(newevt, 0, p_measurementReportSet, p_resultCode, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_MEASURE_CFM_ID); \
}

#define send_mlme_measure_cfm_external(context, pid, p_measurementReportSet, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_measure_cfm(newevt, pid, p_measurementReportSet, p_resultCode, p_dialogToken); \
    fsm_send_event_external((context), newevt, pid, MLME_MEASURE_CFM_ID); \
}

#define send_mlme_measure_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_MEASURE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_MEASURE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_MEASURE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MEASURE_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeMeasureCfm_Evt *evt = (MlmeMeasureCfm_Evt*) CsrPmalloc(sizeof(MlmeMeasureCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->measurementReportSet = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_MEASURE_CFM_ID); \
    } \
}

/* -------------------------- mlme_michaelmicfailure_ind -------------------------- */
typedef struct MlmeMichaelmicfailureInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    CsrUint16                       count;
    unifi_MACAddress                address;
    KeyType                         keyType;
    CsrUint16                       keyId;
    CsrUint16                       tsc[4];
} MlmeMichaelmicfailureInd_Evt;

#define build_mlme_michaelmicfailure_ind(event, pid, p_count, p_address, p_keyType, p_keyId, p_tsc) \
{ \
    MlmeMichaelmicfailureInd_Evt *evt = (MlmeMichaelmicfailureInd_Evt*) CsrPmalloc(sizeof(MlmeMichaelmicfailureInd_Evt)); \
    evt->common.id            = MLME_MICHAELMICFAILURE_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->count                = p_count; \
    evt->address              = p_address; \
    evt->keyType              = p_keyType; \
    evt->keyId                = p_keyId; \
    CsrMemCpy(evt->tsc, p_tsc, sizeof(evt->tsc)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_michaelmicfailure_ind(context, p_count, p_address, p_keyType, p_keyId, p_tsc) \
{ \
    FsmEvent *newevt; \
    build_mlme_michaelmicfailure_ind(newevt, 0, p_count, p_address, p_keyType, p_keyId, p_tsc); \
    fsm_send_event((context), newevt, pid, MLME_MICHAELMICFAILURE_IND_ID); \
}

#define send_mlme_michaelmicfailure_ind_external(context, pid, p_count, p_address, p_keyType, p_keyId, p_tsc) \
{ \
    FsmEvent *newevt; \
    build_mlme_michaelmicfailure_ind(newevt, pid, p_count, p_address, p_keyType, p_keyId, p_tsc); \
    fsm_send_event_external((context), newevt, pid, MLME_MICHAELMICFAILURE_IND_ID); \
}

#define send_mlme_michaelmicfailure_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_MICHAELMICFAILURE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_MICHAELMICFAILURE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_MICHAELMICFAILURE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MICHAELMICFAILURE_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MICHAELMICFAILURE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeMichaelmicfailureInd_Evt *evt = (MlmeMichaelmicfailureInd_Evt*) CsrPmalloc(sizeof(MlmeMichaelmicfailureInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->count = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->address, 6); \
        evt->keyType = event_unpack_CsrUint16(&buffer); \
        evt->keyId = event_unpack_CsrUint16(&buffer); \
        { \
        int i; \
        for(i=0; i<4; i++) \
        { \
            evt->tsc[i] = event_unpack_CsrUint16(&buffer); \
        } \
        } \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_MICHAELMICFAILURE_IND_ID); \
    } \
}

/* -------------------------- mlme_mreport_ind -------------------------- */
typedef struct MlmeMreportInd_Evt
{
    FsmEvent                        common;
    DataReference                   measurementReportSet;
    DataReference                   informationElements;
    unifi_MACAddress                peerMacAddress;
    DialogToken                     dialogToken;
    MeasurementCategory             measurementCategory;
} MlmeMreportInd_Evt;

#define build_mlme_mreport_ind(event, pid, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory) \
{ \
    MlmeMreportInd_Evt *evt = (MlmeMreportInd_Evt*) CsrPmalloc(sizeof(MlmeMreportInd_Evt)); \
    evt->common.id            = MLME_MREPORT_IND_ID; \
    evt->common.destination   = pid; \
    evt->measurementReportSet = p_measurementReportSet; \
    evt->informationElements  = p_informationElements; \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->measurementCategory  = p_measurementCategory; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_mreport_ind(context, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory) \
{ \
    FsmEvent *newevt; \
    build_mlme_mreport_ind(newevt, 0, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory); \
    fsm_send_event((context), newevt, pid, MLME_MREPORT_IND_ID); \
}

#define send_mlme_mreport_ind_external(context, pid, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory) \
{ \
    FsmEvent *newevt; \
    build_mlme_mreport_ind(newevt, pid, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory); \
    fsm_send_event_external((context), newevt, pid, MLME_MREPORT_IND_ID); \
}

#define send_mlme_mreport_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_MREPORT_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_MREPORT_IND Size %d bytes .... Should be %d", packedEventSize, MLME_MREPORT_IND_SIZE)); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeMreportInd_Evt *evt = (MlmeMreportInd_Evt*) CsrPmalloc(sizeof(MlmeMreportInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->measurementReportSet = dr1; \
        evt->informationElements = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        evt->measurementCategory = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_MREPORT_IND_ID); \
    } \
}

/* -------------------------- mlme_mreport_cfm -------------------------- */
typedef struct MlmeMreportCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeMreportCfm_Evt;

#define build_mlme_mreport_cfm(event, pid, p_resultCode) \
{ \
    MlmeMreportCfm_Evt *evt = (MlmeMreportCfm_Evt*) CsrPmalloc(sizeof(MlmeMreportCfm_Evt)); \
    evt->common.id            = MLME_MREPORT_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_mreport_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_mreport_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_MREPORT_CFM_ID); \
}

#define send_mlme_mreport_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_mreport_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_MREPORT_CFM_ID); \
}

#define send_mlme_mreport_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_MREPORT_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_MREPORT_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_MREPORT_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MREPORT_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MREPORT_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeMreportCfm_Evt *evt = (MlmeMreportCfm_Evt*) CsrPmalloc(sizeof(MlmeMreportCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_MREPORT_CFM_ID); \
    } \
}

/* -------------------------- mlme_mrequest_ind -------------------------- */
typedef struct MlmeMrequestInd_Evt
{
    FsmEvent                        common;
    DataReference                   measurementRequestSet;
    DataReference                   informationElements;
    unifi_MACAddress                peerMacAddress;
    DialogToken                     dialogToken;
    CsrUint16                       numberofRepetitions;
    MeasurementCategory             measurementCategory;
} MlmeMrequestInd_Evt;

#define build_mlme_mrequest_ind(event, pid, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory) \
{ \
    MlmeMrequestInd_Evt *evt = (MlmeMrequestInd_Evt*) CsrPmalloc(sizeof(MlmeMrequestInd_Evt)); \
    evt->common.id            = MLME_MREQUEST_IND_ID; \
    evt->common.destination   = pid; \
    evt->measurementRequestSet = p_measurementRequestSet; \
    evt->informationElements  = p_informationElements; \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->numberofRepetitions  = p_numberofRepetitions; \
    evt->measurementCategory  = p_measurementCategory; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_mrequest_ind(context, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory) \
{ \
    FsmEvent *newevt; \
    build_mlme_mrequest_ind(newevt, 0, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory); \
    fsm_send_event((context), newevt, pid, MLME_MREQUEST_IND_ID); \
}

#define send_mlme_mrequest_ind_external(context, pid, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory) \
{ \
    FsmEvent *newevt; \
    build_mlme_mrequest_ind(newevt, pid, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory); \
    fsm_send_event_external((context), newevt, pid, MLME_MREQUEST_IND_ID); \
}

#define send_mlme_mrequest_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_MREQUEST_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_MREQUEST_IND Size %d bytes .... Should be %d", packedEventSize, MLME_MREQUEST_IND_SIZE)); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeMrequestInd_Evt *evt = (MlmeMrequestInd_Evt*) CsrPmalloc(sizeof(MlmeMrequestInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->measurementRequestSet = dr1; \
        evt->informationElements = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        evt->numberofRepetitions = event_unpack_CsrUint16(&buffer); \
        evt->measurementCategory = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_MREQUEST_IND_ID); \
    } \
}

/* -------------------------- mlme_mrequest_cfm -------------------------- */
typedef struct MlmeMrequestCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeMrequestCfm_Evt;

#define build_mlme_mrequest_cfm(event, pid, p_resultCode) \
{ \
    MlmeMrequestCfm_Evt *evt = (MlmeMrequestCfm_Evt*) CsrPmalloc(sizeof(MlmeMrequestCfm_Evt)); \
    evt->common.id            = MLME_MREQUEST_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_mrequest_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_mrequest_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_MREQUEST_CFM_ID); \
}

#define send_mlme_mrequest_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_mrequest_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_MREQUEST_CFM_ID); \
}

#define send_mlme_mrequest_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_MREQUEST_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_MREQUEST_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_MREQUEST_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MREQUEST_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_MREQUEST_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeMrequestCfm_Evt *evt = (MlmeMrequestCfm_Evt*) CsrPmalloc(sizeof(MlmeMrequestCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_MREQUEST_CFM_ID); \
    } \
}

/* -------------------------- mlme_neighborrepreq_ind -------------------------- */
typedef struct MlmeNeighborrepreqInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    DialogToken                     dialogToken;
} MlmeNeighborrepreqInd_Evt;

#define build_mlme_neighborrepreq_ind(event, pid, p_informationElements, p_peerStaAddress, p_dialogToken) \
{ \
    MlmeNeighborrepreqInd_Evt *evt = (MlmeNeighborrepreqInd_Evt*) CsrPmalloc(sizeof(MlmeNeighborrepreqInd_Evt)); \
    evt->common.id            = MLME_NEIGHBORREPREQ_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_neighborrepreq_ind(context, p_informationElements, p_peerStaAddress, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepreq_ind(newevt, 0, p_informationElements, p_peerStaAddress, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_NEIGHBORREPREQ_IND_ID); \
}

#define send_mlme_neighborrepreq_ind_external(context, pid, p_informationElements, p_peerStaAddress, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepreq_ind(newevt, pid, p_informationElements, p_peerStaAddress, p_dialogToken); \
    fsm_send_event_external((context), newevt, pid, MLME_NEIGHBORREPREQ_IND_ID); \
}

#define send_mlme_neighborrepreq_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_NEIGHBORREPREQ_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_NEIGHBORREPREQ_IND Size %d bytes .... Should be %d", packedEventSize, MLME_NEIGHBORREPREQ_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_NEIGHBORREPREQ_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeNeighborrepreqInd_Evt *evt = (MlmeNeighborrepreqInd_Evt*) CsrPmalloc(sizeof(MlmeNeighborrepreqInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_NEIGHBORREPREQ_IND_ID); \
    } \
}

/* -------------------------- mlme_neighborrepreq_cfm -------------------------- */
typedef struct MlmeNeighborrepreqCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
} MlmeNeighborrepreqCfm_Evt;

#define build_mlme_neighborrepreq_cfm(event, pid, p_resultCode, p_dialogToken) \
{ \
    MlmeNeighborrepreqCfm_Evt *evt = (MlmeNeighborrepreqCfm_Evt*) CsrPmalloc(sizeof(MlmeNeighborrepreqCfm_Evt)); \
    evt->common.id            = MLME_NEIGHBORREPREQ_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_neighborrepreq_cfm(context, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepreq_cfm(newevt, 0, p_resultCode, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_NEIGHBORREPREQ_CFM_ID); \
}

#define send_mlme_neighborrepreq_cfm_external(context, pid, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepreq_cfm(newevt, pid, p_resultCode, p_dialogToken); \
    fsm_send_event_external((context), newevt, pid, MLME_NEIGHBORREPREQ_CFM_ID); \
}

#define send_mlme_neighborrepreq_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_NEIGHBORREPREQ_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_NEIGHBORREPREQ_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_NEIGHBORREPREQ_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_NEIGHBORREPREQ_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_NEIGHBORREPREQ_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeNeighborrepreqCfm_Evt *evt = (MlmeNeighborrepreqCfm_Evt*) CsrPmalloc(sizeof(MlmeNeighborrepreqCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_NEIGHBORREPREQ_CFM_ID); \
    } \
}

/* -------------------------- mlme_neighborrepresp_ind -------------------------- */
typedef struct MlmeNeighborreprespInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
} MlmeNeighborreprespInd_Evt;

#define build_mlme_neighborrepresp_ind(event, pid, p_informationElements, p_resultCode, p_dialogToken) \
{ \
    MlmeNeighborreprespInd_Evt *evt = (MlmeNeighborreprespInd_Evt*) CsrPmalloc(sizeof(MlmeNeighborreprespInd_Evt)); \
    evt->common.id            = MLME_NEIGHBORREPRESP_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_neighborrepresp_ind(context, p_informationElements, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepresp_ind(newevt, 0, p_informationElements, p_resultCode, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_NEIGHBORREPRESP_IND_ID); \
}

#define send_mlme_neighborrepresp_ind_external(context, pid, p_informationElements, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepresp_ind(newevt, pid, p_informationElements, p_resultCode, p_dialogToken); \
    fsm_send_event_external((context), newevt, pid, MLME_NEIGHBORREPRESP_IND_ID); \
}

#define send_mlme_neighborrepresp_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_NEIGHBORREPRESP_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_NEIGHBORREPRESP_IND Size %d bytes .... Should be %d", packedEventSize, MLME_NEIGHBORREPRESP_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_NEIGHBORREPRESP_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeNeighborreprespInd_Evt *evt = (MlmeNeighborreprespInd_Evt*) CsrPmalloc(sizeof(MlmeNeighborreprespInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_NEIGHBORREPRESP_IND_ID); \
    } \
}

/* -------------------------- mlme_neighborrepresp_cfm -------------------------- */
typedef struct MlmeNeighborreprespCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
} MlmeNeighborreprespCfm_Evt;

#define build_mlme_neighborrepresp_cfm(event, pid, p_resultCode, p_dialogToken) \
{ \
    MlmeNeighborreprespCfm_Evt *evt = (MlmeNeighborreprespCfm_Evt*) CsrPmalloc(sizeof(MlmeNeighborreprespCfm_Evt)); \
    evt->common.id            = MLME_NEIGHBORREPRESP_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_neighborrepresp_cfm(context, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepresp_cfm(newevt, 0, p_resultCode, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_NEIGHBORREPRESP_CFM_ID); \
}

#define send_mlme_neighborrepresp_cfm_external(context, pid, p_resultCode, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepresp_cfm(newevt, pid, p_resultCode, p_dialogToken); \
    fsm_send_event_external((context), newevt, pid, MLME_NEIGHBORREPRESP_CFM_ID); \
}

#define send_mlme_neighborrepresp_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_NEIGHBORREPRESP_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_NEIGHBORREPRESP_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_NEIGHBORREPRESP_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_NEIGHBORREPRESP_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_NEIGHBORREPRESP_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeNeighborreprespCfm_Evt *evt = (MlmeNeighborreprespCfm_Evt*) CsrPmalloc(sizeof(MlmeNeighborreprespCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_NEIGHBORREPRESP_CFM_ID); \
    } \
}

/* -------------------------- mlme_pause_autonomous_scan_cfm -------------------------- */
typedef struct MlmePauseAutonomousScanCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    AutonomousScanId                autonomousScanId;
} MlmePauseAutonomousScanCfm_Evt;

#define build_mlme_pause_autonomous_scan_cfm(event, pid, p_resultCode, p_autonomousScanId) \
{ \
    MlmePauseAutonomousScanCfm_Evt *evt = (MlmePauseAutonomousScanCfm_Evt*) CsrPmalloc(sizeof(MlmePauseAutonomousScanCfm_Evt)); \
    evt->common.id            = MLME_PAUSE_AUTONOMOUS_SCAN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_pause_autonomous_scan_cfm(context, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_pause_autonomous_scan_cfm(newevt, 0, p_resultCode, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_PAUSE_AUTONOMOUS_SCAN_CFM_ID); \
}

#define send_mlme_pause_autonomous_scan_cfm_external(context, pid, p_resultCode, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_pause_autonomous_scan_cfm(newevt, pid, p_resultCode, p_autonomousScanId); \
    fsm_send_event_external((context), newevt, pid, MLME_PAUSE_AUTONOMOUS_SCAN_CFM_ID); \
}

#define send_mlme_pause_autonomous_scan_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_PAUSE_AUTONOMOUS_SCAN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_PAUSE_AUTONOMOUS_SCAN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_PAUSE_AUTONOMOUS_SCAN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_PAUSE_AUTONOMOUS_SCAN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_PAUSE_AUTONOMOUS_SCAN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmePauseAutonomousScanCfm_Evt *evt = (MlmePauseAutonomousScanCfm_Evt*) CsrPmalloc(sizeof(MlmePauseAutonomousScanCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->autonomousScanId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_PAUSE_AUTONOMOUS_SCAN_CFM_ID); \
    } \
}

/* -------------------------- mlme_powermgt_cfm -------------------------- */
typedef struct MlmePowermgtCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmePowermgtCfm_Evt;

#define build_mlme_powermgt_cfm(event, pid, p_resultCode) \
{ \
    MlmePowermgtCfm_Evt *evt = (MlmePowermgtCfm_Evt*) CsrPmalloc(sizeof(MlmePowermgtCfm_Evt)); \
    evt->common.id            = MLME_POWERMGT_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_powermgt_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_powermgt_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_POWERMGT_CFM_ID); \
}

#define send_mlme_powermgt_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_powermgt_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_POWERMGT_CFM_ID); \
}

#define send_mlme_powermgt_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_POWERMGT_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_POWERMGT_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_POWERMGT_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_POWERMGT_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_POWERMGT_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmePowermgtCfm_Evt *evt = (MlmePowermgtCfm_Evt*) CsrPmalloc(sizeof(MlmePowermgtCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_POWERMGT_CFM_ID); \
    } \
}

/* -------------------------- mlme_protectedframedropped_ind -------------------------- */
typedef struct MlmeProtectedframedroppedInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                address1;
    unifi_MACAddress                address2;
} MlmeProtectedframedroppedInd_Evt;

#define build_mlme_protectedframedropped_ind(event, pid, p_address1, p_address2) \
{ \
    MlmeProtectedframedroppedInd_Evt *evt = (MlmeProtectedframedroppedInd_Evt*) CsrPmalloc(sizeof(MlmeProtectedframedroppedInd_Evt)); \
    evt->common.id            = MLME_PROTECTEDFRAMEDROPPED_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->address1             = p_address1; \
    evt->address2             = p_address2; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_protectedframedropped_ind(context, p_address1, p_address2) \
{ \
    FsmEvent *newevt; \
    build_mlme_protectedframedropped_ind(newevt, 0, p_address1, p_address2); \
    fsm_send_event((context), newevt, pid, MLME_PROTECTEDFRAMEDROPPED_IND_ID); \
}

#define send_mlme_protectedframedropped_ind_external(context, pid, p_address1, p_address2) \
{ \
    FsmEvent *newevt; \
    build_mlme_protectedframedropped_ind(newevt, pid, p_address1, p_address2); \
    fsm_send_event_external((context), newevt, pid, MLME_PROTECTEDFRAMEDROPPED_IND_ID); \
}

#define send_mlme_protectedframedropped_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_PROTECTEDFRAMEDROPPED_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_PROTECTEDFRAMEDROPPED_IND Size %d bytes .... Should be %d", packedEventSize, MLME_PROTECTEDFRAMEDROPPED_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_PROTECTEDFRAMEDROPPED_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_PROTECTEDFRAMEDROPPED_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeProtectedframedroppedInd_Evt *evt = (MlmeProtectedframedroppedInd_Evt*) CsrPmalloc(sizeof(MlmeProtectedframedroppedInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->address1, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->address2, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_PROTECTEDFRAMEDROPPED_IND_ID); \
    } \
}

/* -------------------------- mlme_reassociate_ind -------------------------- */
typedef struct MlmeReassociateInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    unifi_MACAddress                currentApAddress;
    CapabilityInformation           capabilityInformation;
    BeaconPeriods                   listenInterval;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
} MlmeReassociateInd_Evt;

#define build_mlme_reassociate_ind(event, pid, p_informationElements, p_peerStaAddress, p_currentApAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest) \
{ \
    MlmeReassociateInd_Evt *evt = (MlmeReassociateInd_Evt*) CsrPmalloc(sizeof(MlmeReassociateInd_Evt)); \
    evt->common.id            = MLME_REASSOCIATE_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->currentApAddress     = p_currentApAddress; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->listenInterval       = p_listenInterval; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_reassociate_ind(context, p_informationElements, p_peerStaAddress, p_currentApAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest) \
{ \
    FsmEvent *newevt; \
    build_mlme_reassociate_ind(newevt, 0, p_informationElements, p_peerStaAddress, p_currentApAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest); \
    fsm_send_event((context), newevt, pid, MLME_REASSOCIATE_IND_ID); \
}

#define send_mlme_reassociate_ind_external(context, pid, p_informationElements, p_peerStaAddress, p_currentApAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest) \
{ \
    FsmEvent *newevt; \
    build_mlme_reassociate_ind(newevt, pid, p_informationElements, p_peerStaAddress, p_currentApAddress, p_capabilityInformation, p_listenInterval, p_rcpiRequest, p_rsniRequest); \
    fsm_send_event_external((context), newevt, pid, MLME_REASSOCIATE_IND_ID); \
}

#define send_mlme_reassociate_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_REASSOCIATE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_REASSOCIATE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_REASSOCIATE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_REASSOCIATE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeReassociateInd_Evt *evt = (MlmeReassociateInd_Evt*) CsrPmalloc(sizeof(MlmeReassociateInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->currentApAddress, 6); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->listenInterval = event_unpack_CsrUint16(&buffer); \
        evt->rcpiRequest = event_unpack_CsrUint16(&buffer); \
        evt->rsniRequest = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_REASSOCIATE_IND_ID); \
    } \
}

/* -------------------------- mlme_reassociate_cfm -------------------------- */
typedef struct MlmeReassociateCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   exchangedFrames;
    ResultCode                      resultCode;
    CapabilityInformation           capabilityInformation;
    AssociationId                   associationId;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
    Rcpi                            rcpiResponse;
    Rsni                            rsniResponse;
} MlmeReassociateCfm_Evt;

#define build_mlme_reassociate_cfm(event, pid, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse) \
{ \
    MlmeReassociateCfm_Evt *evt = (MlmeReassociateCfm_Evt*) CsrPmalloc(sizeof(MlmeReassociateCfm_Evt)); \
    evt->common.id            = MLME_REASSOCIATE_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    evt->exchangedFrames      = p_exchangedFrames; \
    evt->resultCode           = p_resultCode; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->associationId        = p_associationId; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    evt->rcpiResponse         = p_rcpiResponse; \
    evt->rsniResponse         = p_rsniResponse; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_reassociate_cfm(context, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse) \
{ \
    FsmEvent *newevt; \
    build_mlme_reassociate_cfm(newevt, 0, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse); \
    fsm_send_event((context), newevt, pid, MLME_REASSOCIATE_CFM_ID); \
}

#define send_mlme_reassociate_cfm_external(context, pid, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse) \
{ \
    FsmEvent *newevt; \
    build_mlme_reassociate_cfm(newevt, pid, p_informationElements, p_exchangedFrames, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest, p_rcpiResponse, p_rsniResponse); \
    fsm_send_event_external((context), newevt, pid, MLME_REASSOCIATE_CFM_ID); \
}

#define send_mlme_reassociate_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_REASSOCIATE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_REASSOCIATE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_REASSOCIATE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeReassociateCfm_Evt *evt = (MlmeReassociateCfm_Evt*) CsrPmalloc(sizeof(MlmeReassociateCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->exchangedFrames = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->associationId = event_unpack_CsrUint16(&buffer); \
        evt->rcpiRequest = event_unpack_CsrUint16(&buffer); \
        evt->rsniRequest = event_unpack_CsrUint16(&buffer); \
        evt->rcpiResponse = event_unpack_CsrUint16(&buffer); \
        evt->rsniResponse = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_REASSOCIATE_CFM_ID); \
    } \
}

/* -------------------------- mlme_remote_request_ind -------------------------- */
typedef struct MlmeRemoteRequestInd_Evt
{
    FsmEvent                        common;
    DataReference                   contentofFtActionFrame;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
} MlmeRemoteRequestInd_Evt;

#define build_mlme_remote_request_ind(event, pid, p_contentofFtActionFrame, p_peerMacAddress) \
{ \
    MlmeRemoteRequestInd_Evt *evt = (MlmeRemoteRequestInd_Evt*) CsrPmalloc(sizeof(MlmeRemoteRequestInd_Evt)); \
    evt->common.id            = MLME_REMOTE_REQUEST_IND_ID; \
    evt->common.destination   = pid; \
    evt->contentofFtActionFrame = p_contentofFtActionFrame; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_remote_request_ind(context, p_contentofFtActionFrame, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_remote_request_ind(newevt, 0, p_contentofFtActionFrame, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_REMOTE_REQUEST_IND_ID); \
}

#define send_mlme_remote_request_ind_external(context, pid, p_contentofFtActionFrame, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_remote_request_ind(newevt, pid, p_contentofFtActionFrame, p_peerMacAddress); \
    fsm_send_event_external((context), newevt, pid, MLME_REMOTE_REQUEST_IND_ID); \
}

#define send_mlme_remote_request_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_REMOTE_REQUEST_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_REMOTE_REQUEST_IND Size %d bytes .... Should be %d", packedEventSize, MLME_REMOTE_REQUEST_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_REMOTE_REQUEST_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeRemoteRequestInd_Evt *evt = (MlmeRemoteRequestInd_Evt*) CsrPmalloc(sizeof(MlmeRemoteRequestInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->contentofFtActionFrame = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_REMOTE_REQUEST_IND_ID); \
    } \
}

/* -------------------------- mlme_remote_request_cfm -------------------------- */
typedef struct MlmeRemoteRequestCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    ResultCode                      resultCode;
} MlmeRemoteRequestCfm_Evt;

#define build_mlme_remote_request_cfm(event, pid, p_peerMacAddress, p_resultCode) \
{ \
    MlmeRemoteRequestCfm_Evt *evt = (MlmeRemoteRequestCfm_Evt*) CsrPmalloc(sizeof(MlmeRemoteRequestCfm_Evt)); \
    evt->common.id            = MLME_REMOTE_REQUEST_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_remote_request_cfm(context, p_peerMacAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_remote_request_cfm(newevt, 0, p_peerMacAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_REMOTE_REQUEST_CFM_ID); \
}

#define send_mlme_remote_request_cfm_external(context, pid, p_peerMacAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_remote_request_cfm(newevt, pid, p_peerMacAddress, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_REMOTE_REQUEST_CFM_ID); \
}

#define send_mlme_remote_request_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_REMOTE_REQUEST_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_REMOTE_REQUEST_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_REMOTE_REQUEST_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_REMOTE_REQUEST_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_REMOTE_REQUEST_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeRemoteRequestCfm_Evt *evt = (MlmeRemoteRequestCfm_Evt*) CsrPmalloc(sizeof(MlmeRemoteRequestCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_REMOTE_REQUEST_CFM_ID); \
    } \
}

/* -------------------------- mlme_reset_cfm -------------------------- */
typedef struct MlmeResetCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeResetCfm_Evt;

#define build_mlme_reset_cfm(event, pid, p_resultCode) \
{ \
    MlmeResetCfm_Evt *evt = (MlmeResetCfm_Evt*) CsrPmalloc(sizeof(MlmeResetCfm_Evt)); \
    evt->common.id            = MLME_RESET_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_reset_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_reset_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_RESET_CFM_ID); \
}

#define send_mlme_reset_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_reset_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_RESET_CFM_ID); \
}

#define send_mlme_reset_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_RESET_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_RESET_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_RESET_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_RESET_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_RESET_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeResetCfm_Evt *evt = (MlmeResetCfm_Evt*) CsrPmalloc(sizeof(MlmeResetCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_RESET_CFM_ID); \
    } \
}

/* -------------------------- mlme_resource_request_ind -------------------------- */
typedef struct MlmeResourceRequestInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
} MlmeResourceRequestInd_Evt;

#define build_mlme_resource_request_ind(event, pid, p_informationElements, p_peerMacAddress) \
{ \
    MlmeResourceRequestInd_Evt *evt = (MlmeResourceRequestInd_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestInd_Evt)); \
    evt->common.id            = MLME_RESOURCE_REQUEST_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_resource_request_ind(context, p_informationElements, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_ind(newevt, 0, p_informationElements, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_RESOURCE_REQUEST_IND_ID); \
}

#define send_mlme_resource_request_ind_external(context, pid, p_informationElements, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_ind(newevt, pid, p_informationElements, p_peerMacAddress); \
    fsm_send_event_external((context), newevt, pid, MLME_RESOURCE_REQUEST_IND_ID); \
}

#define send_mlme_resource_request_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_RESOURCE_REQUEST_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_RESOURCE_REQUEST_IND Size %d bytes .... Should be %d", packedEventSize, MLME_RESOURCE_REQUEST_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_RESOURCE_REQUEST_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeResourceRequestInd_Evt *evt = (MlmeResourceRequestInd_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_RESOURCE_REQUEST_IND_ID); \
    } \
}

/* -------------------------- mlme_resource_request_cfm -------------------------- */
typedef struct MlmeResourceRequestCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    ResultCode                      resultCode;
} MlmeResourceRequestCfm_Evt;

#define build_mlme_resource_request_cfm(event, pid, p_informationElements, p_peerMacAddress, p_resultCode) \
{ \
    MlmeResourceRequestCfm_Evt *evt = (MlmeResourceRequestCfm_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestCfm_Evt)); \
    evt->common.id            = MLME_RESOURCE_REQUEST_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_resource_request_cfm(context, p_informationElements, p_peerMacAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_cfm(newevt, 0, p_informationElements, p_peerMacAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_RESOURCE_REQUEST_CFM_ID); \
}

#define send_mlme_resource_request_cfm_external(context, pid, p_informationElements, p_peerMacAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_cfm(newevt, pid, p_informationElements, p_peerMacAddress, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_RESOURCE_REQUEST_CFM_ID); \
}

#define send_mlme_resource_request_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_RESOURCE_REQUEST_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_RESOURCE_REQUEST_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_RESOURCE_REQUEST_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_RESOURCE_REQUEST_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeResourceRequestCfm_Evt *evt = (MlmeResourceRequestCfm_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_RESOURCE_REQUEST_CFM_ID); \
    } \
}

/* -------------------------- mlme_resource_request_local_cfm -------------------------- */
typedef struct MlmeResourceRequestLocalCfm_Evt
{
    FsmEvent                        common;
    DataReference                   resourceDescriptors;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                macAddress;
    ResultCode                      resultCode;
} MlmeResourceRequestLocalCfm_Evt;

#define build_mlme_resource_request_local_cfm(event, pid, p_resourceDescriptors, p_macAddress, p_resultCode) \
{ \
    MlmeResourceRequestLocalCfm_Evt *evt = (MlmeResourceRequestLocalCfm_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestLocalCfm_Evt)); \
    evt->common.id            = MLME_RESOURCE_REQUEST_LOCAL_CFM_ID; \
    evt->common.destination   = pid; \
    evt->resourceDescriptors  = p_resourceDescriptors; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->macAddress           = p_macAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_resource_request_local_cfm(context, p_resourceDescriptors, p_macAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_local_cfm(newevt, 0, p_resourceDescriptors, p_macAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_RESOURCE_REQUEST_LOCAL_CFM_ID); \
}

#define send_mlme_resource_request_local_cfm_external(context, pid, p_resourceDescriptors, p_macAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_local_cfm(newevt, pid, p_resourceDescriptors, p_macAddress, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_RESOURCE_REQUEST_LOCAL_CFM_ID); \
}

#define send_mlme_resource_request_local_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_RESOURCE_REQUEST_LOCAL_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_RESOURCE_REQUEST_LOCAL_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_RESOURCE_REQUEST_LOCAL_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_RESOURCE_REQUEST_LOCAL_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeResourceRequestLocalCfm_Evt *evt = (MlmeResourceRequestLocalCfm_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestLocalCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->resourceDescriptors = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->macAddress, 6); \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_RESOURCE_REQUEST_LOCAL_CFM_ID); \
    } \
}

/* -------------------------- mlme_saquery_ind -------------------------- */
typedef struct MlmeSaqueryInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    CsrUint16                       transactionId[8];
} MlmeSaqueryInd_Evt;

#define build_mlme_saquery_ind(event, pid, p_peerStaAddress, p_transactionId) \
{ \
    MlmeSaqueryInd_Evt *evt = (MlmeSaqueryInd_Evt*) CsrPmalloc(sizeof(MlmeSaqueryInd_Evt)); \
    evt->common.id            = MLME_SAQUERY_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    CsrMemCpy(evt->transactionId, p_transactionId, sizeof(evt->transactionId)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_saquery_ind(context, p_peerStaAddress, p_transactionId) \
{ \
    FsmEvent *newevt; \
    build_mlme_saquery_ind(newevt, 0, p_peerStaAddress, p_transactionId); \
    fsm_send_event((context), newevt, pid, MLME_SAQUERY_IND_ID); \
}

#define send_mlme_saquery_ind_external(context, pid, p_peerStaAddress, p_transactionId) \
{ \
    FsmEvent *newevt; \
    build_mlme_saquery_ind(newevt, pid, p_peerStaAddress, p_transactionId); \
    fsm_send_event_external((context), newevt, pid, MLME_SAQUERY_IND_ID); \
}

#define send_mlme_saquery_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SAQUERY_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SAQUERY_IND Size %d bytes .... Should be %d", packedEventSize, MLME_SAQUERY_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SAQUERY_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SAQUERY_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSaqueryInd_Evt *evt = (MlmeSaqueryInd_Evt*) CsrPmalloc(sizeof(MlmeSaqueryInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        { \
        int i; \
        for(i=0; i<8; i++) \
        { \
            evt->transactionId[i] = event_unpack_CsrUint16(&buffer); \
        } \
        } \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SAQUERY_IND_ID); \
    } \
}

/* -------------------------- mlme_saquery_cfm -------------------------- */
typedef struct MlmeSaqueryCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    CsrUint16                       transactionId[8];
} MlmeSaqueryCfm_Evt;

#define build_mlme_saquery_cfm(event, pid, p_peerStaAddress, p_transactionId) \
{ \
    MlmeSaqueryCfm_Evt *evt = (MlmeSaqueryCfm_Evt*) CsrPmalloc(sizeof(MlmeSaqueryCfm_Evt)); \
    evt->common.id            = MLME_SAQUERY_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    CsrMemCpy(evt->transactionId, p_transactionId, sizeof(evt->transactionId)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_saquery_cfm(context, p_peerStaAddress, p_transactionId) \
{ \
    FsmEvent *newevt; \
    build_mlme_saquery_cfm(newevt, 0, p_peerStaAddress, p_transactionId); \
    fsm_send_event((context), newevt, pid, MLME_SAQUERY_CFM_ID); \
}

#define send_mlme_saquery_cfm_external(context, pid, p_peerStaAddress, p_transactionId) \
{ \
    FsmEvent *newevt; \
    build_mlme_saquery_cfm(newevt, pid, p_peerStaAddress, p_transactionId); \
    fsm_send_event_external((context), newevt, pid, MLME_SAQUERY_CFM_ID); \
}

#define send_mlme_saquery_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SAQUERY_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SAQUERY_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SAQUERY_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SAQUERY_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SAQUERY_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSaqueryCfm_Evt *evt = (MlmeSaqueryCfm_Evt*) CsrPmalloc(sizeof(MlmeSaqueryCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerStaAddress, 6); \
        { \
        int i; \
        for(i=0; i<8; i++) \
        { \
            evt->transactionId[i] = event_unpack_CsrUint16(&buffer); \
        } \
        } \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SAQUERY_CFM_ID); \
    } \
}

/* -------------------------- mlme_scan_ind -------------------------- */
typedef struct MlmeScanInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    Interface                       ifIndex;
    BssType                         bssType;
    unifi_MACAddress                bssid;
    TimeUnits                       beaconPeriod;
    TsfTime                         timestamp;
    TsfTime                         localTime;
    ChannelNumber                   channel;
    Megahertz                       channelFrequency;
    CapabilityInformation           capabilityInformation;
    Decibels                        rssi;
    Decibels                        snr;
    ReportedFrame                   reportedFrameInformation;
    Rcpi                            rcpiMeasurement;
    Rsni                            rsniMeasurement;
} MlmeScanInd_Evt;

#define build_mlme_scan_ind(event, pid, p_informationElements, p_ifIndex, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement) \
{ \
    MlmeScanInd_Evt *evt = (MlmeScanInd_Evt*) CsrPmalloc(sizeof(MlmeScanInd_Evt)); \
    evt->common.id            = MLME_SCAN_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->ifIndex              = p_ifIndex; \
    evt->bssType              = p_bssType; \
    evt->bssid                = p_bssid; \
    evt->beaconPeriod         = p_beaconPeriod; \
    evt->timestamp            = p_timestamp; \
    evt->localTime            = p_localTime; \
    evt->channel              = p_channel; \
    evt->channelFrequency     = p_channelFrequency; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->rssi                 = p_rssi; \
    evt->snr                  = p_snr; \
    evt->reportedFrameInformation = p_reportedFrameInformation; \
    evt->rcpiMeasurement      = p_rcpiMeasurement; \
    evt->rsniMeasurement      = p_rsniMeasurement; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_scan_ind(context, p_informationElements, p_ifIndex, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement) \
{ \
    FsmEvent *newevt; \
    build_mlme_scan_ind(newevt, 0, p_informationElements, p_ifIndex, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement); \
    fsm_send_event((context), newevt, pid, MLME_SCAN_IND_ID); \
}

#define send_mlme_scan_ind_external(context, pid, p_informationElements, p_ifIndex, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement) \
{ \
    FsmEvent *newevt; \
    build_mlme_scan_ind(newevt, pid, p_informationElements, p_ifIndex, p_bssType, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_channelFrequency, p_capabilityInformation, p_rssi, p_snr, p_reportedFrameInformation, p_rcpiMeasurement, p_rsniMeasurement); \
    fsm_send_event_external((context), newevt, pid, MLME_SCAN_IND_ID); \
}

#define send_mlme_scan_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SCAN_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SCAN_IND Size %d bytes .... Should be %d", packedEventSize, MLME_SCAN_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SCAN_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeScanInd_Evt *evt = (MlmeScanInd_Evt*) CsrPmalloc(sizeof(MlmeScanInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->ifIndex = event_unpack_CsrUint16(&buffer); \
        evt->bssType = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->bssid, 6); \
        evt->beaconPeriod = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->timestamp, 8); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->localTime, 8); \
        evt->channel = event_unpack_CsrUint16(&buffer); \
        evt->channelFrequency = event_unpack_CsrUint16(&buffer); \
        evt->capabilityInformation = event_unpack_CsrUint16(&buffer); \
        evt->rssi = event_unpack_CsrInt16(&buffer); \
        evt->snr = event_unpack_CsrInt16(&buffer); \
        evt->reportedFrameInformation = event_unpack_CsrUint16(&buffer); \
        evt->rcpiMeasurement = event_unpack_CsrUint16(&buffer); \
        evt->rsniMeasurement = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SCAN_IND_ID); \
    } \
}

/* -------------------------- mlme_scan_cfm -------------------------- */
typedef struct MlmeScanCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeScanCfm_Evt;

#define build_mlme_scan_cfm(event, pid, p_resultCode) \
{ \
    MlmeScanCfm_Evt *evt = (MlmeScanCfm_Evt*) CsrPmalloc(sizeof(MlmeScanCfm_Evt)); \
    evt->common.id            = MLME_SCAN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_scan_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_scan_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_SCAN_CFM_ID); \
}

#define send_mlme_scan_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_scan_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_SCAN_CFM_ID); \
}

#define send_mlme_scan_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SCAN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SCAN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SCAN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SCAN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SCAN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeScanCfm_Evt *evt = (MlmeScanCfm_Evt*) CsrPmalloc(sizeof(MlmeScanCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SCAN_CFM_ID); \
    } \
}

/* -------------------------- mlme_schedule_ind -------------------------- */
typedef struct MlmeScheduleInd_Evt
{
    FsmEvent                        common;
    DataReference                   scheduleElement;
    DataReference                   dummyDataRef2;
} MlmeScheduleInd_Evt;

#define build_mlme_schedule_ind(event, pid, p_scheduleElement) \
{ \
    MlmeScheduleInd_Evt *evt = (MlmeScheduleInd_Evt*) CsrPmalloc(sizeof(MlmeScheduleInd_Evt)); \
    evt->common.id            = MLME_SCHEDULE_IND_ID; \
    evt->common.destination   = pid; \
    evt->scheduleElement      = p_scheduleElement; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_schedule_ind(context, p_scheduleElement) \
{ \
    FsmEvent *newevt; \
    build_mlme_schedule_ind(newevt, 0, p_scheduleElement); \
    fsm_send_event((context), newevt, pid, MLME_SCHEDULE_IND_ID); \
}

#define send_mlme_schedule_ind_external(context, pid, p_scheduleElement) \
{ \
    FsmEvent *newevt; \
    build_mlme_schedule_ind(newevt, pid, p_scheduleElement); \
    fsm_send_event_external((context), newevt, pid, MLME_SCHEDULE_IND_ID); \
}

#define send_mlme_schedule_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SCHEDULE_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SCHEDULE_IND Size %d bytes .... Should be %d", packedEventSize, MLME_SCHEDULE_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SCHEDULE_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeScheduleInd_Evt *evt = (MlmeScheduleInd_Evt*) CsrPmalloc(sizeof(MlmeScheduleInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->scheduleElement = dr1; \
        evt->dummyDataRef2 = dr2; \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SCHEDULE_IND_ID); \
    } \
}

/* -------------------------- mlme_schedule_cfm -------------------------- */
typedef struct MlmeScheduleCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeScheduleCfm_Evt;

#define build_mlme_schedule_cfm(event, pid, p_resultCode) \
{ \
    MlmeScheduleCfm_Evt *evt = (MlmeScheduleCfm_Evt*) CsrPmalloc(sizeof(MlmeScheduleCfm_Evt)); \
    evt->common.id            = MLME_SCHEDULE_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_schedule_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_schedule_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_SCHEDULE_CFM_ID); \
}

#define send_mlme_schedule_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_schedule_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_SCHEDULE_CFM_ID); \
}

#define send_mlme_schedule_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SCHEDULE_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SCHEDULE_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SCHEDULE_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SCHEDULE_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SCHEDULE_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeScheduleCfm_Evt *evt = (MlmeScheduleCfm_Evt*) CsrPmalloc(sizeof(MlmeScheduleCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SCHEDULE_CFM_ID); \
    } \
}

/* -------------------------- mlme_set_cfm -------------------------- */
typedef struct MlmeSetCfm_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttributeValue;
    DataReference                   dummyDataRef2;
    MibStatus                       status;
    CsrUint16                       errorIndex;
} MlmeSetCfm_Evt;

#define build_mlme_set_cfm(event, pid, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    MlmeSetCfm_Evt *evt = (MlmeSetCfm_Evt*) CsrPmalloc(sizeof(MlmeSetCfm_Evt)); \
    evt->common.id            = MLME_SET_CFM_ID; \
    evt->common.destination   = pid; \
    evt->mibAttributeValue    = p_mibAttributeValue; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->status               = p_status; \
    evt->errorIndex           = p_errorIndex; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_set_cfm(context, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    FsmEvent *newevt; \
    build_mlme_set_cfm(newevt, 0, p_mibAttributeValue, p_status, p_errorIndex); \
    fsm_send_event((context), newevt, pid, MLME_SET_CFM_ID); \
}

#define send_mlme_set_cfm_external(context, pid, p_mibAttributeValue, p_status, p_errorIndex) \
{ \
    FsmEvent *newevt; \
    build_mlme_set_cfm(newevt, pid, p_mibAttributeValue, p_status, p_errorIndex); \
    fsm_send_event_external((context), newevt, pid, MLME_SET_CFM_ID); \
}

#define send_mlme_set_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SET_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SET_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SET_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SET_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSetCfm_Evt *evt = (MlmeSetCfm_Evt*) CsrPmalloc(sizeof(MlmeSetCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->mibAttributeValue = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->status = event_unpack_CsrUint16(&buffer); \
        evt->errorIndex = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SET_CFM_ID); \
    } \
}

/* -------------------------- mlme_setkeys_cfm -------------------------- */
typedef struct MlmeSetkeysCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeSetkeysCfm_Evt;

#define build_mlme_setkeys_cfm(event, pid, p_resultCode) \
{ \
    MlmeSetkeysCfm_Evt *evt = (MlmeSetkeysCfm_Evt*) CsrPmalloc(sizeof(MlmeSetkeysCfm_Evt)); \
    evt->common.id            = MLME_SETKEYS_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_setkeys_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_setkeys_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_SETKEYS_CFM_ID); \
}

#define send_mlme_setkeys_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_setkeys_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_SETKEYS_CFM_ID); \
}

#define send_mlme_setkeys_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SETKEYS_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SETKEYS_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SETKEYS_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SETKEYS_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SETKEYS_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSetkeysCfm_Evt *evt = (MlmeSetkeysCfm_Evt*) CsrPmalloc(sizeof(MlmeSetkeysCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SETKEYS_CFM_ID); \
    } \
}

/* -------------------------- mlme_setprotection_cfm -------------------------- */
typedef struct MlmeSetprotectionCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeSetprotectionCfm_Evt;

#define build_mlme_setprotection_cfm(event, pid, p_resultCode) \
{ \
    MlmeSetprotectionCfm_Evt *evt = (MlmeSetprotectionCfm_Evt*) CsrPmalloc(sizeof(MlmeSetprotectionCfm_Evt)); \
    evt->common.id            = MLME_SETPROTECTION_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_setprotection_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_setprotection_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_SETPROTECTION_CFM_ID); \
}

#define send_mlme_setprotection_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_setprotection_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_SETPROTECTION_CFM_ID); \
}

#define send_mlme_setprotection_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SETPROTECTION_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SETPROTECTION_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SETPROTECTION_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SETPROTECTION_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SETPROTECTION_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSetprotectionCfm_Evt *evt = (MlmeSetprotectionCfm_Evt*) CsrPmalloc(sizeof(MlmeSetprotectionCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SETPROTECTION_CFM_ID); \
    } \
}

/* -------------------------- mlme_set_unitdata_filter_cfm -------------------------- */
typedef struct MlmeSetUnitdataFilterCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeSetUnitdataFilterCfm_Evt;

#define build_mlme_set_unitdata_filter_cfm(event, pid, p_resultCode) \
{ \
    MlmeSetUnitdataFilterCfm_Evt *evt = (MlmeSetUnitdataFilterCfm_Evt*) CsrPmalloc(sizeof(MlmeSetUnitdataFilterCfm_Evt)); \
    evt->common.id            = MLME_SET_UNITDATA_FILTER_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_set_unitdata_filter_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_set_unitdata_filter_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_SET_UNITDATA_FILTER_CFM_ID); \
}

#define send_mlme_set_unitdata_filter_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_set_unitdata_filter_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_SET_UNITDATA_FILTER_CFM_ID); \
}

#define send_mlme_set_unitdata_filter_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SET_UNITDATA_FILTER_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SET_UNITDATA_FILTER_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SET_UNITDATA_FILTER_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SET_UNITDATA_FILTER_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SET_UNITDATA_FILTER_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSetUnitdataFilterCfm_Evt *evt = (MlmeSetUnitdataFilterCfm_Evt*) CsrPmalloc(sizeof(MlmeSetUnitdataFilterCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SET_UNITDATA_FILTER_CFM_ID); \
    } \
}

/* -------------------------- mlme_sniffjoin_cfm -------------------------- */
typedef struct MlmeSniffjoinCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeSniffjoinCfm_Evt;

#define build_mlme_sniffjoin_cfm(event, pid, p_resultCode) \
{ \
    MlmeSniffjoinCfm_Evt *evt = (MlmeSniffjoinCfm_Evt*) CsrPmalloc(sizeof(MlmeSniffjoinCfm_Evt)); \
    evt->common.id            = MLME_SNIFFJOIN_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_sniffjoin_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_sniffjoin_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_SNIFFJOIN_CFM_ID); \
}

#define send_mlme_sniffjoin_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_sniffjoin_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_SNIFFJOIN_CFM_ID); \
}

#define send_mlme_sniffjoin_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_SNIFFJOIN_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_SNIFFJOIN_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_SNIFFJOIN_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SNIFFJOIN_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_SNIFFJOIN_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeSniffjoinCfm_Evt *evt = (MlmeSniffjoinCfm_Evt*) CsrPmalloc(sizeof(MlmeSniffjoinCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_SNIFFJOIN_CFM_ID); \
    } \
}

/* -------------------------- mlme_stakeyestablished_ind -------------------------- */
typedef struct MlmeStakeyestablishedInd_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                address1;
    unifi_MACAddress                address2;
} MlmeStakeyestablishedInd_Evt;

#define build_mlme_stakeyestablished_ind(event, pid, p_address1, p_address2) \
{ \
    MlmeStakeyestablishedInd_Evt *evt = (MlmeStakeyestablishedInd_Evt*) CsrPmalloc(sizeof(MlmeStakeyestablishedInd_Evt)); \
    evt->common.id            = MLME_STAKEYESTABLISHED_IND_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->address1             = p_address1; \
    evt->address2             = p_address2; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_stakeyestablished_ind(context, p_address1, p_address2) \
{ \
    FsmEvent *newevt; \
    build_mlme_stakeyestablished_ind(newevt, 0, p_address1, p_address2); \
    fsm_send_event((context), newevt, pid, MLME_STAKEYESTABLISHED_IND_ID); \
}

#define send_mlme_stakeyestablished_ind_external(context, pid, p_address1, p_address2) \
{ \
    FsmEvent *newevt; \
    build_mlme_stakeyestablished_ind(newevt, pid, p_address1, p_address2); \
    fsm_send_event_external((context), newevt, pid, MLME_STAKEYESTABLISHED_IND_ID); \
}

#define send_mlme_stakeyestablished_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_STAKEYESTABLISHED_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_STAKEYESTABLISHED_IND Size %d bytes .... Should be %d", packedEventSize, MLME_STAKEYESTABLISHED_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_STAKEYESTABLISHED_IND.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_STAKEYESTABLISHED_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeStakeyestablishedInd_Evt *evt = (MlmeStakeyestablishedInd_Evt*) CsrPmalloc(sizeof(MlmeStakeyestablishedInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->address1, 6); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->address2, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_STAKEYESTABLISHED_IND_ID); \
    } \
}

/* -------------------------- mlme_start_cfm -------------------------- */
typedef struct MlmeStartCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    unifi_MACAddress                bssid;
} MlmeStartCfm_Evt;

#define build_mlme_start_cfm(event, pid, p_resultCode, p_bssid) \
{ \
    MlmeStartCfm_Evt *evt = (MlmeStartCfm_Evt*) CsrPmalloc(sizeof(MlmeStartCfm_Evt)); \
    evt->common.id            = MLME_START_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->bssid                = p_bssid; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_start_cfm(context, p_resultCode, p_bssid) \
{ \
    FsmEvent *newevt; \
    build_mlme_start_cfm(newevt, 0, p_resultCode, p_bssid); \
    fsm_send_event((context), newevt, pid, MLME_START_CFM_ID); \
}

#define send_mlme_start_cfm_external(context, pid, p_resultCode, p_bssid) \
{ \
    FsmEvent *newevt; \
    build_mlme_start_cfm(newevt, pid, p_resultCode, p_bssid); \
    fsm_send_event_external((context), newevt, pid, MLME_START_CFM_ID); \
}

#define send_mlme_start_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_START_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_START_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_START_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_START_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_START_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeStartCfm_Evt *evt = (MlmeStartCfm_Evt*) CsrPmalloc(sizeof(MlmeStartCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->bssid, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_START_CFM_ID); \
    } \
}

/* -------------------------- mlme_tpcadapt_cfm -------------------------- */
typedef struct MlmeTpcadaptCfm_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
    Rate                            requestRate;
    Decibels                        requestTransmitPower;
    Decibels                        requestLinkMargin;
    Rate                            reportRate;
    Decibels                        reportTransmitPower;
    Decibels                        reportLinkMargin;
} MlmeTpcadaptCfm_Evt;

#define build_mlme_tpcadapt_cfm(event, pid, p_informationElements, p_resultCode, p_dialogToken, p_requestRate, p_requestTransmitPower, p_requestLinkMargin, p_reportRate, p_reportTransmitPower, p_reportLinkMargin) \
{ \
    MlmeTpcadaptCfm_Evt *evt = (MlmeTpcadaptCfm_Evt*) CsrPmalloc(sizeof(MlmeTpcadaptCfm_Evt)); \
    evt->common.id            = MLME_TPCADAPT_CFM_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    evt->requestRate          = p_requestRate; \
    evt->requestTransmitPower = p_requestTransmitPower; \
    evt->requestLinkMargin    = p_requestLinkMargin; \
    evt->reportRate           = p_reportRate; \
    evt->reportTransmitPower  = p_reportTransmitPower; \
    evt->reportLinkMargin     = p_reportLinkMargin; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_tpcadapt_cfm(context, p_informationElements, p_resultCode, p_dialogToken, p_requestRate, p_requestTransmitPower, p_requestLinkMargin, p_reportRate, p_reportTransmitPower, p_reportLinkMargin) \
{ \
    FsmEvent *newevt; \
    build_mlme_tpcadapt_cfm(newevt, 0, p_informationElements, p_resultCode, p_dialogToken, p_requestRate, p_requestTransmitPower, p_requestLinkMargin, p_reportRate, p_reportTransmitPower, p_reportLinkMargin); \
    fsm_send_event((context), newevt, pid, MLME_TPCADAPT_CFM_ID); \
}

#define send_mlme_tpcadapt_cfm_external(context, pid, p_informationElements, p_resultCode, p_dialogToken, p_requestRate, p_requestTransmitPower, p_requestLinkMargin, p_reportRate, p_reportTransmitPower, p_reportLinkMargin) \
{ \
    FsmEvent *newevt; \
    build_mlme_tpcadapt_cfm(newevt, pid, p_informationElements, p_resultCode, p_dialogToken, p_requestRate, p_requestTransmitPower, p_requestLinkMargin, p_reportRate, p_reportTransmitPower, p_reportLinkMargin); \
    fsm_send_event_external((context), newevt, pid, MLME_TPCADAPT_CFM_ID); \
}

#define send_mlme_tpcadapt_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_TPCADAPT_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_TPCADAPT_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_TPCADAPT_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_TPCADAPT_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeTpcadaptCfm_Evt *evt = (MlmeTpcadaptCfm_Evt*) CsrPmalloc(sizeof(MlmeTpcadaptCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        evt->dialogToken = event_unpack_CsrUint16(&buffer); \
        evt->requestRate = event_unpack_CsrUint16(&buffer); \
        evt->requestTransmitPower = event_unpack_CsrInt16(&buffer); \
        evt->requestLinkMargin = event_unpack_CsrInt16(&buffer); \
        evt->reportRate = event_unpack_CsrUint16(&buffer); \
        evt->reportTransmitPower = event_unpack_CsrInt16(&buffer); \
        evt->reportLinkMargin = event_unpack_CsrInt16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_TPCADAPT_CFM_ID); \
    } \
}

/* -------------------------- mlme_triggered_get_ind -------------------------- */
typedef struct MlmeTriggeredGetInd_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttributeValue;
    DataReference                   dummyDataRef2;
    MibStatus                       status;
    CsrUint16                       errorIndex;
    TriggeredId                     triggeredId;
} MlmeTriggeredGetInd_Evt;

#define build_mlme_triggered_get_ind(event, pid, p_mibAttributeValue, p_status, p_errorIndex, p_triggeredId) \
{ \
    MlmeTriggeredGetInd_Evt *evt = (MlmeTriggeredGetInd_Evt*) CsrPmalloc(sizeof(MlmeTriggeredGetInd_Evt)); \
    evt->common.id            = MLME_TRIGGERED_GET_IND_ID; \
    evt->common.destination   = pid; \
    evt->mibAttributeValue    = p_mibAttributeValue; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->status               = p_status; \
    evt->errorIndex           = p_errorIndex; \
    evt->triggeredId          = p_triggeredId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_triggered_get_ind(context, p_mibAttributeValue, p_status, p_errorIndex, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_triggered_get_ind(newevt, 0, p_mibAttributeValue, p_status, p_errorIndex, p_triggeredId); \
    fsm_send_event((context), newevt, pid, MLME_TRIGGERED_GET_IND_ID); \
}

#define send_mlme_triggered_get_ind_external(context, pid, p_mibAttributeValue, p_status, p_errorIndex, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_triggered_get_ind(newevt, pid, p_mibAttributeValue, p_status, p_errorIndex, p_triggeredId); \
    fsm_send_event_external((context), newevt, pid, MLME_TRIGGERED_GET_IND_ID); \
}

#define send_mlme_triggered_get_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_TRIGGERED_GET_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_TRIGGERED_GET_IND Size %d bytes .... Should be %d", packedEventSize, MLME_TRIGGERED_GET_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_TRIGGERED_GET_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeTriggeredGetInd_Evt *evt = (MlmeTriggeredGetInd_Evt*) CsrPmalloc(sizeof(MlmeTriggeredGetInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->mibAttributeValue = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->status = event_unpack_CsrUint16(&buffer); \
        evt->errorIndex = event_unpack_CsrUint16(&buffer); \
        evt->triggeredId = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_TRIGGERED_GET_IND_ID); \
    } \
}

/* -------------------------- mlme_vspecific_ind -------------------------- */
typedef struct MlmeVspecificInd_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
} MlmeVspecificInd_Evt;

#define build_mlme_vspecific_ind(event, pid, p_informationElements, p_peerMacAddress) \
{ \
    MlmeVspecificInd_Evt *evt = (MlmeVspecificInd_Evt*) CsrPmalloc(sizeof(MlmeVspecificInd_Evt)); \
    evt->common.id            = MLME_VSPECIFIC_IND_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_vspecific_ind(context, p_informationElements, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_vspecific_ind(newevt, 0, p_informationElements, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_VSPECIFIC_IND_ID); \
}

#define send_mlme_vspecific_ind_external(context, pid, p_informationElements, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_vspecific_ind(newevt, pid, p_informationElements, p_peerMacAddress); \
    fsm_send_event_external((context), newevt, pid, MLME_VSPECIFIC_IND_ID); \
}

#define send_mlme_vspecific_ind_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_VSPECIFIC_IND_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_VSPECIFIC_IND Size %d bytes .... Should be %d", packedEventSize, MLME_VSPECIFIC_IND_SIZE)); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_VSPECIFIC_IND.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeVspecificInd_Evt *evt = (MlmeVspecificInd_Evt*) CsrPmalloc(sizeof(MlmeVspecificInd_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->informationElements = dr1; \
        evt->dummyDataRef2 = dr2; \
        event_unpack_buffer(&buffer, (CsrUint8*)&evt->peerMacAddress, 6); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_VSPECIFIC_IND_ID); \
    } \
}

/* -------------------------- mlme_vspecific_cfm -------------------------- */
typedef struct MlmeVspecificCfm_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
} MlmeVspecificCfm_Evt;

#define build_mlme_vspecific_cfm(event, pid, p_resultCode) \
{ \
    MlmeVspecificCfm_Evt *evt = (MlmeVspecificCfm_Evt*) CsrPmalloc(sizeof(MlmeVspecificCfm_Evt)); \
    evt->common.id            = MLME_VSPECIFIC_CFM_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_vspecific_cfm(context, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_vspecific_cfm(newevt, 0, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_VSPECIFIC_CFM_ID); \
}

#define send_mlme_vspecific_cfm_external(context, pid, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_vspecific_cfm(newevt, pid, p_resultCode); \
    fsm_send_event_external((context), newevt, pid, MLME_VSPECIFIC_CFM_ID); \
}

#define send_mlme_vspecific_cfm_from_hip(context, pid, packedEvent, packedEventSize, dr1, dr2, result) \
{ \
    result = TRUE; \
    if (MLME_VSPECIFIC_CFM_SIZE != packedEventSize) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Incorrect MLME_VSPECIFIC_CFM Size %d bytes .... Should be %d", packedEventSize, MLME_VSPECIFIC_CFM_SIZE)); \
        result = FALSE; \
    } \
    if (dr1.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_VSPECIFIC_CFM.dummyDataRef1")); \
        result = FALSE; \
    } \
    if (dr2.dataLength != 0) \
    { \
        sme_trace_crit((TR_SYS_SAP, "Unexpected Data for MLME_VSPECIFIC_CFM.dummyDataRef2")); \
        result = FALSE; \
    } \
    if(result == TRUE)\
    { \
        MlmeVspecificCfm_Evt *evt = (MlmeVspecificCfm_Evt*) CsrPmalloc(sizeof(MlmeVspecificCfm_Evt)); \
        CsrUint8* buffer = (CsrUint8*)packedEvent; /*lint -e550*/\
        buffer += 14; /* Skip the Header and Data Refs */ \
        evt->dummyDataRef1 = dr1; \
        evt->dummyDataRef2 = dr2; \
        evt->resultCode = event_unpack_CsrUint16(&buffer); \
        fsm_send_event_external((context), (FsmEvent*)evt, pid, MLME_VSPECIFIC_CFM_ID); \
    } \
}


/* -------------------------- debug_generic_req -------------------------- */
typedef struct DebugGenericReq_Evt
{
    FsmEvent                        common;
    DataReference                   debugVariable;
    DataReference                   dummyDataRef2;
    CsrUint16                       debugWords[8];
} DebugGenericReq_Evt;

#define build_debug_generic_req(event, pid, p_debugVariable, p_debugWords) \
{ \
    DebugGenericReq_Evt *evt = (DebugGenericReq_Evt*) CsrPmalloc(sizeof(DebugGenericReq_Evt)); \
    evt->common.id            = DEBUG_GENERIC_REQ_ID; \
    evt->common.destination   = pid; \
    evt->debugVariable        = p_debugVariable; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemCpy(evt->debugWords, p_debugWords, sizeof(evt->debugWords)); \
    event = (FsmEvent*)evt; \
}

#define send_debug_generic_req_internal(context, pid, p_debugVariable, p_debugWords) \
{ \
    FsmEvent *newevt; \
    build_debug_generic_req(newevt, pid, p_debugVariable, p_debugWords); \
    fsm_send_event((context), newevt, pid, DEBUG_GENERIC_REQ_ID); \
}

#define send_debug_generic_req(context, p_debugVariable, p_debugWords) \
{ \
    CsrUint8 evt[DEBUG_GENERIC_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, DEBUG_GENERIC_REQ_ID, context->currentInstance->instanceId, &(p_debugVariable), NULL); \
    { \
    int i; \
    for(i=0; i<8; i++) \
    { \
        packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_debugWords[i]); \
    } \
    } \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(DEBUG_GENERIC_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- ds_sta_notify_req -------------------------- */
typedef struct DsStaNotifyReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                staAddress;
    UpdateType                      updateType;
} DsStaNotifyReq_Evt;

#define build_ds_sta_notify_req(event, pid, p_staAddress, p_updateType) \
{ \
    DsStaNotifyReq_Evt *evt = (DsStaNotifyReq_Evt*) CsrPmalloc(sizeof(DsStaNotifyReq_Evt)); \
    evt->common.id            = DS_STA_NOTIFY_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->staAddress           = p_staAddress; \
    evt->updateType           = p_updateType; \
    event = (FsmEvent*)evt; \
}

#define send_ds_sta_notify_req_internal(context, pid, p_staAddress, p_updateType) \
{ \
    FsmEvent *newevt; \
    build_ds_sta_notify_req(newevt, pid, p_staAddress, p_updateType); \
    fsm_send_event((context), newevt, pid, DS_STA_NOTIFY_REQ_ID); \
}

#define send_ds_sta_notify_req(context, p_staAddress, p_updateType) \
{ \
    CsrUint8 evt[DS_STA_NOTIFY_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, DS_STA_NOTIFY_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_staAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_updateType); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(DS_STA_NOTIFY_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- ds_unitdata_req -------------------------- */
typedef struct DsUnitdataReq_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                da;
    unifi_MACAddress                sa;
    RoutingInformation              routingInformation;
    Priority                        priority;
    ServiceClass                    serviceClass;
    SourceType                      sourceType;
} DsUnitdataReq_Evt;

#define build_ds_unitdata_req(event, pid, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_sourceType) \
{ \
    DsUnitdataReq_Evt *evt = (DsUnitdataReq_Evt*) CsrPmalloc(sizeof(DsUnitdataReq_Evt)); \
    evt->common.id            = DS_UNITDATA_REQ_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->da                   = p_da; \
    evt->sa                   = p_sa; \
    evt->routingInformation   = p_routingInformation; \
    evt->priority             = p_priority; \
    evt->serviceClass         = p_serviceClass; \
    evt->sourceType           = p_sourceType; \
    event = (FsmEvent*)evt; \
}

#define send_ds_unitdata_req_internal(context, pid, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_sourceType) \
{ \
    FsmEvent *newevt; \
    build_ds_unitdata_req(newevt, pid, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_sourceType); \
    fsm_send_event((context), newevt, pid, DS_UNITDATA_REQ_ID); \
}

#define send_ds_unitdata_req(context, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_sourceType) \
{ \
    CsrUint8 evt[DS_UNITDATA_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, DS_UNITDATA_REQ_ID, context->currentInstance->instanceId, &(p_data), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_da, 6); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_sa, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_routingInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_priority); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_serviceClass); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_sourceType); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(DS_UNITDATA_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- ds_unitdata_rsp -------------------------- */
typedef struct DsUnitdataRsp_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                da;
    unifi_MACAddress                sa;
    TransmissionStatus              transmissionStatus;
    RoutingInformation              routingInformation;
    Priority                        providedPriority;
    ServiceClass                    providedServiceClass;
    ClientTag                       providedHostTag;
} DsUnitdataRsp_Evt;

#define build_ds_unitdata_rsp(event, pid, p_da, p_sa, p_transmissionStatus, p_routingInformation, p_providedPriority, p_providedServiceClass, p_providedHostTag) \
{ \
    DsUnitdataRsp_Evt *evt = (DsUnitdataRsp_Evt*) CsrPmalloc(sizeof(DsUnitdataRsp_Evt)); \
    evt->common.id            = DS_UNITDATA_RSP_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->da                   = p_da; \
    evt->sa                   = p_sa; \
    evt->transmissionStatus   = p_transmissionStatus; \
    evt->routingInformation   = p_routingInformation; \
    evt->providedPriority     = p_providedPriority; \
    evt->providedServiceClass = p_providedServiceClass; \
    evt->providedHostTag      = p_providedHostTag; \
    event = (FsmEvent*)evt; \
}

#define send_ds_unitdata_rsp_internal(context, pid, p_da, p_sa, p_transmissionStatus, p_routingInformation, p_providedPriority, p_providedServiceClass, p_providedHostTag) \
{ \
    FsmEvent *newevt; \
    build_ds_unitdata_rsp(newevt, pid, p_da, p_sa, p_transmissionStatus, p_routingInformation, p_providedPriority, p_providedServiceClass, p_providedHostTag); \
    fsm_send_event((context), newevt, pid, DS_UNITDATA_RSP_ID); \
}

#define send_ds_unitdata_rsp(context, p_da, p_sa, p_transmissionStatus, p_routingInformation, p_providedPriority, p_providedServiceClass, p_providedHostTag) \
{ \
    CsrUint8 evt[DS_UNITDATA_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, DS_UNITDATA_RSP_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_da, 6); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_sa, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_transmissionStatus); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_routingInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_providedPriority); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_providedServiceClass); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_providedHostTag); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(DS_UNITDATA_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- ma_packet_req -------------------------- */
typedef struct MaPacketReq_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    Rate                            transmitRate;
    ClientTag                       hostTag;
    Priority                        priority;
} MaPacketReq_Evt;

#define build_ma_packet_req(event, pid, p_data, p_transmitRate, p_hostTag, p_priority) \
{ \
    MaPacketReq_Evt *evt = (MaPacketReq_Evt*) CsrPmalloc(sizeof(MaPacketReq_Evt)); \
    evt->common.id            = MA_PACKET_REQ_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->transmitRate         = p_transmitRate; \
    evt->hostTag              = p_hostTag; \
    evt->priority             = p_priority; \
    event = (FsmEvent*)evt; \
}

#define send_ma_packet_req_internal(context, pid, p_data, p_transmitRate, p_hostTag, p_priority) \
{ \
    FsmEvent *newevt; \
    build_ma_packet_req(newevt, pid, p_data, p_transmitRate, p_hostTag, p_priority); \
    fsm_send_event((context), newevt, pid, MA_PACKET_REQ_ID); \
}

#define send_ma_packet_req(context, p_data, p_transmitRate, p_hostTag, p_priority) \
{ \
    CsrUint8 evt[MA_PACKET_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MA_PACKET_REQ_ID, context->currentInstance->instanceId, &(p_data), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_transmitRate); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_hostTag); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_priority); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MA_PACKET_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- ma_unitdata_req -------------------------- */
typedef struct MaUnitdataReq_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                da;
    unifi_MACAddress                sa;
    RoutingInformation              routingInformation;
    Priority                        priority;
    ServiceClass                    serviceClass;
    ClientTag                       hostTag;
} MaUnitdataReq_Evt;

#define build_ma_unitdata_req(event, pid, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_hostTag) \
{ \
    MaUnitdataReq_Evt *evt = (MaUnitdataReq_Evt*) CsrPmalloc(sizeof(MaUnitdataReq_Evt)); \
    evt->common.id            = MA_UNITDATA_REQ_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->da                   = p_da; \
    evt->sa                   = p_sa; \
    evt->routingInformation   = p_routingInformation; \
    evt->priority             = p_priority; \
    evt->serviceClass         = p_serviceClass; \
    evt->hostTag              = p_hostTag; \
    event = (FsmEvent*)evt; \
}

#define send_ma_unitdata_req_internal(context, pid, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ma_unitdata_req(newevt, pid, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_hostTag); \
    fsm_send_event((context), newevt, pid, MA_UNITDATA_REQ_ID); \
}

#define send_ma_unitdata_req(context, p_data, p_da, p_sa, p_routingInformation, p_priority, p_serviceClass, p_hostTag) \
{ \
    CsrUint8 evt[MA_UNITDATA_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MA_UNITDATA_REQ_ID, context->currentInstance->instanceId, &(p_data), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_da, 6); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_sa, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_routingInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_priority); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_serviceClass); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_hostTag); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MA_UNITDATA_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- ma_unitdata_cancel_req -------------------------- */
typedef struct MaUnitdataCancelReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ClientTag                       hostTag;
} MaUnitdataCancelReq_Evt;

#define build_ma_unitdata_cancel_req(event, pid, p_hostTag) \
{ \
    MaUnitdataCancelReq_Evt *evt = (MaUnitdataCancelReq_Evt*) CsrPmalloc(sizeof(MaUnitdataCancelReq_Evt)); \
    evt->common.id            = MA_UNITDATA_CANCEL_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->hostTag              = p_hostTag; \
    event = (FsmEvent*)evt; \
}

#define send_ma_unitdata_cancel_req_internal(context, pid, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_ma_unitdata_cancel_req(newevt, pid, p_hostTag); \
    fsm_send_event((context), newevt, pid, MA_UNITDATA_CANCEL_REQ_ID); \
}

#define send_ma_unitdata_cancel_req(context, p_hostTag) \
{ \
    CsrUint8 evt[MA_UNITDATA_CANCEL_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MA_UNITDATA_CANCEL_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_hostTag); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MA_UNITDATA_CANCEL_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_addba_req -------------------------- */
typedef struct MlmeAddbaReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    DialogToken                     dialogToken;
    Priority                        tid;
    BlockAckPolicy                  blockAckPolicy;
    CsrUint16                       bufferSize;
    TimeUnits                       blockAckTimeout;
    TimeUnits                       addbaFailureTimeout;
    SequenceNumber                  blockAckStartingSequenceControl;
} MlmeAddbaReq_Evt;

#define build_mlme_addba_req(event, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout, p_addbaFailureTimeout, p_blockAckStartingSequenceControl) \
{ \
    MlmeAddbaReq_Evt *evt = (MlmeAddbaReq_Evt*) CsrPmalloc(sizeof(MlmeAddbaReq_Evt)); \
    evt->common.id            = MLME_ADDBA_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->tid                  = p_tid; \
    evt->blockAckPolicy       = p_blockAckPolicy; \
    evt->bufferSize           = p_bufferSize; \
    evt->blockAckTimeout      = p_blockAckTimeout; \
    evt->addbaFailureTimeout  = p_addbaFailureTimeout; \
    evt->blockAckStartingSequenceControl = p_blockAckStartingSequenceControl; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addba_req_internal(context, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout, p_addbaFailureTimeout, p_blockAckStartingSequenceControl) \
{ \
    FsmEvent *newevt; \
    build_mlme_addba_req(newevt, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout, p_addbaFailureTimeout, p_blockAckStartingSequenceControl); \
    fsm_send_event((context), newevt, pid, MLME_ADDBA_REQ_ID); \
}

#define send_mlme_addba_req(context, p_peerQstaAddress, p_dialogToken, p_tid, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout, p_addbaFailureTimeout, p_blockAckStartingSequenceControl) \
{ \
    CsrUint8 evt[MLME_ADDBA_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADDBA_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerQstaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_tid); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blockAckPolicy); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_bufferSize); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blockAckTimeout); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_addbaFailureTimeout); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blockAckStartingSequenceControl); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADDBA_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_addba_rsp -------------------------- */
typedef struct MlmeAddbaRsp_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    DialogToken                     dialogToken;
    Priority                        tid;
    ResultCode                      resultCode;
    BlockAckPolicy                  blockAckPolicy;
    CsrUint16                       bufferSize;
    TimeUnits                       blockAckTimeout;
} MlmeAddbaRsp_Evt;

#define build_mlme_addba_rsp(event, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    MlmeAddbaRsp_Evt *evt = (MlmeAddbaRsp_Evt*) CsrPmalloc(sizeof(MlmeAddbaRsp_Evt)); \
    evt->common.id            = MLME_ADDBA_RSP_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->tid                  = p_tid; \
    evt->resultCode           = p_resultCode; \
    evt->blockAckPolicy       = p_blockAckPolicy; \
    evt->bufferSize           = p_bufferSize; \
    evt->blockAckTimeout      = p_blockAckTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addba_rsp_internal(context, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_addba_rsp(newevt, pid, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout); \
    fsm_send_event((context), newevt, pid, MLME_ADDBA_RSP_ID); \
}

#define send_mlme_addba_rsp(context, p_peerQstaAddress, p_dialogToken, p_tid, p_resultCode, p_blockAckPolicy, p_bufferSize, p_blockAckTimeout) \
{ \
    CsrUint8 evt[MLME_ADDBA_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADDBA_RSP_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerQstaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_tid); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_resultCode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blockAckPolicy); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_bufferSize); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blockAckTimeout); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADDBA_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_addts_req -------------------------- */
typedef struct MlmeAddtsReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    DialogToken                     dialogToken;
    TimeUnits                       addtsFailureTimeout;
} MlmeAddtsReq_Evt;

#define build_mlme_addts_req(event, pid, p_informationElements, p_dialogToken, p_addtsFailureTimeout) \
{ \
    MlmeAddtsReq_Evt *evt = (MlmeAddtsReq_Evt*) CsrPmalloc(sizeof(MlmeAddtsReq_Evt)); \
    evt->common.id            = MLME_ADDTS_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->dialogToken          = p_dialogToken; \
    evt->addtsFailureTimeout  = p_addtsFailureTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addts_req_internal(context, pid, p_informationElements, p_dialogToken, p_addtsFailureTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_addts_req(newevt, pid, p_informationElements, p_dialogToken, p_addtsFailureTimeout); \
    fsm_send_event((context), newevt, pid, MLME_ADDTS_REQ_ID); \
}

#define send_mlme_addts_req(context, p_informationElements, p_dialogToken, p_addtsFailureTimeout) \
{ \
    CsrUint8 evt[MLME_ADDTS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADDTS_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_addtsFailureTimeout); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADDTS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_addts_rsp -------------------------- */
typedef struct MlmeAddtsRsp_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    ResultCode                      resultCode;
    DialogToken                     dialogToken;
    unifi_MACAddress                nonApqstaAddress;
} MlmeAddtsRsp_Evt;

#define build_mlme_addts_rsp(event, pid, p_informationElements, p_resultCode, p_dialogToken, p_nonApqstaAddress) \
{ \
    MlmeAddtsRsp_Evt *evt = (MlmeAddtsRsp_Evt*) CsrPmalloc(sizeof(MlmeAddtsRsp_Evt)); \
    evt->common.id            = MLME_ADDTS_RSP_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->resultCode           = p_resultCode; \
    evt->dialogToken          = p_dialogToken; \
    evt->nonApqstaAddress     = p_nonApqstaAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_addts_rsp_internal(context, pid, p_informationElements, p_resultCode, p_dialogToken, p_nonApqstaAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_addts_rsp(newevt, pid, p_informationElements, p_resultCode, p_dialogToken, p_nonApqstaAddress); \
    fsm_send_event((context), newevt, pid, MLME_ADDTS_RSP_ID); \
}

#define send_mlme_addts_rsp(context, p_informationElements, p_resultCode, p_dialogToken, p_nonApqstaAddress) \
{ \
    CsrUint8 evt[MLME_ADDTS_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADDTS_RSP_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_resultCode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_nonApqstaAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADDTS_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_add_autonomous_scan_req -------------------------- */
typedef struct MlmeAddAutonomousScanReq_Evt
{
    FsmEvent                        common;
    DataReference                   channelList;
    DataReference                   informationElements;
    AutonomousScanId                autonomousScanId;
    Interface                       ifIndex;
    ChannelStartingFactor           channelStartingFactor;
    BssType                         bssType;
    unifi_MACAddress                bssid;
    ScanType                        scanType;
    Microseconds32                  probeDelay;
    TimeUnits                       minChannelTime;
    TimeUnits                       maxChannelTime;
} MlmeAddAutonomousScanReq_Evt;

#define build_mlme_add_autonomous_scan_req(event, pid, p_channelList, p_informationElements, p_autonomousScanId, p_ifIndex, p_channelStartingFactor, p_bssType, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime) \
{ \
    MlmeAddAutonomousScanReq_Evt *evt = (MlmeAddAutonomousScanReq_Evt*) CsrPmalloc(sizeof(MlmeAddAutonomousScanReq_Evt)); \
    evt->common.id            = MLME_ADD_AUTONOMOUS_SCAN_REQ_ID; \
    evt->common.destination   = pid; \
    evt->channelList          = p_channelList; \
    evt->informationElements  = p_informationElements; \
    evt->autonomousScanId     = p_autonomousScanId; \
    evt->ifIndex              = p_ifIndex; \
    evt->channelStartingFactor = p_channelStartingFactor; \
    evt->bssType              = p_bssType; \
    evt->bssid                = p_bssid; \
    evt->scanType             = p_scanType; \
    evt->probeDelay           = p_probeDelay; \
    evt->minChannelTime       = p_minChannelTime; \
    evt->maxChannelTime       = p_maxChannelTime; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_autonomous_scan_req_internal(context, pid, p_channelList, p_informationElements, p_autonomousScanId, p_ifIndex, p_channelStartingFactor, p_bssType, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_autonomous_scan_req(newevt, pid, p_channelList, p_informationElements, p_autonomousScanId, p_ifIndex, p_channelStartingFactor, p_bssType, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime); \
    fsm_send_event((context), newevt, pid, MLME_ADD_AUTONOMOUS_SCAN_REQ_ID); \
}

#define send_mlme_add_autonomous_scan_req(context, p_channelList, p_informationElements, p_autonomousScanId, p_ifIndex, p_channelStartingFactor, p_bssType, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime) \
{ \
    CsrUint8 evt[MLME_ADD_AUTONOMOUS_SCAN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADD_AUTONOMOUS_SCAN_REQ_ID, context->currentInstance->instanceId, &(p_channelList), &(p_informationElements)); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_autonomousScanId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_ifIndex); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channelStartingFactor); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_bssType); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_bssid, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_scanType); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_probeDelay); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_minChannelTime); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_maxChannelTime); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADD_AUTONOMOUS_SCAN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_add_blackout_req -------------------------- */
typedef struct MlmeAddBlackoutReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    BlackoutId                      blackoutId;
    BlackoutType                    blackoutType;
    BlackoutSource                  blackoutSource;
    Microseconds32                  blackoutStartReference;
    Microseconds32                  blackoutPeriod;
    Microseconds32                  blackoutDuration;
    unifi_MACAddress                peerStaAddress;
} MlmeAddBlackoutReq_Evt;

#define build_mlme_add_blackout_req(event, pid, p_blackoutId, p_blackoutType, p_blackoutSource, p_blackoutStartReference, p_blackoutPeriod, p_blackoutDuration, p_peerStaAddress) \
{ \
    MlmeAddBlackoutReq_Evt *evt = (MlmeAddBlackoutReq_Evt*) CsrPmalloc(sizeof(MlmeAddBlackoutReq_Evt)); \
    evt->common.id            = MLME_ADD_BLACKOUT_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->blackoutId           = p_blackoutId; \
    evt->blackoutType         = p_blackoutType; \
    evt->blackoutSource       = p_blackoutSource; \
    evt->blackoutStartReference = p_blackoutStartReference; \
    evt->blackoutPeriod       = p_blackoutPeriod; \
    evt->blackoutDuration     = p_blackoutDuration; \
    evt->peerStaAddress       = p_peerStaAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_blackout_req_internal(context, pid, p_blackoutId, p_blackoutType, p_blackoutSource, p_blackoutStartReference, p_blackoutPeriod, p_blackoutDuration, p_peerStaAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_blackout_req(newevt, pid, p_blackoutId, p_blackoutType, p_blackoutSource, p_blackoutStartReference, p_blackoutPeriod, p_blackoutDuration, p_peerStaAddress); \
    fsm_send_event((context), newevt, pid, MLME_ADD_BLACKOUT_REQ_ID); \
}

#define send_mlme_add_blackout_req(context, p_blackoutId, p_blackoutType, p_blackoutSource, p_blackoutStartReference, p_blackoutPeriod, p_blackoutDuration, p_peerStaAddress) \
{ \
    CsrUint8 evt[MLME_ADD_BLACKOUT_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADD_BLACKOUT_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blackoutId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blackoutType); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blackoutSource); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_blackoutStartReference); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_blackoutPeriod); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_blackoutDuration); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADD_BLACKOUT_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_add_periodic_req -------------------------- */
typedef struct MlmeAddPeriodicReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    PeriodicId                      periodicId;
    Microseconds32                  maximumLatency;
    PeriodicSchedulingMode          periodicSchedulingMode;
    CsrBool                         wakeHost;
    Priority                        tid;
} MlmeAddPeriodicReq_Evt;

#define build_mlme_add_periodic_req(event, pid, p_periodicId, p_maximumLatency, p_periodicSchedulingMode, p_wakeHost, p_tid) \
{ \
    MlmeAddPeriodicReq_Evt *evt = (MlmeAddPeriodicReq_Evt*) CsrPmalloc(sizeof(MlmeAddPeriodicReq_Evt)); \
    evt->common.id            = MLME_ADD_PERIODIC_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->periodicId           = p_periodicId; \
    evt->maximumLatency       = p_maximumLatency; \
    evt->periodicSchedulingMode = p_periodicSchedulingMode; \
    evt->wakeHost             = p_wakeHost; \
    evt->tid                  = p_tid; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_periodic_req_internal(context, pid, p_periodicId, p_maximumLatency, p_periodicSchedulingMode, p_wakeHost, p_tid) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_periodic_req(newevt, pid, p_periodicId, p_maximumLatency, p_periodicSchedulingMode, p_wakeHost, p_tid); \
    fsm_send_event((context), newevt, pid, MLME_ADD_PERIODIC_REQ_ID); \
}

#define send_mlme_add_periodic_req(context, p_periodicId, p_maximumLatency, p_periodicSchedulingMode, p_wakeHost, p_tid) \
{ \
    CsrUint8 evt[MLME_ADD_PERIODIC_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADD_PERIODIC_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_periodicId); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_maximumLatency); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_periodicSchedulingMode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_wakeHost); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_tid); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADD_PERIODIC_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_add_rx_trigger_req -------------------------- */
typedef struct MlmeAddRxTriggerReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    TriggerId                       triggerId;
    Priority                        priority;
} MlmeAddRxTriggerReq_Evt;

#define build_mlme_add_rx_trigger_req(event, pid, p_informationElements, p_triggerId, p_priority) \
{ \
    MlmeAddRxTriggerReq_Evt *evt = (MlmeAddRxTriggerReq_Evt*) CsrPmalloc(sizeof(MlmeAddRxTriggerReq_Evt)); \
    evt->common.id            = MLME_ADD_RX_TRIGGER_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->triggerId            = p_triggerId; \
    evt->priority             = p_priority; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_rx_trigger_req_internal(context, pid, p_informationElements, p_triggerId, p_priority) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_rx_trigger_req(newevt, pid, p_informationElements, p_triggerId, p_priority); \
    fsm_send_event((context), newevt, pid, MLME_ADD_RX_TRIGGER_REQ_ID); \
}

#define send_mlme_add_rx_trigger_req(context, p_informationElements, p_triggerId, p_priority) \
{ \
    CsrUint8 evt[MLME_ADD_RX_TRIGGER_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADD_RX_TRIGGER_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_triggerId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_priority); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADD_RX_TRIGGER_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_add_triggered_get_req -------------------------- */
typedef struct MlmeAddTriggeredGetReq_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttribute;
    DataReference                   dummyDataRef2;
    TriggeredId                     triggeredId;
} MlmeAddTriggeredGetReq_Evt;

#define build_mlme_add_triggered_get_req(event, pid, p_mibAttribute, p_triggeredId) \
{ \
    MlmeAddTriggeredGetReq_Evt *evt = (MlmeAddTriggeredGetReq_Evt*) CsrPmalloc(sizeof(MlmeAddTriggeredGetReq_Evt)); \
    evt->common.id            = MLME_ADD_TRIGGERED_GET_REQ_ID; \
    evt->common.destination   = pid; \
    evt->mibAttribute         = p_mibAttribute; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->triggeredId          = p_triggeredId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_triggered_get_req_internal(context, pid, p_mibAttribute, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_triggered_get_req(newevt, pid, p_mibAttribute, p_triggeredId); \
    fsm_send_event((context), newevt, pid, MLME_ADD_TRIGGERED_GET_REQ_ID); \
}

#define send_mlme_add_triggered_get_req(context, p_mibAttribute, p_triggeredId) \
{ \
    CsrUint8 evt[MLME_ADD_TRIGGERED_GET_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADD_TRIGGERED_GET_REQ_ID, context->currentInstance->instanceId, &(p_mibAttribute), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_triggeredId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADD_TRIGGERED_GET_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_add_wds_req -------------------------- */
typedef struct MlmeAddWdsReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                wdsapmacAddress;
} MlmeAddWdsReq_Evt;

#define build_mlme_add_wds_req(event, pid, p_wdsapmacAddress) \
{ \
    MlmeAddWdsReq_Evt *evt = (MlmeAddWdsReq_Evt*) CsrPmalloc(sizeof(MlmeAddWdsReq_Evt)); \
    evt->common.id            = MLME_ADD_WDS_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->wdsapmacAddress      = p_wdsapmacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_add_wds_req_internal(context, pid, p_wdsapmacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_add_wds_req(newevt, pid, p_wdsapmacAddress); \
    fsm_send_event((context), newevt, pid, MLME_ADD_WDS_REQ_ID); \
}

#define send_mlme_add_wds_req(context, p_wdsapmacAddress) \
{ \
    CsrUint8 evt[MLME_ADD_WDS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ADD_WDS_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_wdsapmacAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ADD_WDS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_associate_req -------------------------- */
typedef struct MlmeAssociateReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    TimeUnits                       associateFailureTimeout;
    CapabilityInformation           capabilityInformation;
    BeaconPeriods                   listenInterval;
} MlmeAssociateReq_Evt;

#define build_mlme_associate_req(event, pid, p_informationElements, p_peerStaAddress, p_associateFailureTimeout, p_capabilityInformation, p_listenInterval) \
{ \
    MlmeAssociateReq_Evt *evt = (MlmeAssociateReq_Evt*) CsrPmalloc(sizeof(MlmeAssociateReq_Evt)); \
    evt->common.id            = MLME_ASSOCIATE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->associateFailureTimeout = p_associateFailureTimeout; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->listenInterval       = p_listenInterval; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_associate_req_internal(context, pid, p_informationElements, p_peerStaAddress, p_associateFailureTimeout, p_capabilityInformation, p_listenInterval) \
{ \
    FsmEvent *newevt; \
    build_mlme_associate_req(newevt, pid, p_informationElements, p_peerStaAddress, p_associateFailureTimeout, p_capabilityInformation, p_listenInterval); \
    fsm_send_event((context), newevt, pid, MLME_ASSOCIATE_REQ_ID); \
}

#define send_mlme_associate_req(context, p_informationElements, p_peerStaAddress, p_associateFailureTimeout, p_capabilityInformation, p_listenInterval) \
{ \
    CsrUint8 evt[MLME_ASSOCIATE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ASSOCIATE_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_associateFailureTimeout); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_listenInterval); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ASSOCIATE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_associate_rsp -------------------------- */
typedef struct MlmeAssociateRsp_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ResultCode                      resultCode;
    CapabilityInformation           capabilityInformation;
    AssociationId                   associationId;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
} MlmeAssociateRsp_Evt;

#define build_mlme_associate_rsp(event, pid, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest) \
{ \
    MlmeAssociateRsp_Evt *evt = (MlmeAssociateRsp_Evt*) CsrPmalloc(sizeof(MlmeAssociateRsp_Evt)); \
    evt->common.id            = MLME_ASSOCIATE_RSP_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->resultCode           = p_resultCode; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->associationId        = p_associationId; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_associate_rsp_internal(context, pid, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest) \
{ \
    FsmEvent *newevt; \
    build_mlme_associate_rsp(newevt, pid, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest); \
    fsm_send_event((context), newevt, pid, MLME_ASSOCIATE_RSP_ID); \
}

#define send_mlme_associate_rsp(context, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest) \
{ \
    CsrUint8 evt[MLME_ASSOCIATE_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_ASSOCIATE_RSP_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_resultCode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_associationId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_rcpiRequest); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_rsniRequest); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_ASSOCIATE_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_authenticate_req -------------------------- */
typedef struct MlmeAuthenticateReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    AuthenticationType              authenticationType;
    TimeUnits                       authenticationFailureTimeout;
} MlmeAuthenticateReq_Evt;

#define build_mlme_authenticate_req(event, pid, p_informationElements, p_peerStaAddress, p_authenticationType, p_authenticationFailureTimeout) \
{ \
    MlmeAuthenticateReq_Evt *evt = (MlmeAuthenticateReq_Evt*) CsrPmalloc(sizeof(MlmeAuthenticateReq_Evt)); \
    evt->common.id            = MLME_AUTHENTICATE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->authenticationType   = p_authenticationType; \
    evt->authenticationFailureTimeout = p_authenticationFailureTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_authenticate_req_internal(context, pid, p_informationElements, p_peerStaAddress, p_authenticationType, p_authenticationFailureTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_authenticate_req(newevt, pid, p_informationElements, p_peerStaAddress, p_authenticationType, p_authenticationFailureTimeout); \
    fsm_send_event((context), newevt, pid, MLME_AUTHENTICATE_REQ_ID); \
}

#define send_mlme_authenticate_req(context, p_informationElements, p_peerStaAddress, p_authenticationType, p_authenticationFailureTimeout) \
{ \
    CsrUint8 evt[MLME_AUTHENTICATE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_AUTHENTICATE_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_authenticationType); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_authenticationFailureTimeout); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_AUTHENTICATE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_authenticate_rsp -------------------------- */
typedef struct MlmeAuthenticateRsp_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ResultCode                      resultCode;
} MlmeAuthenticateRsp_Evt;

#define build_mlme_authenticate_rsp(event, pid, p_informationElements, p_peerStaAddress, p_resultCode) \
{ \
    MlmeAuthenticateRsp_Evt *evt = (MlmeAuthenticateRsp_Evt*) CsrPmalloc(sizeof(MlmeAuthenticateRsp_Evt)); \
    evt->common.id            = MLME_AUTHENTICATE_RSP_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_authenticate_rsp_internal(context, pid, p_informationElements, p_peerStaAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_authenticate_rsp(newevt, pid, p_informationElements, p_peerStaAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_AUTHENTICATE_RSP_ID); \
}

#define send_mlme_authenticate_rsp(context, p_informationElements, p_peerStaAddress, p_resultCode) \
{ \
    CsrUint8 evt[MLME_AUTHENTICATE_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_AUTHENTICATE_RSP_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_resultCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_AUTHENTICATE_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_autonomous_scan_results_req -------------------------- */
typedef struct MlmeAutonomousScanResultsReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    AutonomousScanId                autonomousScanId;
} MlmeAutonomousScanResultsReq_Evt;

#define build_mlme_autonomous_scan_results_req(event, pid, p_autonomousScanId) \
{ \
    MlmeAutonomousScanResultsReq_Evt *evt = (MlmeAutonomousScanResultsReq_Evt*) CsrPmalloc(sizeof(MlmeAutonomousScanResultsReq_Evt)); \
    evt->common.id            = MLME_AUTONOMOUS_SCAN_RESULTS_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_autonomous_scan_results_req_internal(context, pid, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_autonomous_scan_results_req(newevt, pid, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_AUTONOMOUS_SCAN_RESULTS_REQ_ID); \
}

#define send_mlme_autonomous_scan_results_req(context, p_autonomousScanId) \
{ \
    CsrUint8 evt[MLME_AUTONOMOUS_SCAN_RESULTS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_AUTONOMOUS_SCAN_RESULTS_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_autonomousScanId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_AUTONOMOUS_SCAN_RESULTS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_channelswitch_req -------------------------- */
typedef struct MlmeChannelswitchReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    ChannelSwitchMode               mode;
    ChannelNumber                   channelNumber;
    ChannelOffset                   secondaryChannelOffset;
    BeaconPeriods                   channelSwitchCount;
} MlmeChannelswitchReq_Evt;

#define build_mlme_channelswitch_req(event, pid, p_informationElements, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    MlmeChannelswitchReq_Evt *evt = (MlmeChannelswitchReq_Evt*) CsrPmalloc(sizeof(MlmeChannelswitchReq_Evt)); \
    evt->common.id            = MLME_CHANNELSWITCH_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->mode                 = p_mode; \
    evt->channelNumber        = p_channelNumber; \
    evt->secondaryChannelOffset = p_secondaryChannelOffset; \
    evt->channelSwitchCount   = p_channelSwitchCount; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_channelswitch_req_internal(context, pid, p_informationElements, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    FsmEvent *newevt; \
    build_mlme_channelswitch_req(newevt, pid, p_informationElements, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount); \
    fsm_send_event((context), newevt, pid, MLME_CHANNELSWITCH_REQ_ID); \
}

#define send_mlme_channelswitch_req(context, p_informationElements, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    CsrUint8 evt[MLME_CHANNELSWITCH_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_CHANNELSWITCH_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_mode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channelNumber); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_secondaryChannelOffset); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channelSwitchCount); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_CHANNELSWITCH_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_channelswitch_rsp -------------------------- */
typedef struct MlmeChannelswitchRsp_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    ChannelSwitchMode               mode;
    ChannelNumber                   channelNumber;
    ChannelOffset                   secondaryChannelOffset;
    BeaconPeriods                   channelSwitchCount;
} MlmeChannelswitchRsp_Evt;

#define build_mlme_channelswitch_rsp(event, pid, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    MlmeChannelswitchRsp_Evt *evt = (MlmeChannelswitchRsp_Evt*) CsrPmalloc(sizeof(MlmeChannelswitchRsp_Evt)); \
    evt->common.id            = MLME_CHANNELSWITCH_RSP_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->mode                 = p_mode; \
    evt->channelNumber        = p_channelNumber; \
    evt->secondaryChannelOffset = p_secondaryChannelOffset; \
    evt->channelSwitchCount   = p_channelSwitchCount; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_channelswitch_rsp_internal(context, pid, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    FsmEvent *newevt; \
    build_mlme_channelswitch_rsp(newevt, pid, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount); \
    fsm_send_event((context), newevt, pid, MLME_CHANNELSWITCH_RSP_ID); \
}

#define send_mlme_channelswitch_rsp(context, p_mode, p_channelNumber, p_secondaryChannelOffset, p_channelSwitchCount) \
{ \
    CsrUint8 evt[MLME_CHANNELSWITCH_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_CHANNELSWITCH_RSP_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_mode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channelNumber); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_secondaryChannelOffset); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channelSwitchCount); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_CHANNELSWITCH_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_deauthenticate_req -------------------------- */
typedef struct MlmeDeauthenticateReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ReasonCode                      reasonCode;
} MlmeDeauthenticateReq_Evt;

#define build_mlme_deauthenticate_req(event, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    MlmeDeauthenticateReq_Evt *evt = (MlmeDeauthenticateReq_Evt*) CsrPmalloc(sizeof(MlmeDeauthenticateReq_Evt)); \
    evt->common.id            = MLME_DEAUTHENTICATE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_deauthenticate_req_internal(context, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_deauthenticate_req(newevt, pid, p_informationElements, p_peerStaAddress, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DEAUTHENTICATE_REQ_ID); \
}

#define send_mlme_deauthenticate_req(context, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    CsrUint8 evt[MLME_DEAUTHENTICATE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEAUTHENTICATE_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_reasonCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEAUTHENTICATE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_delba_req -------------------------- */
typedef struct MlmeDelbaReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerQstaAddress;
    Initiator                       direction;
    Priority                        tid;
    ReasonCode                      reasonCode;
} MlmeDelbaReq_Evt;

#define build_mlme_delba_req(event, pid, p_peerQstaAddress, p_direction, p_tid, p_reasonCode) \
{ \
    MlmeDelbaReq_Evt *evt = (MlmeDelbaReq_Evt*) CsrPmalloc(sizeof(MlmeDelbaReq_Evt)); \
    evt->common.id            = MLME_DELBA_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerQstaAddress      = p_peerQstaAddress; \
    evt->direction            = p_direction; \
    evt->tid                  = p_tid; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_delba_req_internal(context, pid, p_peerQstaAddress, p_direction, p_tid, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delba_req(newevt, pid, p_peerQstaAddress, p_direction, p_tid, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DELBA_REQ_ID); \
}

#define send_mlme_delba_req(context, p_peerQstaAddress, p_direction, p_tid, p_reasonCode) \
{ \
    CsrUint8 evt[MLME_DELBA_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DELBA_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerQstaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_direction); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_tid); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_reasonCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DELBA_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_deletekeys_req -------------------------- */
typedef struct MlmeDeletekeysReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    CsrUint16                       keyId;
    KeyType                         keyType;
    unifi_MACAddress                address;
} MlmeDeletekeysReq_Evt;

#define build_mlme_deletekeys_req(event, pid, p_keyId, p_keyType, p_address) \
{ \
    MlmeDeletekeysReq_Evt *evt = (MlmeDeletekeysReq_Evt*) CsrPmalloc(sizeof(MlmeDeletekeysReq_Evt)); \
    evt->common.id            = MLME_DELETEKEYS_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->keyId                = p_keyId; \
    evt->keyType              = p_keyType; \
    evt->address              = p_address; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_deletekeys_req_internal(context, pid, p_keyId, p_keyType, p_address) \
{ \
    FsmEvent *newevt; \
    build_mlme_deletekeys_req(newevt, pid, p_keyId, p_keyType, p_address); \
    fsm_send_event((context), newevt, pid, MLME_DELETEKEYS_REQ_ID); \
}

#define send_mlme_deletekeys_req(context, p_keyId, p_keyType, p_address) \
{ \
    CsrUint8 evt[MLME_DELETEKEYS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DELETEKEYS_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_keyId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_keyType); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_address, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DELETEKEYS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_delts_req -------------------------- */
typedef struct MlmeDeltsReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                nonApqstaAddress;
    TsInfo                          tsInfo;
    ReasonCode                      reasonCode;
} MlmeDeltsReq_Evt;

#define build_mlme_delts_req(event, pid, p_nonApqstaAddress, p_tsInfo, p_reasonCode) \
{ \
    MlmeDeltsReq_Evt *evt = (MlmeDeltsReq_Evt*) CsrPmalloc(sizeof(MlmeDeltsReq_Evt)); \
    evt->common.id            = MLME_DELTS_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->nonApqstaAddress     = p_nonApqstaAddress; \
    evt->tsInfo               = p_tsInfo; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_delts_req_internal(context, pid, p_nonApqstaAddress, p_tsInfo, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_delts_req(newevt, pid, p_nonApqstaAddress, p_tsInfo, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DELTS_REQ_ID); \
}

#define send_mlme_delts_req(context, p_nonApqstaAddress, p_tsInfo, p_reasonCode) \
{ \
    CsrUint8 evt[MLME_DELTS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DELTS_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_nonApqstaAddress, 6); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_tsInfo); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_reasonCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DELTS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_del_autonomous_scan_req -------------------------- */
typedef struct MlmeDelAutonomousScanReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    AutonomousScanId                autonomousScanId;
} MlmeDelAutonomousScanReq_Evt;

#define build_mlme_del_autonomous_scan_req(event, pid, p_autonomousScanId) \
{ \
    MlmeDelAutonomousScanReq_Evt *evt = (MlmeDelAutonomousScanReq_Evt*) CsrPmalloc(sizeof(MlmeDelAutonomousScanReq_Evt)); \
    evt->common.id            = MLME_DEL_AUTONOMOUS_SCAN_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->autonomousScanId     = p_autonomousScanId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_autonomous_scan_req_internal(context, pid, p_autonomousScanId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_autonomous_scan_req(newevt, pid, p_autonomousScanId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_AUTONOMOUS_SCAN_REQ_ID); \
}

#define send_mlme_del_autonomous_scan_req(context, p_autonomousScanId) \
{ \
    CsrUint8 evt[MLME_DEL_AUTONOMOUS_SCAN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEL_AUTONOMOUS_SCAN_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_autonomousScanId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEL_AUTONOMOUS_SCAN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_del_blackout_req -------------------------- */
typedef struct MlmeDelBlackoutReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    BlackoutId                      blackoutId;
} MlmeDelBlackoutReq_Evt;

#define build_mlme_del_blackout_req(event, pid, p_blackoutId) \
{ \
    MlmeDelBlackoutReq_Evt *evt = (MlmeDelBlackoutReq_Evt*) CsrPmalloc(sizeof(MlmeDelBlackoutReq_Evt)); \
    evt->common.id            = MLME_DEL_BLACKOUT_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->blackoutId           = p_blackoutId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_blackout_req_internal(context, pid, p_blackoutId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_blackout_req(newevt, pid, p_blackoutId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_BLACKOUT_REQ_ID); \
}

#define send_mlme_del_blackout_req(context, p_blackoutId) \
{ \
    CsrUint8 evt[MLME_DEL_BLACKOUT_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEL_BLACKOUT_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_blackoutId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEL_BLACKOUT_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_del_periodic_req -------------------------- */
typedef struct MlmeDelPeriodicReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    PeriodicId                      periodicId;
} MlmeDelPeriodicReq_Evt;

#define build_mlme_del_periodic_req(event, pid, p_periodicId) \
{ \
    MlmeDelPeriodicReq_Evt *evt = (MlmeDelPeriodicReq_Evt*) CsrPmalloc(sizeof(MlmeDelPeriodicReq_Evt)); \
    evt->common.id            = MLME_DEL_PERIODIC_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->periodicId           = p_periodicId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_periodic_req_internal(context, pid, p_periodicId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_periodic_req(newevt, pid, p_periodicId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_PERIODIC_REQ_ID); \
}

#define send_mlme_del_periodic_req(context, p_periodicId) \
{ \
    CsrUint8 evt[MLME_DEL_PERIODIC_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEL_PERIODIC_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_periodicId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEL_PERIODIC_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_del_rx_trigger_req -------------------------- */
typedef struct MlmeDelRxTriggerReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    TriggerId                       triggerId;
} MlmeDelRxTriggerReq_Evt;

#define build_mlme_del_rx_trigger_req(event, pid, p_triggerId) \
{ \
    MlmeDelRxTriggerReq_Evt *evt = (MlmeDelRxTriggerReq_Evt*) CsrPmalloc(sizeof(MlmeDelRxTriggerReq_Evt)); \
    evt->common.id            = MLME_DEL_RX_TRIGGER_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->triggerId            = p_triggerId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_rx_trigger_req_internal(context, pid, p_triggerId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_rx_trigger_req(newevt, pid, p_triggerId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_RX_TRIGGER_REQ_ID); \
}

#define send_mlme_del_rx_trigger_req(context, p_triggerId) \
{ \
    CsrUint8 evt[MLME_DEL_RX_TRIGGER_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEL_RX_TRIGGER_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_triggerId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEL_RX_TRIGGER_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_del_triggered_get_req -------------------------- */
typedef struct MlmeDelTriggeredGetReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    TriggeredId                     triggeredId;
} MlmeDelTriggeredGetReq_Evt;

#define build_mlme_del_triggered_get_req(event, pid, p_triggeredId) \
{ \
    MlmeDelTriggeredGetReq_Evt *evt = (MlmeDelTriggeredGetReq_Evt*) CsrPmalloc(sizeof(MlmeDelTriggeredGetReq_Evt)); \
    evt->common.id            = MLME_DEL_TRIGGERED_GET_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->triggeredId          = p_triggeredId; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_triggered_get_req_internal(context, pid, p_triggeredId) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_triggered_get_req(newevt, pid, p_triggeredId); \
    fsm_send_event((context), newevt, pid, MLME_DEL_TRIGGERED_GET_REQ_ID); \
}

#define send_mlme_del_triggered_get_req(context, p_triggeredId) \
{ \
    CsrUint8 evt[MLME_DEL_TRIGGERED_GET_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEL_TRIGGERED_GET_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_triggeredId); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEL_TRIGGERED_GET_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_del_wds_req -------------------------- */
typedef struct MlmeDelWdsReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                wdsapmacAddress;
} MlmeDelWdsReq_Evt;

#define build_mlme_del_wds_req(event, pid, p_wdsapmacAddress) \
{ \
    MlmeDelWdsReq_Evt *evt = (MlmeDelWdsReq_Evt*) CsrPmalloc(sizeof(MlmeDelWdsReq_Evt)); \
    evt->common.id            = MLME_DEL_WDS_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->wdsapmacAddress      = p_wdsapmacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_del_wds_req_internal(context, pid, p_wdsapmacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_del_wds_req(newevt, pid, p_wdsapmacAddress); \
    fsm_send_event((context), newevt, pid, MLME_DEL_WDS_REQ_ID); \
}

#define send_mlme_del_wds_req(context, p_wdsapmacAddress) \
{ \
    CsrUint8 evt[MLME_DEL_WDS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DEL_WDS_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_wdsapmacAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DEL_WDS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_disassociate_req -------------------------- */
typedef struct MlmeDisassociateReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ReasonCode                      reasonCode;
} MlmeDisassociateReq_Evt;

#define build_mlme_disassociate_req(event, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    MlmeDisassociateReq_Evt *evt = (MlmeDisassociateReq_Evt*) CsrPmalloc(sizeof(MlmeDisassociateReq_Evt)); \
    evt->common.id            = MLME_DISASSOCIATE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_disassociate_req_internal(context, pid, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_disassociate_req(newevt, pid, p_informationElements, p_peerStaAddress, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DISASSOCIATE_REQ_ID); \
}

#define send_mlme_disassociate_req(context, p_informationElements, p_peerStaAddress, p_reasonCode) \
{ \
    CsrUint8 evt[MLME_DISASSOCIATE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DISASSOCIATE_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_reasonCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DISASSOCIATE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_dls_req -------------------------- */
typedef struct MlmeDlsReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    CapabilityInformation           capabilityInformation;
    Seconds                         dlsTimeoutValue;
    TimeUnits                       dlsResponseTimeout;
} MlmeDlsReq_Evt;

#define build_mlme_dls_req(event, pid, p_informationElements, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout) \
{ \
    MlmeDlsReq_Evt *evt = (MlmeDlsReq_Evt*) CsrPmalloc(sizeof(MlmeDlsReq_Evt)); \
    evt->common.id            = MLME_DLS_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->dlsTimeoutValue      = p_dlsTimeoutValue; \
    evt->dlsResponseTimeout   = p_dlsResponseTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_dls_req_internal(context, pid, p_informationElements, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_dls_req(newevt, pid, p_informationElements, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout); \
    fsm_send_event((context), newevt, pid, MLME_DLS_REQ_ID); \
}

#define send_mlme_dls_req(context, p_informationElements, p_peerMacAddress, p_capabilityInformation, p_dlsTimeoutValue, p_dlsResponseTimeout) \
{ \
    CsrUint8 evt[MLME_DLS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DLS_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dlsTimeoutValue); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dlsResponseTimeout); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DLS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_dlsteardown_req -------------------------- */
typedef struct MlmeDlsteardownReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress1;
    unifi_MACAddress                peerMacAddress2;
    ReasonCode                      reasonCode;
} MlmeDlsteardownReq_Evt;

#define build_mlme_dlsteardown_req(event, pid, p_peerMacAddress1, p_peerMacAddress2, p_reasonCode) \
{ \
    MlmeDlsteardownReq_Evt *evt = (MlmeDlsteardownReq_Evt*) CsrPmalloc(sizeof(MlmeDlsteardownReq_Evt)); \
    evt->common.id            = MLME_DLSTEARDOWN_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress1      = p_peerMacAddress1; \
    evt->peerMacAddress2      = p_peerMacAddress2; \
    evt->reasonCode           = p_reasonCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_dlsteardown_req_internal(context, pid, p_peerMacAddress1, p_peerMacAddress2, p_reasonCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_dlsteardown_req(newevt, pid, p_peerMacAddress1, p_peerMacAddress2, p_reasonCode); \
    fsm_send_event((context), newevt, pid, MLME_DLSTEARDOWN_REQ_ID); \
}

#define send_mlme_dlsteardown_req(context, p_peerMacAddress1, p_peerMacAddress2, p_reasonCode) \
{ \
    CsrUint8 evt[MLME_DLSTEARDOWN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_DLSTEARDOWN_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress1, 6); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress2, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_reasonCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_DLSTEARDOWN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_eapol_req -------------------------- */
typedef struct MlmeEapolReq_Evt
{
    FsmEvent                        common;
    DataReference                   data;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                sa;
    unifi_MACAddress                da;
    Priority                        priority;
    ClientTag                       hostTag;
} MlmeEapolReq_Evt;

#define build_mlme_eapol_req(event, pid, p_data, p_sa, p_da, p_priority, p_hostTag) \
{ \
    MlmeEapolReq_Evt *evt = (MlmeEapolReq_Evt*) CsrPmalloc(sizeof(MlmeEapolReq_Evt)); \
    evt->common.id            = MLME_EAPOL_REQ_ID; \
    evt->common.destination   = pid; \
    evt->data                 = p_data; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->sa                   = p_sa; \
    evt->da                   = p_da; \
    evt->priority             = p_priority; \
    evt->hostTag              = p_hostTag; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_eapol_req_internal(context, pid, p_data, p_sa, p_da, p_priority, p_hostTag) \
{ \
    FsmEvent *newevt; \
    build_mlme_eapol_req(newevt, pid, p_data, p_sa, p_da, p_priority, p_hostTag); \
    fsm_send_event((context), newevt, pid, MLME_EAPOL_REQ_ID); \
}

#define send_mlme_eapol_req(context, p_data, p_sa, p_da, p_priority, p_hostTag) \
{ \
    CsrUint8 evt[MLME_EAPOL_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_EAPOL_REQ_ID, context->currentInstance->instanceId, &(p_data), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_sa, 6); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_da, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_priority); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_hostTag); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_EAPOL_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_ft_join_req -------------------------- */
typedef struct MlmeFtJoinReq_Evt
{
    FsmEvent                        common;
    DataReference                   scanInformationElements;
    DataReference                   staInformationElements;
    Interface                       ifIndex;
    unifi_MACAddress                bssid;
    TimeUnits                       beaconPeriod;
    TsfTime                         timestamp;
    TsfTime                         localTime;
    ChannelNumber                   channel;
    CapabilityInformation           capabilityInformation;
    BeaconPeriods                   joinFailureTimeout;
    Microseconds32                  probeDelay;
} MlmeFtJoinReq_Evt;

#define build_mlme_ft_join_req(event, pid, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay) \
{ \
    MlmeFtJoinReq_Evt *evt = (MlmeFtJoinReq_Evt*) CsrPmalloc(sizeof(MlmeFtJoinReq_Evt)); \
    evt->common.id            = MLME_FT_JOIN_REQ_ID; \
    evt->common.destination   = pid; \
    evt->scanInformationElements = p_scanInformationElements; \
    evt->staInformationElements = p_staInformationElements; \
    evt->ifIndex              = p_ifIndex; \
    evt->bssid                = p_bssid; \
    evt->beaconPeriod         = p_beaconPeriod; \
    evt->timestamp            = p_timestamp; \
    evt->localTime            = p_localTime; \
    evt->channel              = p_channel; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->joinFailureTimeout   = p_joinFailureTimeout; \
    evt->probeDelay           = p_probeDelay; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_ft_join_req_internal(context, pid, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay) \
{ \
    FsmEvent *newevt; \
    build_mlme_ft_join_req(newevt, pid, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay); \
    fsm_send_event((context), newevt, pid, MLME_FT_JOIN_REQ_ID); \
}

#define send_mlme_ft_join_req(context, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay) \
{ \
    CsrUint8 evt[MLME_FT_JOIN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_FT_JOIN_REQ_ID, context->currentInstance->instanceId, &(p_scanInformationElements), &(p_staInformationElements)); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_ifIndex); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_bssid, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_beaconPeriod); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_timestamp, 8); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_localTime, 8); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channel); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_joinFailureTimeout); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_probeDelay); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_FT_JOIN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_get_req -------------------------- */
typedef struct MlmeGetReq_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttribute;
    DataReference                   dummyDataRef2;
} MlmeGetReq_Evt;

#define build_mlme_get_req(event, pid, p_mibAttribute) \
{ \
    MlmeGetReq_Evt *evt = (MlmeGetReq_Evt*) CsrPmalloc(sizeof(MlmeGetReq_Evt)); \
    evt->common.id            = MLME_GET_REQ_ID; \
    evt->common.destination   = pid; \
    evt->mibAttribute         = p_mibAttribute; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_get_req_internal(context, pid, p_mibAttribute) \
{ \
    FsmEvent *newevt; \
    build_mlme_get_req(newevt, pid, p_mibAttribute); \
    fsm_send_event((context), newevt, pid, MLME_GET_REQ_ID); \
}

#define send_mlme_get_req(context, p_mibAttribute) \
{ \
    CsrUint8 evt[MLME_GET_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_GET_REQ_ID, context->currentInstance->instanceId, &(p_mibAttribute), NULL); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_GET_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_get_next_req -------------------------- */
typedef struct MlmeGetNextReq_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttribute;
    DataReference                   dummyDataRef2;
} MlmeGetNextReq_Evt;

#define build_mlme_get_next_req(event, pid, p_mibAttribute) \
{ \
    MlmeGetNextReq_Evt *evt = (MlmeGetNextReq_Evt*) CsrPmalloc(sizeof(MlmeGetNextReq_Evt)); \
    evt->common.id            = MLME_GET_NEXT_REQ_ID; \
    evt->common.destination   = pid; \
    evt->mibAttribute         = p_mibAttribute; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_get_next_req_internal(context, pid, p_mibAttribute) \
{ \
    FsmEvent *newevt; \
    build_mlme_get_next_req(newevt, pid, p_mibAttribute); \
    fsm_send_event((context), newevt, pid, MLME_GET_NEXT_REQ_ID); \
}

#define send_mlme_get_next_req(context, p_mibAttribute) \
{ \
    CsrUint8 evt[MLME_GET_NEXT_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_GET_NEXT_REQ_ID, context->currentInstance->instanceId, &(p_mibAttribute), NULL); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_GET_NEXT_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_hl_sync_req -------------------------- */
typedef struct MlmeHlSyncReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                groupAddress;
} MlmeHlSyncReq_Evt;

#define build_mlme_hl_sync_req(event, pid, p_groupAddress) \
{ \
    MlmeHlSyncReq_Evt *evt = (MlmeHlSyncReq_Evt*) CsrPmalloc(sizeof(MlmeHlSyncReq_Evt)); \
    evt->common.id            = MLME_HL_SYNC_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->groupAddress         = p_groupAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_hl_sync_req_internal(context, pid, p_groupAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_req(newevt, pid, p_groupAddress); \
    fsm_send_event((context), newevt, pid, MLME_HL_SYNC_REQ_ID); \
}

#define send_mlme_hl_sync_req(context, p_groupAddress) \
{ \
    CsrUint8 evt[MLME_HL_SYNC_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_HL_SYNC_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_groupAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_HL_SYNC_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_hl_sync_cancel_req -------------------------- */
typedef struct MlmeHlSyncCancelReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                groupAddress;
} MlmeHlSyncCancelReq_Evt;

#define build_mlme_hl_sync_cancel_req(event, pid, p_groupAddress) \
{ \
    MlmeHlSyncCancelReq_Evt *evt = (MlmeHlSyncCancelReq_Evt*) CsrPmalloc(sizeof(MlmeHlSyncCancelReq_Evt)); \
    evt->common.id            = MLME_HL_SYNC_CANCEL_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->groupAddress         = p_groupAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_hl_sync_cancel_req_internal(context, pid, p_groupAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_hl_sync_cancel_req(newevt, pid, p_groupAddress); \
    fsm_send_event((context), newevt, pid, MLME_HL_SYNC_CANCEL_REQ_ID); \
}

#define send_mlme_hl_sync_cancel_req(context, p_groupAddress) \
{ \
    CsrUint8 evt[MLME_HL_SYNC_CANCEL_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_HL_SYNC_CANCEL_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_groupAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_HL_SYNC_CANCEL_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_join_req -------------------------- */
typedef struct MlmeJoinReq_Evt
{
    FsmEvent                        common;
    DataReference                   scanInformationElements;
    DataReference                   staInformationElements;
    Interface                       ifIndex;
    unifi_MACAddress                bssid;
    TimeUnits                       beaconPeriod;
    TsfTime                         timestamp;
    TsfTime                         localTime;
    ChannelNumber                   channel;
    CapabilityInformation           capabilityInformation;
    BeaconPeriods                   joinFailureTimeout;
    Microseconds32                  probeDelay;
} MlmeJoinReq_Evt;

#define build_mlme_join_req(event, pid, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay) \
{ \
    MlmeJoinReq_Evt *evt = (MlmeJoinReq_Evt*) CsrPmalloc(sizeof(MlmeJoinReq_Evt)); \
    evt->common.id            = MLME_JOIN_REQ_ID; \
    evt->common.destination   = pid; \
    evt->scanInformationElements = p_scanInformationElements; \
    evt->staInformationElements = p_staInformationElements; \
    evt->ifIndex              = p_ifIndex; \
    evt->bssid                = p_bssid; \
    evt->beaconPeriod         = p_beaconPeriod; \
    evt->timestamp            = p_timestamp; \
    evt->localTime            = p_localTime; \
    evt->channel              = p_channel; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->joinFailureTimeout   = p_joinFailureTimeout; \
    evt->probeDelay           = p_probeDelay; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_join_req_internal(context, pid, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay) \
{ \
    FsmEvent *newevt; \
    build_mlme_join_req(newevt, pid, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay); \
    fsm_send_event((context), newevt, pid, MLME_JOIN_REQ_ID); \
}

#define send_mlme_join_req(context, p_scanInformationElements, p_staInformationElements, p_ifIndex, p_bssid, p_beaconPeriod, p_timestamp, p_localTime, p_channel, p_capabilityInformation, p_joinFailureTimeout, p_probeDelay) \
{ \
    CsrUint8 evt[MLME_JOIN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_JOIN_REQ_ID, context->currentInstance->instanceId, &(p_scanInformationElements), &(p_staInformationElements)); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_ifIndex); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_bssid, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_beaconPeriod); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_timestamp, 8); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_localTime, 8); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channel); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_joinFailureTimeout); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_probeDelay); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_JOIN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_linkmeasure_req -------------------------- */
typedef struct MlmeLinkmeasureReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    DialogToken                     dialogToken;
    Decibels                        transmitPower;
    Decibels                        maxTransmitPower;
} MlmeLinkmeasureReq_Evt;

#define build_mlme_linkmeasure_req(event, pid, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitPower, p_maxTransmitPower) \
{ \
    MlmeLinkmeasureReq_Evt *evt = (MlmeLinkmeasureReq_Evt*) CsrPmalloc(sizeof(MlmeLinkmeasureReq_Evt)); \
    evt->common.id            = MLME_LINKMEASURE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->transmitPower        = p_transmitPower; \
    evt->maxTransmitPower     = p_maxTransmitPower; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_linkmeasure_req_internal(context, pid, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitPower, p_maxTransmitPower) \
{ \
    FsmEvent *newevt; \
    build_mlme_linkmeasure_req(newevt, pid, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitPower, p_maxTransmitPower); \
    fsm_send_event((context), newevt, pid, MLME_LINKMEASURE_REQ_ID); \
}

#define send_mlme_linkmeasure_req(context, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitPower, p_maxTransmitPower) \
{ \
    CsrUint8 evt[MLME_LINKMEASURE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_LINKMEASURE_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrInt16(&buffer, (CsrInt16)p_transmitPower); \
    packedLength += event_pack_CsrInt16(&buffer, (CsrInt16)p_maxTransmitPower); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_LINKMEASURE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_measure_req -------------------------- */
typedef struct MlmeMeasureReq_Evt
{
    FsmEvent                        common;
    DataReference                   measurementRequestSet;
    DataReference                   dummyDataRef2;
    DialogToken                     dialogToken;
} MlmeMeasureReq_Evt;

#define build_mlme_measure_req(event, pid, p_measurementRequestSet, p_dialogToken) \
{ \
    MlmeMeasureReq_Evt *evt = (MlmeMeasureReq_Evt*) CsrPmalloc(sizeof(MlmeMeasureReq_Evt)); \
    evt->common.id            = MLME_MEASURE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->measurementRequestSet = p_measurementRequestSet; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_measure_req_internal(context, pid, p_measurementRequestSet, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_measure_req(newevt, pid, p_measurementRequestSet, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_MEASURE_REQ_ID); \
}

#define send_mlme_measure_req(context, p_measurementRequestSet, p_dialogToken) \
{ \
    CsrUint8 evt[MLME_MEASURE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_MEASURE_REQ_ID, context->currentInstance->instanceId, &(p_measurementRequestSet), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_MEASURE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_mreport_req -------------------------- */
typedef struct MlmeMreportReq_Evt
{
    FsmEvent                        common;
    DataReference                   measurementReportSet;
    DataReference                   informationElements;
    unifi_MACAddress                peerMacAddress;
    DialogToken                     dialogToken;
    MeasurementCategory             measurementCategory;
} MlmeMreportReq_Evt;

#define build_mlme_mreport_req(event, pid, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory) \
{ \
    MlmeMreportReq_Evt *evt = (MlmeMreportReq_Evt*) CsrPmalloc(sizeof(MlmeMreportReq_Evt)); \
    evt->common.id            = MLME_MREPORT_REQ_ID; \
    evt->common.destination   = pid; \
    evt->measurementReportSet = p_measurementReportSet; \
    evt->informationElements  = p_informationElements; \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->measurementCategory  = p_measurementCategory; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_mreport_req_internal(context, pid, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory) \
{ \
    FsmEvent *newevt; \
    build_mlme_mreport_req(newevt, pid, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory); \
    fsm_send_event((context), newevt, pid, MLME_MREPORT_REQ_ID); \
}

#define send_mlme_mreport_req(context, p_measurementReportSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_measurementCategory) \
{ \
    CsrUint8 evt[MLME_MREPORT_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_MREPORT_REQ_ID, context->currentInstance->instanceId, &(p_measurementReportSet), &(p_informationElements)); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_measurementCategory); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_MREPORT_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_mrequest_req -------------------------- */
typedef struct MlmeMrequestReq_Evt
{
    FsmEvent                        common;
    DataReference                   measurementRequestSet;
    DataReference                   informationElements;
    unifi_MACAddress                peerMacAddress;
    DialogToken                     dialogToken;
    CsrUint16                       numberofRepetitions;
    MeasurementCategory             measurementCategory;
} MlmeMrequestReq_Evt;

#define build_mlme_mrequest_req(event, pid, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory) \
{ \
    MlmeMrequestReq_Evt *evt = (MlmeMrequestReq_Evt*) CsrPmalloc(sizeof(MlmeMrequestReq_Evt)); \
    evt->common.id            = MLME_MREQUEST_REQ_ID; \
    evt->common.destination   = pid; \
    evt->measurementRequestSet = p_measurementRequestSet; \
    evt->informationElements  = p_informationElements; \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->numberofRepetitions  = p_numberofRepetitions; \
    evt->measurementCategory  = p_measurementCategory; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_mrequest_req_internal(context, pid, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory) \
{ \
    FsmEvent *newevt; \
    build_mlme_mrequest_req(newevt, pid, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory); \
    fsm_send_event((context), newevt, pid, MLME_MREQUEST_REQ_ID); \
}

#define send_mlme_mrequest_req(context, p_measurementRequestSet, p_informationElements, p_peerMacAddress, p_dialogToken, p_numberofRepetitions, p_measurementCategory) \
{ \
    CsrUint8 evt[MLME_MREQUEST_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_MREQUEST_REQ_ID, context->currentInstance->instanceId, &(p_measurementRequestSet), &(p_informationElements)); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_numberofRepetitions); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_measurementCategory); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_MREQUEST_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_neighborrepreq_req -------------------------- */
typedef struct MlmeNeighborrepreqReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    DialogToken                     dialogToken;
} MlmeNeighborrepreqReq_Evt;

#define build_mlme_neighborrepreq_req(event, pid, p_informationElements, p_dialogToken) \
{ \
    MlmeNeighborrepreqReq_Evt *evt = (MlmeNeighborrepreqReq_Evt*) CsrPmalloc(sizeof(MlmeNeighborrepreqReq_Evt)); \
    evt->common.id            = MLME_NEIGHBORREPREQ_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_neighborrepreq_req_internal(context, pid, p_informationElements, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepreq_req(newevt, pid, p_informationElements, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_NEIGHBORREPREQ_REQ_ID); \
}

#define send_mlme_neighborrepreq_req(context, p_informationElements, p_dialogToken) \
{ \
    CsrUint8 evt[MLME_NEIGHBORREPREQ_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_NEIGHBORREPREQ_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_NEIGHBORREPREQ_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_neighborrepresp_req -------------------------- */
typedef struct MlmeNeighborreprespReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    DialogToken                     dialogToken;
} MlmeNeighborreprespReq_Evt;

#define build_mlme_neighborrepresp_req(event, pid, p_informationElements, p_peerStaAddress, p_dialogToken) \
{ \
    MlmeNeighborreprespReq_Evt *evt = (MlmeNeighborreprespReq_Evt*) CsrPmalloc(sizeof(MlmeNeighborreprespReq_Evt)); \
    evt->common.id            = MLME_NEIGHBORREPRESP_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->dialogToken          = p_dialogToken; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_neighborrepresp_req_internal(context, pid, p_informationElements, p_peerStaAddress, p_dialogToken) \
{ \
    FsmEvent *newevt; \
    build_mlme_neighborrepresp_req(newevt, pid, p_informationElements, p_peerStaAddress, p_dialogToken); \
    fsm_send_event((context), newevt, pid, MLME_NEIGHBORREPRESP_REQ_ID); \
}

#define send_mlme_neighborrepresp_req(context, p_informationElements, p_peerStaAddress, p_dialogToken) \
{ \
    CsrUint8 evt[MLME_NEIGHBORREPRESP_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_NEIGHBORREPRESP_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_NEIGHBORREPRESP_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_pause_autonomous_scan_req -------------------------- */
typedef struct MlmePauseAutonomousScanReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    AutonomousScanId                autonomousScanId;
    CsrBool                         pause;
} MlmePauseAutonomousScanReq_Evt;

#define build_mlme_pause_autonomous_scan_req(event, pid, p_autonomousScanId, p_pause) \
{ \
    MlmePauseAutonomousScanReq_Evt *evt = (MlmePauseAutonomousScanReq_Evt*) CsrPmalloc(sizeof(MlmePauseAutonomousScanReq_Evt)); \
    evt->common.id            = MLME_PAUSE_AUTONOMOUS_SCAN_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->autonomousScanId     = p_autonomousScanId; \
    evt->pause                = p_pause; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_pause_autonomous_scan_req_internal(context, pid, p_autonomousScanId, p_pause) \
{ \
    FsmEvent *newevt; \
    build_mlme_pause_autonomous_scan_req(newevt, pid, p_autonomousScanId, p_pause); \
    fsm_send_event((context), newevt, pid, MLME_PAUSE_AUTONOMOUS_SCAN_REQ_ID); \
}

#define send_mlme_pause_autonomous_scan_req(context, p_autonomousScanId, p_pause) \
{ \
    CsrUint8 evt[MLME_PAUSE_AUTONOMOUS_SCAN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_PAUSE_AUTONOMOUS_SCAN_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_autonomousScanId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_pause); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_PAUSE_AUTONOMOUS_SCAN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_powermgt_req -------------------------- */
typedef struct MlmePowermgtReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    PowerManagementMode             powerManagementMode;
    CsrBool                         wakeUp;
    CsrBool                         receiveDtiMs;
    BeaconPeriods                   listenInterval;
} MlmePowermgtReq_Evt;

#define build_mlme_powermgt_req(event, pid, p_powerManagementMode, p_wakeUp, p_receiveDtiMs, p_listenInterval) \
{ \
    MlmePowermgtReq_Evt *evt = (MlmePowermgtReq_Evt*) CsrPmalloc(sizeof(MlmePowermgtReq_Evt)); \
    evt->common.id            = MLME_POWERMGT_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->powerManagementMode  = p_powerManagementMode; \
    evt->wakeUp               = p_wakeUp; \
    evt->receiveDtiMs         = p_receiveDtiMs; \
    evt->listenInterval       = p_listenInterval; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_powermgt_req_internal(context, pid, p_powerManagementMode, p_wakeUp, p_receiveDtiMs, p_listenInterval) \
{ \
    FsmEvent *newevt; \
    build_mlme_powermgt_req(newevt, pid, p_powerManagementMode, p_wakeUp, p_receiveDtiMs, p_listenInterval); \
    fsm_send_event((context), newevt, pid, MLME_POWERMGT_REQ_ID); \
}

#define send_mlme_powermgt_req(context, p_powerManagementMode, p_wakeUp, p_receiveDtiMs, p_listenInterval) \
{ \
    CsrUint8 evt[MLME_POWERMGT_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_POWERMGT_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_powerManagementMode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_wakeUp); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_receiveDtiMs); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_listenInterval); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_POWERMGT_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_reassociate_req -------------------------- */
typedef struct MlmeReassociateReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                newApAddress;
    TimeUnits                       reassociateFailureTimeout;
    CapabilityInformation           capabilityInformation;
    BeaconPeriods                   listenInterval;
} MlmeReassociateReq_Evt;

#define build_mlme_reassociate_req(event, pid, p_informationElements, p_newApAddress, p_reassociateFailureTimeout, p_capabilityInformation, p_listenInterval) \
{ \
    MlmeReassociateReq_Evt *evt = (MlmeReassociateReq_Evt*) CsrPmalloc(sizeof(MlmeReassociateReq_Evt)); \
    evt->common.id            = MLME_REASSOCIATE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->newApAddress         = p_newApAddress; \
    evt->reassociateFailureTimeout = p_reassociateFailureTimeout; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->listenInterval       = p_listenInterval; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_reassociate_req_internal(context, pid, p_informationElements, p_newApAddress, p_reassociateFailureTimeout, p_capabilityInformation, p_listenInterval) \
{ \
    FsmEvent *newevt; \
    build_mlme_reassociate_req(newevt, pid, p_informationElements, p_newApAddress, p_reassociateFailureTimeout, p_capabilityInformation, p_listenInterval); \
    fsm_send_event((context), newevt, pid, MLME_REASSOCIATE_REQ_ID); \
}

#define send_mlme_reassociate_req(context, p_informationElements, p_newApAddress, p_reassociateFailureTimeout, p_capabilityInformation, p_listenInterval) \
{ \
    CsrUint8 evt[MLME_REASSOCIATE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_REASSOCIATE_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_newApAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_reassociateFailureTimeout); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_listenInterval); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_REASSOCIATE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_reassociate_rsp -------------------------- */
typedef struct MlmeReassociateRsp_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    ResultCode                      resultCode;
    CapabilityInformation           capabilityInformation;
    AssociationId                   associationId;
    Rcpi                            rcpiRequest;
    Rsni                            rsniRequest;
} MlmeReassociateRsp_Evt;

#define build_mlme_reassociate_rsp(event, pid, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest) \
{ \
    MlmeReassociateRsp_Evt *evt = (MlmeReassociateRsp_Evt*) CsrPmalloc(sizeof(MlmeReassociateRsp_Evt)); \
    evt->common.id            = MLME_REASSOCIATE_RSP_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    evt->resultCode           = p_resultCode; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->associationId        = p_associationId; \
    evt->rcpiRequest          = p_rcpiRequest; \
    evt->rsniRequest          = p_rsniRequest; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_reassociate_rsp_internal(context, pid, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest) \
{ \
    FsmEvent *newevt; \
    build_mlme_reassociate_rsp(newevt, pid, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest); \
    fsm_send_event((context), newevt, pid, MLME_REASSOCIATE_RSP_ID); \
}

#define send_mlme_reassociate_rsp(context, p_informationElements, p_peerStaAddress, p_resultCode, p_capabilityInformation, p_associationId, p_rcpiRequest, p_rsniRequest) \
{ \
    CsrUint8 evt[MLME_REASSOCIATE_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_REASSOCIATE_RSP_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_resultCode); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_associationId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_rcpiRequest); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_rsniRequest); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_REASSOCIATE_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_remote_request_req -------------------------- */
typedef struct MlmeRemoteRequestReq_Evt
{
    FsmEvent                        common;
    DataReference                   contentofFtActionFrame;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
} MlmeRemoteRequestReq_Evt;

#define build_mlme_remote_request_req(event, pid, p_contentofFtActionFrame, p_peerMacAddress) \
{ \
    MlmeRemoteRequestReq_Evt *evt = (MlmeRemoteRequestReq_Evt*) CsrPmalloc(sizeof(MlmeRemoteRequestReq_Evt)); \
    evt->common.id            = MLME_REMOTE_REQUEST_REQ_ID; \
    evt->common.destination   = pid; \
    evt->contentofFtActionFrame = p_contentofFtActionFrame; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_remote_request_req_internal(context, pid, p_contentofFtActionFrame, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_remote_request_req(newevt, pid, p_contentofFtActionFrame, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_REMOTE_REQUEST_REQ_ID); \
}

#define send_mlme_remote_request_req(context, p_contentofFtActionFrame, p_peerMacAddress) \
{ \
    CsrUint8 evt[MLME_REMOTE_REQUEST_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_REMOTE_REQUEST_REQ_ID, context->currentInstance->instanceId, &(p_contentofFtActionFrame), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_REMOTE_REQUEST_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_reset_req -------------------------- */
typedef struct MlmeResetReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                staAddress;
    CsrBool                         setDefaultMib;
} MlmeResetReq_Evt;

#define build_mlme_reset_req(event, pid, p_staAddress, p_setDefaultMib) \
{ \
    MlmeResetReq_Evt *evt = (MlmeResetReq_Evt*) CsrPmalloc(sizeof(MlmeResetReq_Evt)); \
    evt->common.id            = MLME_RESET_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->staAddress           = p_staAddress; \
    evt->setDefaultMib        = p_setDefaultMib; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_reset_req_internal(context, pid, p_staAddress, p_setDefaultMib) \
{ \
    FsmEvent *newevt; \
    build_mlme_reset_req(newevt, pid, p_staAddress, p_setDefaultMib); \
    fsm_send_event((context), newevt, pid, MLME_RESET_REQ_ID); \
}

#define send_mlme_reset_req(context, p_staAddress, p_setDefaultMib) \
{ \
    CsrUint8 evt[MLME_RESET_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_RESET_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_staAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_setDefaultMib); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_RESET_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_resource_request_req -------------------------- */
typedef struct MlmeResourceRequestReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
} MlmeResourceRequestReq_Evt;

#define build_mlme_resource_request_req(event, pid, p_informationElements, p_peerMacAddress) \
{ \
    MlmeResourceRequestReq_Evt *evt = (MlmeResourceRequestReq_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestReq_Evt)); \
    evt->common.id            = MLME_RESOURCE_REQUEST_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_resource_request_req_internal(context, pid, p_informationElements, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_req(newevt, pid, p_informationElements, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_RESOURCE_REQUEST_REQ_ID); \
}

#define send_mlme_resource_request_req(context, p_informationElements, p_peerMacAddress) \
{ \
    CsrUint8 evt[MLME_RESOURCE_REQUEST_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_RESOURCE_REQUEST_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_RESOURCE_REQUEST_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_resource_request_rsp -------------------------- */
typedef struct MlmeResourceRequestRsp_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    ResultCode                      resultCode;
} MlmeResourceRequestRsp_Evt;

#define build_mlme_resource_request_rsp(event, pid, p_informationElements, p_peerMacAddress, p_resultCode) \
{ \
    MlmeResourceRequestRsp_Evt *evt = (MlmeResourceRequestRsp_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestRsp_Evt)); \
    evt->common.id            = MLME_RESOURCE_REQUEST_RSP_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->resultCode           = p_resultCode; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_resource_request_rsp_internal(context, pid, p_informationElements, p_peerMacAddress, p_resultCode) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_rsp(newevt, pid, p_informationElements, p_peerMacAddress, p_resultCode); \
    fsm_send_event((context), newevt, pid, MLME_RESOURCE_REQUEST_RSP_ID); \
}

#define send_mlme_resource_request_rsp(context, p_informationElements, p_peerMacAddress, p_resultCode) \
{ \
    CsrUint8 evt[MLME_RESOURCE_REQUEST_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_RESOURCE_REQUEST_RSP_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_resultCode); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_RESOURCE_REQUEST_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_resource_request_local_req -------------------------- */
typedef struct MlmeResourceRequestLocalReq_Evt
{
    FsmEvent                        common;
    DataReference                   resourceDescriptors;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                macAddress;
} MlmeResourceRequestLocalReq_Evt;

#define build_mlme_resource_request_local_req(event, pid, p_resourceDescriptors, p_macAddress) \
{ \
    MlmeResourceRequestLocalReq_Evt *evt = (MlmeResourceRequestLocalReq_Evt*) CsrPmalloc(sizeof(MlmeResourceRequestLocalReq_Evt)); \
    evt->common.id            = MLME_RESOURCE_REQUEST_LOCAL_REQ_ID; \
    evt->common.destination   = pid; \
    evt->resourceDescriptors  = p_resourceDescriptors; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->macAddress           = p_macAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_resource_request_local_req_internal(context, pid, p_resourceDescriptors, p_macAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_resource_request_local_req(newevt, pid, p_resourceDescriptors, p_macAddress); \
    fsm_send_event((context), newevt, pid, MLME_RESOURCE_REQUEST_LOCAL_REQ_ID); \
}

#define send_mlme_resource_request_local_req(context, p_resourceDescriptors, p_macAddress) \
{ \
    CsrUint8 evt[MLME_RESOURCE_REQUEST_LOCAL_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_RESOURCE_REQUEST_LOCAL_REQ_ID, context->currentInstance->instanceId, &(p_resourceDescriptors), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_macAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_RESOURCE_REQUEST_LOCAL_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_saquery_req -------------------------- */
typedef struct MlmeSaqueryReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    CsrUint16                       transactionId[8];
} MlmeSaqueryReq_Evt;

#define build_mlme_saquery_req(event, pid, p_peerStaAddress, p_transactionId) \
{ \
    MlmeSaqueryReq_Evt *evt = (MlmeSaqueryReq_Evt*) CsrPmalloc(sizeof(MlmeSaqueryReq_Evt)); \
    evt->common.id            = MLME_SAQUERY_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    CsrMemCpy(evt->transactionId, p_transactionId, sizeof(evt->transactionId)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_saquery_req_internal(context, pid, p_peerStaAddress, p_transactionId) \
{ \
    FsmEvent *newevt; \
    build_mlme_saquery_req(newevt, pid, p_peerStaAddress, p_transactionId); \
    fsm_send_event((context), newevt, pid, MLME_SAQUERY_REQ_ID); \
}

#define send_mlme_saquery_req(context, p_peerStaAddress, p_transactionId) \
{ \
    CsrUint8 evt[MLME_SAQUERY_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SAQUERY_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    { \
    int i; \
    for(i=0; i<8; i++) \
    { \
        packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_transactionId[i]); \
    } \
    } \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SAQUERY_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_saquery_rsp -------------------------- */
typedef struct MlmeSaqueryRsp_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerStaAddress;
    CsrUint16                       transactionId[8];
} MlmeSaqueryRsp_Evt;

#define build_mlme_saquery_rsp(event, pid, p_peerStaAddress, p_transactionId) \
{ \
    MlmeSaqueryRsp_Evt *evt = (MlmeSaqueryRsp_Evt*) CsrPmalloc(sizeof(MlmeSaqueryRsp_Evt)); \
    evt->common.id            = MLME_SAQUERY_RSP_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerStaAddress       = p_peerStaAddress; \
    CsrMemCpy(evt->transactionId, p_transactionId, sizeof(evt->transactionId)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_saquery_rsp_internal(context, pid, p_peerStaAddress, p_transactionId) \
{ \
    FsmEvent *newevt; \
    build_mlme_saquery_rsp(newevt, pid, p_peerStaAddress, p_transactionId); \
    fsm_send_event((context), newevt, pid, MLME_SAQUERY_RSP_ID); \
}

#define send_mlme_saquery_rsp(context, p_peerStaAddress, p_transactionId) \
{ \
    CsrUint8 evt[MLME_SAQUERY_RSP_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SAQUERY_RSP_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerStaAddress, 6); \
    { \
    int i; \
    for(i=0; i<8; i++) \
    { \
        packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_transactionId[i]); \
    } \
    } \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SAQUERY_RSP) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_scan_req -------------------------- */
typedef struct MlmeScanReq_Evt
{
    FsmEvent                        common;
    DataReference                   channelList;
    DataReference                   informationElements;
    Interface                       ifIndex;
    BssType                         bssType;
    unifi_MACAddress                da;
    unifi_MACAddress                bssid;
    ScanType                        scanType;
    Microseconds32                  probeDelay;
    TimeUnits                       minChannelTime;
    TimeUnits                       maxChannelTime;
} MlmeScanReq_Evt;

#define build_mlme_scan_req(event, pid, p_channelList, p_informationElements, p_ifIndex, p_bssType, p_da, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime) \
{ \
    MlmeScanReq_Evt *evt = (MlmeScanReq_Evt*) CsrPmalloc(sizeof(MlmeScanReq_Evt)); \
    evt->common.id            = MLME_SCAN_REQ_ID; \
    evt->common.destination   = pid; \
    evt->channelList          = p_channelList; \
    evt->informationElements  = p_informationElements; \
    evt->ifIndex              = p_ifIndex; \
    evt->bssType              = p_bssType; \
    evt->da                   = p_da; \
    evt->bssid                = p_bssid; \
    evt->scanType             = p_scanType; \
    evt->probeDelay           = p_probeDelay; \
    evt->minChannelTime       = p_minChannelTime; \
    evt->maxChannelTime       = p_maxChannelTime; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_scan_req_internal(context, pid, p_channelList, p_informationElements, p_ifIndex, p_bssType, p_da, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime) \
{ \
    FsmEvent *newevt; \
    build_mlme_scan_req(newevt, pid, p_channelList, p_informationElements, p_ifIndex, p_bssType, p_da, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime); \
    fsm_send_event((context), newevt, pid, MLME_SCAN_REQ_ID); \
}

#define send_mlme_scan_req(context, p_channelList, p_informationElements, p_ifIndex, p_bssType, p_da, p_bssid, p_scanType, p_probeDelay, p_minChannelTime, p_maxChannelTime) \
{ \
    CsrUint8 evt[MLME_SCAN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SCAN_REQ_ID, context->currentInstance->instanceId, &(p_channelList), &(p_informationElements)); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_ifIndex); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_bssType); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_da, 6); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_bssid, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_scanType); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_probeDelay); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_minChannelTime); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_maxChannelTime); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SCAN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_scan_cancel_req -------------------------- */
typedef struct MlmeScanCancelReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
} MlmeScanCancelReq_Evt;

#define build_mlme_scan_cancel_req(event, pid) \
{ \
    MlmeScanCancelReq_Evt *evt = (MlmeScanCancelReq_Evt*) CsrPmalloc(sizeof(MlmeScanCancelReq_Evt)); \
    evt->common.id            = MLME_SCAN_CANCEL_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_scan_cancel_req_internal(context, pid) \
{ \
    FsmEvent *newevt; \
    build_mlme_scan_cancel_req(newevt, pid); \
    fsm_send_event((context), newevt, pid, MLME_SCAN_CANCEL_REQ_ID); \
}

#define send_mlme_scan_cancel_req(context) \
{ \
    CsrUint8 evt[MLME_SCAN_CANCEL_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SCAN_CANCEL_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SCAN_CANCEL_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_schedule_req -------------------------- */
typedef struct MlmeScheduleReq_Evt
{
    FsmEvent                        common;
    DataReference                   scheduleElement;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                nonApqstaAddress;
} MlmeScheduleReq_Evt;

#define build_mlme_schedule_req(event, pid, p_scheduleElement, p_nonApqstaAddress) \
{ \
    MlmeScheduleReq_Evt *evt = (MlmeScheduleReq_Evt*) CsrPmalloc(sizeof(MlmeScheduleReq_Evt)); \
    evt->common.id            = MLME_SCHEDULE_REQ_ID; \
    evt->common.destination   = pid; \
    evt->scheduleElement      = p_scheduleElement; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->nonApqstaAddress     = p_nonApqstaAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_schedule_req_internal(context, pid, p_scheduleElement, p_nonApqstaAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_schedule_req(newevt, pid, p_scheduleElement, p_nonApqstaAddress); \
    fsm_send_event((context), newevt, pid, MLME_SCHEDULE_REQ_ID); \
}

#define send_mlme_schedule_req(context, p_scheduleElement, p_nonApqstaAddress) \
{ \
    CsrUint8 evt[MLME_SCHEDULE_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SCHEDULE_REQ_ID, context->currentInstance->instanceId, &(p_scheduleElement), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_nonApqstaAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SCHEDULE_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_set_req -------------------------- */
typedef struct MlmeSetReq_Evt
{
    FsmEvent                        common;
    DataReference                   mibAttributeValue;
    DataReference                   dummyDataRef2;
} MlmeSetReq_Evt;

#define build_mlme_set_req(event, pid, p_mibAttributeValue) \
{ \
    MlmeSetReq_Evt *evt = (MlmeSetReq_Evt*) CsrPmalloc(sizeof(MlmeSetReq_Evt)); \
    evt->common.id            = MLME_SET_REQ_ID; \
    evt->common.destination   = pid; \
    evt->mibAttributeValue    = p_mibAttributeValue; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    event = (FsmEvent*)evt; \
}

#define send_mlme_set_req_internal(context, pid, p_mibAttributeValue) \
{ \
    FsmEvent *newevt; \
    build_mlme_set_req(newevt, pid, p_mibAttributeValue); \
    fsm_send_event((context), newevt, pid, MLME_SET_REQ_ID); \
}

#define send_mlme_set_req(context, p_mibAttributeValue) \
{ \
    CsrUint8 evt[MLME_SET_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SET_REQ_ID, context->currentInstance->instanceId, &(p_mibAttributeValue), NULL); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SET_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_setkeys_req -------------------------- */
typedef struct MlmeSetkeysReq_Evt
{
    FsmEvent                        common;
    DataReference                   key;
    DataReference                   dummyDataRef2;
    CsrUint16                       length;
    CsrUint16                       keyId;
    KeyType                         keyType;
    unifi_MACAddress                address;
    CsrUint16                       sequenceNumber[8];
    CsrBool                         authenticatorSupplicantorInitiatorPeer;
    CipherSuiteSelector             cipherSuiteSelector;
} MlmeSetkeysReq_Evt;

#define build_mlme_setkeys_req(event, pid, p_key, p_length, p_keyId, p_keyType, p_address, p_sequenceNumber, p_authenticatorSupplicantorInitiatorPeer, p_cipherSuiteSelector) \
{ \
    MlmeSetkeysReq_Evt *evt = (MlmeSetkeysReq_Evt*) CsrPmalloc(sizeof(MlmeSetkeysReq_Evt)); \
    evt->common.id            = MLME_SETKEYS_REQ_ID; \
    evt->common.destination   = pid; \
    evt->key                  = p_key; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->length               = p_length; \
    evt->keyId                = p_keyId; \
    evt->keyType              = p_keyType; \
    evt->address              = p_address; \
    CsrMemCpy(evt->sequenceNumber, p_sequenceNumber, sizeof(evt->sequenceNumber)); \
    evt->authenticatorSupplicantorInitiatorPeer = p_authenticatorSupplicantorInitiatorPeer; \
    evt->cipherSuiteSelector  = p_cipherSuiteSelector; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_setkeys_req_internal(context, pid, p_key, p_length, p_keyId, p_keyType, p_address, p_sequenceNumber, p_authenticatorSupplicantorInitiatorPeer, p_cipherSuiteSelector) \
{ \
    FsmEvent *newevt; \
    build_mlme_setkeys_req(newevt, pid, p_key, p_length, p_keyId, p_keyType, p_address, p_sequenceNumber, p_authenticatorSupplicantorInitiatorPeer, p_cipherSuiteSelector); \
    fsm_send_event((context), newevt, pid, MLME_SETKEYS_REQ_ID); \
}

#define send_mlme_setkeys_req(context, p_key, p_length, p_keyId, p_keyType, p_address, p_sequenceNumber, p_authenticatorSupplicantorInitiatorPeer, p_cipherSuiteSelector) \
{ \
    CsrUint8 evt[MLME_SETKEYS_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SETKEYS_REQ_ID, context->currentInstance->instanceId, &(p_key), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_length); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_keyId); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_keyType); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_address, 6); \
    { \
    int i; \
    for(i=0; i<8; i++) \
    { \
        packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_sequenceNumber[i]); \
    } \
    } \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_authenticatorSupplicantorInitiatorPeer); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_cipherSuiteSelector); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SETKEYS_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_setprotection_req -------------------------- */
typedef struct MlmeSetprotectionReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                address;
    ProtectType                     protectType;
    KeyType                         keyType;
} MlmeSetprotectionReq_Evt;

#define build_mlme_setprotection_req(event, pid, p_address, p_protectType, p_keyType) \
{ \
    MlmeSetprotectionReq_Evt *evt = (MlmeSetprotectionReq_Evt*) CsrPmalloc(sizeof(MlmeSetprotectionReq_Evt)); \
    evt->common.id            = MLME_SETPROTECTION_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->address              = p_address; \
    evt->protectType          = p_protectType; \
    evt->keyType              = p_keyType; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_setprotection_req_internal(context, pid, p_address, p_protectType, p_keyType) \
{ \
    FsmEvent *newevt; \
    build_mlme_setprotection_req(newevt, pid, p_address, p_protectType, p_keyType); \
    fsm_send_event((context), newevt, pid, MLME_SETPROTECTION_REQ_ID); \
}

#define send_mlme_setprotection_req(context, p_address, p_protectType, p_keyType) \
{ \
    CsrUint8 evt[MLME_SETPROTECTION_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SETPROTECTION_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_address, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_protectType); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_keyType); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SETPROTECTION_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_set_unitdata_filter_req -------------------------- */
typedef struct MlmeSetUnitdataFilterReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    UnitDataFilterMode              unitDataFilterMode;
    Ipv4Address                     arpFilterAddress;
} MlmeSetUnitdataFilterReq_Evt;

#define build_mlme_set_unitdata_filter_req(event, pid, p_informationElements, p_unitDataFilterMode, p_arpFilterAddress) \
{ \
    MlmeSetUnitdataFilterReq_Evt *evt = (MlmeSetUnitdataFilterReq_Evt*) CsrPmalloc(sizeof(MlmeSetUnitdataFilterReq_Evt)); \
    evt->common.id            = MLME_SET_UNITDATA_FILTER_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->unitDataFilterMode   = p_unitDataFilterMode; \
    evt->arpFilterAddress     = p_arpFilterAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_set_unitdata_filter_req_internal(context, pid, p_informationElements, p_unitDataFilterMode, p_arpFilterAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_set_unitdata_filter_req(newevt, pid, p_informationElements, p_unitDataFilterMode, p_arpFilterAddress); \
    fsm_send_event((context), newevt, pid, MLME_SET_UNITDATA_FILTER_REQ_ID); \
}

#define send_mlme_set_unitdata_filter_req(context, p_informationElements, p_unitDataFilterMode, p_arpFilterAddress) \
{ \
    CsrUint8 evt[MLME_SET_UNITDATA_FILTER_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SET_UNITDATA_FILTER_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_unitDataFilterMode); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_arpFilterAddress); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SET_UNITDATA_FILTER_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_sniffjoin_req -------------------------- */
typedef struct MlmeSniffjoinReq_Evt
{
    FsmEvent                        common;
    DataReference                   dummyDataRef1;
    DataReference                   dummyDataRef2;
    Interface                       ifIndex;
    ChannelNumber                   channel;
    ChannelStartingFactor           channelStartingFactor;
} MlmeSniffjoinReq_Evt;

#define build_mlme_sniffjoin_req(event, pid, p_ifIndex, p_channel, p_channelStartingFactor) \
{ \
    MlmeSniffjoinReq_Evt *evt = (MlmeSniffjoinReq_Evt*) CsrPmalloc(sizeof(MlmeSniffjoinReq_Evt)); \
    evt->common.id            = MLME_SNIFFJOIN_REQ_ID; \
    evt->common.destination   = pid; \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef1, 0, sizeof(evt->dummyDataRef1)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->ifIndex              = p_ifIndex; \
    evt->channel              = p_channel; \
    evt->channelStartingFactor = p_channelStartingFactor; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_sniffjoin_req_internal(context, pid, p_ifIndex, p_channel, p_channelStartingFactor) \
{ \
    FsmEvent *newevt; \
    build_mlme_sniffjoin_req(newevt, pid, p_ifIndex, p_channel, p_channelStartingFactor); \
    fsm_send_event((context), newevt, pid, MLME_SNIFFJOIN_REQ_ID); \
}

#define send_mlme_sniffjoin_req(context, p_ifIndex, p_channel, p_channelStartingFactor) \
{ \
    CsrUint8 evt[MLME_SNIFFJOIN_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_SNIFFJOIN_REQ_ID, context->currentInstance->instanceId, NULL, NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_ifIndex); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channel); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channelStartingFactor); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_SNIFFJOIN_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_start_req -------------------------- */
typedef struct MlmeStartReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    Interface                       ifIndex;
    TimeUnits                       beaconPeriod;
    ChannelNumber                   channel;
    Microseconds32                  probeDelay;
    CapabilityInformation           capabilityInformation;
    CsrBool                         bluetoothAmp;
} MlmeStartReq_Evt;

#define build_mlme_start_req(event, pid, p_informationElements, p_ifIndex, p_beaconPeriod, p_channel, p_probeDelay, p_capabilityInformation, p_bluetoothAmp) \
{ \
    MlmeStartReq_Evt *evt = (MlmeStartReq_Evt*) CsrPmalloc(sizeof(MlmeStartReq_Evt)); \
    evt->common.id            = MLME_START_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->ifIndex              = p_ifIndex; \
    evt->beaconPeriod         = p_beaconPeriod; \
    evt->channel              = p_channel; \
    evt->probeDelay           = p_probeDelay; \
    evt->capabilityInformation = p_capabilityInformation; \
    evt->bluetoothAmp         = p_bluetoothAmp; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_start_req_internal(context, pid, p_informationElements, p_ifIndex, p_beaconPeriod, p_channel, p_probeDelay, p_capabilityInformation, p_bluetoothAmp) \
{ \
    FsmEvent *newevt; \
    build_mlme_start_req(newevt, pid, p_informationElements, p_ifIndex, p_beaconPeriod, p_channel, p_probeDelay, p_capabilityInformation, p_bluetoothAmp); \
    fsm_send_event((context), newevt, pid, MLME_START_REQ_ID); \
}

#define send_mlme_start_req(context, p_informationElements, p_ifIndex, p_beaconPeriod, p_channel, p_probeDelay, p_capabilityInformation, p_bluetoothAmp) \
{ \
    CsrUint8 evt[MLME_START_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_START_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_ifIndex); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_beaconPeriod); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_channel); \
    packedLength += event_pack_CsrUint32(&buffer, (CsrUint32)p_probeDelay); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_capabilityInformation); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_bluetoothAmp); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_START_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_tpcadapt_req -------------------------- */
typedef struct MlmeTpcadaptReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
    DialogToken                     dialogToken;
    Rate                            transmitRate;
    TimeUnits                       tpcadaptFailureTimeout;
} MlmeTpcadaptReq_Evt;

#define build_mlme_tpcadapt_req(event, pid, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitRate, p_tpcadaptFailureTimeout) \
{ \
    MlmeTpcadaptReq_Evt *evt = (MlmeTpcadaptReq_Evt*) CsrPmalloc(sizeof(MlmeTpcadaptReq_Evt)); \
    evt->common.id            = MLME_TPCADAPT_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    evt->dialogToken          = p_dialogToken; \
    evt->transmitRate         = p_transmitRate; \
    evt->tpcadaptFailureTimeout = p_tpcadaptFailureTimeout; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_tpcadapt_req_internal(context, pid, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitRate, p_tpcadaptFailureTimeout) \
{ \
    FsmEvent *newevt; \
    build_mlme_tpcadapt_req(newevt, pid, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitRate, p_tpcadaptFailureTimeout); \
    fsm_send_event((context), newevt, pid, MLME_TPCADAPT_REQ_ID); \
}

#define send_mlme_tpcadapt_req(context, p_informationElements, p_peerMacAddress, p_dialogToken, p_transmitRate, p_tpcadaptFailureTimeout) \
{ \
    CsrUint8 evt[MLME_TPCADAPT_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_TPCADAPT_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_dialogToken); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_transmitRate); \
    packedLength += event_pack_CsrUint16(&buffer, (CsrUint16)p_tpcadaptFailureTimeout); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_TPCADAPT_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}

/* -------------------------- mlme_vspecific_req -------------------------- */
typedef struct MlmeVspecificReq_Evt
{
    FsmEvent                        common;
    DataReference                   informationElements;
    DataReference                   dummyDataRef2;
    unifi_MACAddress                peerMacAddress;
} MlmeVspecificReq_Evt;

#define build_mlme_vspecific_req(event, pid, p_informationElements, p_peerMacAddress) \
{ \
    MlmeVspecificReq_Evt *evt = (MlmeVspecificReq_Evt*) CsrPmalloc(sizeof(MlmeVspecificReq_Evt)); \
    evt->common.id            = MLME_VSPECIFIC_REQ_ID; \
    evt->common.destination   = pid; \
    evt->informationElements  = p_informationElements; \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    CsrMemSet(&evt->dummyDataRef2, 0, sizeof(evt->dummyDataRef2)); \
    evt->peerMacAddress       = p_peerMacAddress; \
    event = (FsmEvent*)evt; \
}

#define send_mlme_vspecific_req_internal(context, pid, p_informationElements, p_peerMacAddress) \
{ \
    FsmEvent *newevt; \
    build_mlme_vspecific_req(newevt, pid, p_informationElements, p_peerMacAddress); \
    fsm_send_event((context), newevt, pid, MLME_VSPECIFIC_REQ_ID); \
}

#define send_mlme_vspecific_req(context, p_informationElements, p_peerMacAddress) \
{ \
    CsrUint8 evt[MLME_VSPECIFIC_REQ_SIZE]; \
    CsrUint16 packedLength = 0; \
    CsrUint8* buffer = evt; \
    packedLength += event_pack_hip_header(&buffer, MLME_VSPECIFIC_REQ_ID, context->currentInstance->instanceId, &(p_informationElements), NULL); \
    packedLength += event_pack_buffer(&buffer, (CsrUint8*)&p_peerMacAddress, 6); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(MLME_VSPECIFIC_REQ) To(env)", fsm_current_process_name((context)))); \
    hip_signal_to_sys_sap(context, (FsmEvent *)evt, packedLength); \
}



#ifdef __cplusplus
}
#endif

#endif /* HIP_XML_SIGNALS_H */
