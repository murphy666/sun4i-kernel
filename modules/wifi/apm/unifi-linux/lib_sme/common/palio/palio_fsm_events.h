/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef PAL_XML_SIGNALS_H
#define PAL_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define PAL_CTRL_LINK_CREATE_REQ_ID                                  0x2000
#define PAL_CTRL_LINK_CREATE_CFM_ID                                  0x2001
#define PAL_CTRL_LINK_DELETE_REQ_ID                                  0x2002
#define PAL_CTRL_LINK_DELETE_CFM_ID                                  0x2003
#define PAL_CTRL_LINK_MODIFY_REQ_ID                                  0x2004
#define PAL_CTRL_LINK_MODIFY_CFM_ID                                  0x2005
#define PAL_CTRL_EVENT_MASK_SET_REQ_ID                               0x2006
#define PAL_CTRL_EVENT_MASK_SET_CFM_ID                               0x2007
#define PAL_CTRL_LINK_FLUSH_REQ_ID                                   0x2008
#define PAL_CTRL_LINK_FLUSH_CFM_ID                                   0x2009
#define PAL_CTRL_FAILED_CONTACT_COUNTER_READ_REQ_ID                  0x200a
#define PAL_CTRL_FAILED_CONTACT_COUNTER_READ_CFM_ID                  0x200b
#define PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_REQ_ID                 0x200c
#define PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_CFM_ID                 0x200d
#define PAL_CTRL_ACTIVATE_REQ_ID                                     0x200e
#define PAL_CTRL_ACTIVATE_CFM_ID                                     0x200f
#define PAL_CTRL_DEACTIVATE_REQ_ID                                   0x2010
#define PAL_CTRL_DEACTIVATE_CFM_ID                                   0x2011
#define PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_REQ_ID                 0x2012
#define PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_CFM_ID                 0x2013
#define PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_REQ_ID              0x2014
#define PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_CFM_ID              0x2015
#define PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_REQ_ID              0x2016
#define PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_CFM_ID              0x2017
#define PAL_CTRL_EARLY_LINK_LOSS_IND_ID                              0x2018
#define PAL_CTRL_LINK_LOST_IND_ID                                    0x2019
#define PAL_CTRL_LINK_ALIVE_REQ_ID                                   0x201a
#define PAL_CTRL_REGISTER_REQ_ID                                     0x201b
#define PAL_CTRL_REGISTER_CFM_ID                                     0x201c


/* -------------------------- pal_ctrl_activate_req -------------------------- */
typedef struct PalCtrlActivateReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} PalCtrlActivateReq_Evt;

#define send_pal_ctrl_activate_req(context, pid, p_appHandle) \
{ \
    PalCtrlActivateReq_Evt *evt = (PalCtrlActivateReq_Evt*) CsrPmalloc(sizeof(PalCtrlActivateReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_ACTIVATE_REQ_ID); \
}

#define send_pal_ctrl_activate_req_external(context, pid, p_appHandle) \
{ \
    PalCtrlActivateReq_Evt *evt = (PalCtrlActivateReq_Evt*) CsrPmalloc(sizeof(PalCtrlActivateReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_ACTIVATE_REQ_ID); \
}

/* -------------------------- pal_ctrl_activate_cfm -------------------------- */
typedef struct PalCtrlActivateCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       numDataBlocks;
} PalCtrlActivateCfm_Evt;

#define send_pal_ctrl_activate_cfm(context, pid, p_appHandle, p_numDataBlocks) \
{ \
    PalCtrlActivateCfm_Evt *evt = (PalCtrlActivateCfm_Evt*) CsrPmalloc(sizeof(PalCtrlActivateCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->numDataBlocks        = p_numDataBlocks; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_ACTIVATE_CFM_ID); \
}

#define send_pal_ctrl_activate_cfm_external(context, pid, p_appHandle, p_numDataBlocks) \
{ \
    PalCtrlActivateCfm_Evt *evt = (PalCtrlActivateCfm_Evt*) CsrPmalloc(sizeof(PalCtrlActivateCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->numDataBlocks        = p_numDataBlocks; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_ACTIVATE_CFM_ID); \
}

/* -------------------------- pal_ctrl_deactivate_req -------------------------- */
typedef struct PalCtrlDeactivateReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} PalCtrlDeactivateReq_Evt;

#define send_pal_ctrl_deactivate_req(context, pid, p_appHandle) \
{ \
    PalCtrlDeactivateReq_Evt *evt = (PalCtrlDeactivateReq_Evt*) CsrPmalloc(sizeof(PalCtrlDeactivateReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_DEACTIVATE_REQ_ID); \
}

#define send_pal_ctrl_deactivate_req_external(context, pid, p_appHandle) \
{ \
    PalCtrlDeactivateReq_Evt *evt = (PalCtrlDeactivateReq_Evt*) CsrPmalloc(sizeof(PalCtrlDeactivateReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_DEACTIVATE_REQ_ID); \
}

/* -------------------------- pal_ctrl_deactivate_cfm -------------------------- */
typedef struct PalCtrlDeactivateCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} PalCtrlDeactivateCfm_Evt;

#define send_pal_ctrl_deactivate_cfm(context, pid, p_appHandle) \
{ \
    PalCtrlDeactivateCfm_Evt *evt = (PalCtrlDeactivateCfm_Evt*) CsrPmalloc(sizeof(PalCtrlDeactivateCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_DEACTIVATE_CFM_ID); \
}

#define send_pal_ctrl_deactivate_cfm_external(context, pid, p_appHandle) \
{ \
    PalCtrlDeactivateCfm_Evt *evt = (PalCtrlDeactivateCfm_Evt*) CsrPmalloc(sizeof(PalCtrlDeactivateCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_DEACTIVATE_CFM_ID); \
}

/* -------------------------- pal_ctrl_early_link_loss_ind -------------------------- */
typedef struct PalCtrlEarlyLinkLossInd_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlEarlyLinkLossInd_Evt;

#define send_pal_ctrl_early_link_loss_ind(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlEarlyLinkLossInd_Evt *evt = (PalCtrlEarlyLinkLossInd_Evt*) CsrPmalloc(sizeof(PalCtrlEarlyLinkLossInd_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_EARLY_LINK_LOSS_IND_ID); \
}

#define send_pal_ctrl_early_link_loss_ind_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlEarlyLinkLossInd_Evt *evt = (PalCtrlEarlyLinkLossInd_Evt*) CsrPmalloc(sizeof(PalCtrlEarlyLinkLossInd_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_EARLY_LINK_LOSS_IND_ID); \
}

/* -------------------------- pal_ctrl_event_mask_set_req -------------------------- */
typedef struct PalCtrlEventMaskSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint32                       indMask;
} PalCtrlEventMaskSetReq_Evt;

#define send_pal_ctrl_event_mask_set_req(context, pid, p_appHandle, p_indMask) \
{ \
    PalCtrlEventMaskSetReq_Evt *evt = (PalCtrlEventMaskSetReq_Evt*) CsrPmalloc(sizeof(PalCtrlEventMaskSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->indMask              = p_indMask; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_EVENT_MASK_SET_REQ_ID); \
}

#define send_pal_ctrl_event_mask_set_req_external(context, pid, p_appHandle, p_indMask) \
{ \
    PalCtrlEventMaskSetReq_Evt *evt = (PalCtrlEventMaskSetReq_Evt*) CsrPmalloc(sizeof(PalCtrlEventMaskSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->indMask              = p_indMask; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_EVENT_MASK_SET_REQ_ID); \
}

/* -------------------------- pal_ctrl_event_mask_set_cfm -------------------------- */
typedef struct PalCtrlEventMaskSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} PalCtrlEventMaskSetCfm_Evt;

#define send_pal_ctrl_event_mask_set_cfm(context, pid, p_appHandle) \
{ \
    PalCtrlEventMaskSetCfm_Evt *evt = (PalCtrlEventMaskSetCfm_Evt*) CsrPmalloc(sizeof(PalCtrlEventMaskSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_EVENT_MASK_SET_CFM_ID); \
}

#define send_pal_ctrl_event_mask_set_cfm_external(context, pid, p_appHandle) \
{ \
    PalCtrlEventMaskSetCfm_Evt *evt = (PalCtrlEventMaskSetCfm_Evt*) CsrPmalloc(sizeof(PalCtrlEventMaskSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_EVENT_MASK_SET_CFM_ID); \
}

/* -------------------------- pal_ctrl_failed_contact_counter_read_req -------------------------- */
typedef struct PalCtrlFailedContactCounterReadReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
} PalCtrlFailedContactCounterReadReq_Evt;

#define send_pal_ctrl_failed_contact_counter_read_req(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlFailedContactCounterReadReq_Evt *evt = (PalCtrlFailedContactCounterReadReq_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterReadReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_READ_REQ_ID); \
}

#define send_pal_ctrl_failed_contact_counter_read_req_external(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlFailedContactCounterReadReq_Evt *evt = (PalCtrlFailedContactCounterReadReq_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterReadReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_READ_REQ_ID); \
}

/* -------------------------- pal_ctrl_failed_contact_counter_read_cfm -------------------------- */
typedef struct PalCtrlFailedContactCounterReadCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
    CsrUint16                       failedContactCounter;
} PalCtrlFailedContactCounterReadCfm_Evt;

#define send_pal_ctrl_failed_contact_counter_read_cfm(context, pid, p_appHandle, p_logicalLinkHandle, p_failedContactCounter) \
{ \
    PalCtrlFailedContactCounterReadCfm_Evt *evt = (PalCtrlFailedContactCounterReadCfm_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterReadCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->failedContactCounter = p_failedContactCounter; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_READ_CFM_ID); \
}

#define send_pal_ctrl_failed_contact_counter_read_cfm_external(context, pid, p_appHandle, p_logicalLinkHandle, p_failedContactCounter) \
{ \
    PalCtrlFailedContactCounterReadCfm_Evt *evt = (PalCtrlFailedContactCounterReadCfm_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterReadCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->failedContactCounter = p_failedContactCounter; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_READ_CFM_ID); \
}

/* -------------------------- pal_ctrl_failed_contact_counter_reset_req -------------------------- */
typedef struct PalCtrlFailedContactCounterResetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
} PalCtrlFailedContactCounterResetReq_Evt;

#define send_pal_ctrl_failed_contact_counter_reset_req(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlFailedContactCounterResetReq_Evt *evt = (PalCtrlFailedContactCounterResetReq_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterResetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_REQ_ID); \
}

#define send_pal_ctrl_failed_contact_counter_reset_req_external(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlFailedContactCounterResetReq_Evt *evt = (PalCtrlFailedContactCounterResetReq_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterResetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_REQ_ID); \
}

/* -------------------------- pal_ctrl_failed_contact_counter_reset_cfm -------------------------- */
typedef struct PalCtrlFailedContactCounterResetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
} PalCtrlFailedContactCounterResetCfm_Evt;

#define send_pal_ctrl_failed_contact_counter_reset_cfm(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlFailedContactCounterResetCfm_Evt *evt = (PalCtrlFailedContactCounterResetCfm_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterResetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_CFM_ID); \
}

#define send_pal_ctrl_failed_contact_counter_reset_cfm_external(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlFailedContactCounterResetCfm_Evt *evt = (PalCtrlFailedContactCounterResetCfm_Evt*) CsrPmalloc(sizeof(PalCtrlFailedContactCounterResetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_alive_req -------------------------- */
typedef struct PalCtrlLinkAliveReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkAliveReq_Evt;

#define send_pal_ctrl_link_alive_req(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkAliveReq_Evt *evt = (PalCtrlLinkAliveReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkAliveReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_ALIVE_REQ_ID); \
}

#define send_pal_ctrl_link_alive_req_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkAliveReq_Evt *evt = (PalCtrlLinkAliveReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkAliveReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_ALIVE_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_create_req -------------------------- */
typedef struct PalCtrlLinkCreateReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
    CsrUint8                        physicalLinkHandle;
    CsrUint16                       userPriority;
    unifi_MACAddress                remoteMacAddress;
    unifi_MACAddress                localMacAddress;
    unifi_AmpFlowSpec               txFlowSpec;
} PalCtrlLinkCreateReq_Evt;

#define send_pal_ctrl_link_create_req(context, pid, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle, p_userPriority, p_remoteMacAddress, p_localMacAddress, p_txFlowSpec) \
{ \
    PalCtrlLinkCreateReq_Evt *evt = (PalCtrlLinkCreateReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkCreateReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->userPriority         = p_userPriority; \
    evt->remoteMacAddress     = p_remoteMacAddress; \
    evt->localMacAddress      = p_localMacAddress; \
    evt->txFlowSpec           = p_txFlowSpec; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_CREATE_REQ_ID); \
}

#define send_pal_ctrl_link_create_req_external(context, pid, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle, p_userPriority, p_remoteMacAddress, p_localMacAddress, p_txFlowSpec) \
{ \
    PalCtrlLinkCreateReq_Evt *evt = (PalCtrlLinkCreateReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkCreateReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->userPriority         = p_userPriority; \
    evt->remoteMacAddress     = p_remoteMacAddress; \
    evt->localMacAddress      = p_localMacAddress; \
    evt->txFlowSpec           = p_txFlowSpec; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_CREATE_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_create_cfm -------------------------- */
typedef struct PalCtrlLinkCreateCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
} PalCtrlLinkCreateCfm_Evt;

#define send_pal_ctrl_link_create_cfm(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlLinkCreateCfm_Evt *evt = (PalCtrlLinkCreateCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkCreateCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_CREATE_CFM_ID); \
}

#define send_pal_ctrl_link_create_cfm_external(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlLinkCreateCfm_Evt *evt = (PalCtrlLinkCreateCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkCreateCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_CREATE_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_delete_req -------------------------- */
typedef struct PalCtrlLinkDeleteReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkDeleteReq_Evt;

#define send_pal_ctrl_link_delete_req(context, pid, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkDeleteReq_Evt *evt = (PalCtrlLinkDeleteReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkDeleteReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_DELETE_REQ_ID); \
}

#define send_pal_ctrl_link_delete_req_external(context, pid, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkDeleteReq_Evt *evt = (PalCtrlLinkDeleteReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkDeleteReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_DELETE_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_delete_cfm -------------------------- */
typedef struct PalCtrlLinkDeleteCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkDeleteCfm_Evt;

#define send_pal_ctrl_link_delete_cfm(context, pid, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkDeleteCfm_Evt *evt = (PalCtrlLinkDeleteCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkDeleteCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_DELETE_CFM_ID); \
}

#define send_pal_ctrl_link_delete_cfm_external(context, pid, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkDeleteCfm_Evt *evt = (PalCtrlLinkDeleteCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkDeleteCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_DELETE_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_flush_req -------------------------- */
typedef struct PalCtrlLinkFlushReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
} PalCtrlLinkFlushReq_Evt;

#define send_pal_ctrl_link_flush_req(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlLinkFlushReq_Evt *evt = (PalCtrlLinkFlushReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkFlushReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_FLUSH_REQ_ID); \
}

#define send_pal_ctrl_link_flush_req_external(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlLinkFlushReq_Evt *evt = (PalCtrlLinkFlushReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkFlushReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_FLUSH_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_flush_cfm -------------------------- */
typedef struct PalCtrlLinkFlushCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
    CsrBool                         flushOccured;
} PalCtrlLinkFlushCfm_Evt;

#define send_pal_ctrl_link_flush_cfm(context, pid, p_appHandle, p_logicalLinkHandle, p_flushOccured) \
{ \
    PalCtrlLinkFlushCfm_Evt *evt = (PalCtrlLinkFlushCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkFlushCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->flushOccured         = p_flushOccured; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_FLUSH_CFM_ID); \
}

#define send_pal_ctrl_link_flush_cfm_external(context, pid, p_appHandle, p_logicalLinkHandle, p_flushOccured) \
{ \
    PalCtrlLinkFlushCfm_Evt *evt = (PalCtrlLinkFlushCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkFlushCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->flushOccured         = p_flushOccured; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_FLUSH_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_lost_ind -------------------------- */
typedef struct PalCtrlLinkLostInd_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkLostInd_Evt;

#define send_pal_ctrl_link_lost_ind(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkLostInd_Evt *evt = (PalCtrlLinkLostInd_Evt*) CsrPmalloc(sizeof(PalCtrlLinkLostInd_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_LOST_IND_ID); \
}

#define send_pal_ctrl_link_lost_ind_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkLostInd_Evt *evt = (PalCtrlLinkLostInd_Evt*) CsrPmalloc(sizeof(PalCtrlLinkLostInd_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_LOST_IND_ID); \
}

/* -------------------------- pal_ctrl_link_modify_req -------------------------- */
typedef struct PalCtrlLinkModifyReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
    unifi_AmpFlowSpec               txFlowSpec;
} PalCtrlLinkModifyReq_Evt;

#define send_pal_ctrl_link_modify_req(context, pid, p_appHandle, p_logicalLinkHandle, p_txFlowSpec) \
{ \
    PalCtrlLinkModifyReq_Evt *evt = (PalCtrlLinkModifyReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkModifyReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->txFlowSpec           = p_txFlowSpec; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_MODIFY_REQ_ID); \
}

#define send_pal_ctrl_link_modify_req_external(context, pid, p_appHandle, p_logicalLinkHandle, p_txFlowSpec) \
{ \
    PalCtrlLinkModifyReq_Evt *evt = (PalCtrlLinkModifyReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkModifyReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    evt->txFlowSpec           = p_txFlowSpec; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_MODIFY_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_modify_cfm -------------------------- */
typedef struct PalCtrlLinkModifyCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint16                       logicalLinkHandle;
} PalCtrlLinkModifyCfm_Evt;

#define send_pal_ctrl_link_modify_cfm(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlLinkModifyCfm_Evt *evt = (PalCtrlLinkModifyCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkModifyCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_MODIFY_CFM_ID); \
}

#define send_pal_ctrl_link_modify_cfm_external(context, pid, p_appHandle, p_logicalLinkHandle) \
{ \
    PalCtrlLinkModifyCfm_Evt *evt = (PalCtrlLinkModifyCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkModifyCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->logicalLinkHandle    = p_logicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_MODIFY_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_supervision_timeout_delete_req -------------------------- */
typedef struct PalCtrlLinkSupervisionTimeoutDeleteReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkSupervisionTimeoutDeleteReq_Evt;

#define send_pal_ctrl_link_supervision_timeout_delete_req(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutDeleteReq_Evt *evt = (PalCtrlLinkSupervisionTimeoutDeleteReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutDeleteReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_REQ_ID); \
}

#define send_pal_ctrl_link_supervision_timeout_delete_req_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutDeleteReq_Evt *evt = (PalCtrlLinkSupervisionTimeoutDeleteReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutDeleteReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_supervision_timeout_delete_cfm -------------------------- */
typedef struct PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt;

#define send_pal_ctrl_link_supervision_timeout_delete_cfm(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt *evt = (PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_CFM_ID); \
}

#define send_pal_ctrl_link_supervision_timeout_delete_cfm_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt *evt = (PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutDeleteCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_supervision_timeout_modify_req -------------------------- */
typedef struct PalCtrlLinkSupervisionTimeoutModifyReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
    CsrUint16                       linkSupervisionTimeout;
} PalCtrlLinkSupervisionTimeoutModifyReq_Evt;

#define send_pal_ctrl_link_supervision_timeout_modify_req(context, pid, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
{ \
    PalCtrlLinkSupervisionTimeoutModifyReq_Evt *evt = (PalCtrlLinkSupervisionTimeoutModifyReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutModifyReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->linkSupervisionTimeout = p_linkSupervisionTimeout; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_REQ_ID); \
}

#define send_pal_ctrl_link_supervision_timeout_modify_req_external(context, pid, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
{ \
    PalCtrlLinkSupervisionTimeoutModifyReq_Evt *evt = (PalCtrlLinkSupervisionTimeoutModifyReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutModifyReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->linkSupervisionTimeout = p_linkSupervisionTimeout; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_supervision_timeout_modify_cfm -------------------------- */
typedef struct PalCtrlLinkSupervisionTimeoutModifyCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkSupervisionTimeoutModifyCfm_Evt;

#define send_pal_ctrl_link_supervision_timeout_modify_cfm(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutModifyCfm_Evt *evt = (PalCtrlLinkSupervisionTimeoutModifyCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutModifyCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_CFM_ID); \
}

#define send_pal_ctrl_link_supervision_timeout_modify_cfm_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutModifyCfm_Evt *evt = (PalCtrlLinkSupervisionTimeoutModifyCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutModifyCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_CFM_ID); \
}

/* -------------------------- pal_ctrl_link_supervision_timeout_set_req -------------------------- */
typedef struct PalCtrlLinkSupervisionTimeoutSetReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
    CsrUint16                       linkSupervisionTimeout;
} PalCtrlLinkSupervisionTimeoutSetReq_Evt;

#define send_pal_ctrl_link_supervision_timeout_set_req(context, pid, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
{ \
    PalCtrlLinkSupervisionTimeoutSetReq_Evt *evt = (PalCtrlLinkSupervisionTimeoutSetReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->linkSupervisionTimeout = p_linkSupervisionTimeout; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_REQ_ID); \
}

#define send_pal_ctrl_link_supervision_timeout_set_req_external(context, pid, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
{ \
    PalCtrlLinkSupervisionTimeoutSetReq_Evt *evt = (PalCtrlLinkSupervisionTimeoutSetReq_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutSetReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->linkSupervisionTimeout = p_linkSupervisionTimeout; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_REQ_ID); \
}

/* -------------------------- pal_ctrl_link_supervision_timeout_set_cfm -------------------------- */
typedef struct PalCtrlLinkSupervisionTimeoutSetCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        physicalLinkHandle;
} PalCtrlLinkSupervisionTimeoutSetCfm_Evt;

#define send_pal_ctrl_link_supervision_timeout_set_cfm(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutSetCfm_Evt *evt = (PalCtrlLinkSupervisionTimeoutSetCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_CFM_ID); \
}

#define send_pal_ctrl_link_supervision_timeout_set_cfm_external(context, pid, p_appHandle, p_physicalLinkHandle) \
{ \
    PalCtrlLinkSupervisionTimeoutSetCfm_Evt *evt = (PalCtrlLinkSupervisionTimeoutSetCfm_Evt*) CsrPmalloc(sizeof(PalCtrlLinkSupervisionTimeoutSetCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_CFM_ID); \
}

/* -------------------------- pal_ctrl_register_req -------------------------- */
typedef struct PalCtrlRegisterReq_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
    CsrUint8                        ampId;
    CsrUint16                       dataQid;
} PalCtrlRegisterReq_Evt;

#define send_pal_ctrl_register_req(context, pid, p_appHandle, p_ampId, p_dataQid) \
{ \
    PalCtrlRegisterReq_Evt *evt = (PalCtrlRegisterReq_Evt*) CsrPmalloc(sizeof(PalCtrlRegisterReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->ampId                = p_ampId; \
    evt->dataQid              = p_dataQid; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_REGISTER_REQ_ID); \
}

#define send_pal_ctrl_register_req_external(context, pid, p_appHandle, p_ampId, p_dataQid) \
{ \
    PalCtrlRegisterReq_Evt *evt = (PalCtrlRegisterReq_Evt*) CsrPmalloc(sizeof(PalCtrlRegisterReq_Evt)); \
    evt->appHandle            = p_appHandle; \
    evt->ampId                = p_ampId; \
    evt->dataQid              = p_dataQid; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_REGISTER_REQ_ID); \
}

/* -------------------------- pal_ctrl_register_cfm -------------------------- */
typedef struct PalCtrlRegisterCfm_Evt
{
    FsmEvent                        common;
    void*                           appHandle;
} PalCtrlRegisterCfm_Evt;

#define send_pal_ctrl_register_cfm(context, pid, p_appHandle) \
{ \
    PalCtrlRegisterCfm_Evt *evt = (PalCtrlRegisterCfm_Evt*) CsrPmalloc(sizeof(PalCtrlRegisterCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_CTRL_REGISTER_CFM_ID); \
}

#define send_pal_ctrl_register_cfm_external(context, pid, p_appHandle) \
{ \
    PalCtrlRegisterCfm_Evt *evt = (PalCtrlRegisterCfm_Evt*) CsrPmalloc(sizeof(PalCtrlRegisterCfm_Evt)); \
    evt->appHandle            = p_appHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_CTRL_REGISTER_CFM_ID); \
}





#ifdef __cplusplus
}
#endif

#endif /* PAL_XML_SIGNALS_H */
