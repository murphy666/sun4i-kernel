/* This is an autogenerated file */
/* Tag: noCheckHeader */

/*    CONFIDENTIAL */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2008. All rights reserved. */

#ifndef PAL_CTRL_OUTPUT_H
#define PAL_CTRL_OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SME_API_VALIDATE

#define call_pal_ctrl_activate_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_pal_ctrl_deactivate_req(context, appHandle) CSR_UNUSED(appHandle)
#define call_pal_ctrl_event_mask_set_req(context, appHandle, indMask) CSR_UNUSED(appHandle), CSR_UNUSED(indMask)
#define call_pal_ctrl_failed_contact_counter_read_req(context, appHandle, logicalLinkHandle) CSR_UNUSED(appHandle), CSR_UNUSED(logicalLinkHandle)
#define call_pal_ctrl_failed_contact_counter_reset_req(context, appHandle, logicalLinkHandle) CSR_UNUSED(appHandle), CSR_UNUSED(logicalLinkHandle)
#define call_pal_ctrl_link_alive_req(context, appHandle, physicalLinkHandle) CSR_UNUSED(appHandle), CSR_UNUSED(physicalLinkHandle)
#define call_pal_ctrl_link_create_req(context, appHandle, logicalLinkHandle, physicalLinkHandle, userPriority, remoteMacAddress, localMacAddress, txFlowSpec) CSR_UNUSED(appHandle), CSR_UNUSED(logicalLinkHandle), CSR_UNUSED(physicalLinkHandle), CSR_UNUSED(userPriority), CSR_UNUSED(remoteMacAddress), CSR_UNUSED(localMacAddress), CSR_UNUSED(txFlowSpec)
#define call_pal_ctrl_link_delete_req(context, appHandle, logicalLinkHandle, physicalLinkHandle) CSR_UNUSED(appHandle), CSR_UNUSED(logicalLinkHandle), CSR_UNUSED(physicalLinkHandle)
#define call_pal_ctrl_link_flush_req(context, appHandle, logicalLinkHandle) CSR_UNUSED(appHandle), CSR_UNUSED(logicalLinkHandle)
#define call_pal_ctrl_link_modify_req(context, appHandle, logicalLinkHandle, txFlowSpec) CSR_UNUSED(appHandle), CSR_UNUSED(logicalLinkHandle), CSR_UNUSED(txFlowSpec)
#define call_pal_ctrl_link_supervision_timeout_delete_req(context, appHandle, physicalLinkHandle) CSR_UNUSED(appHandle), CSR_UNUSED(physicalLinkHandle)
#define call_pal_ctrl_link_supervision_timeout_modify_req(context, appHandle, physicalLinkHandle, linkSupervisionTimeout) CSR_UNUSED(appHandle), CSR_UNUSED(physicalLinkHandle), CSR_UNUSED(linkSupervisionTimeout)
#define call_pal_ctrl_link_supervision_timeout_set_req(context, appHandle, physicalLinkHandle, linkSupervisionTimeout) CSR_UNUSED(appHandle), CSR_UNUSED(physicalLinkHandle), CSR_UNUSED(linkSupervisionTimeout)
#define call_pal_ctrl_register_req(context, appHandle, ampId, dataQid) CSR_UNUSED(appHandle), CSR_UNUSED(ampId), CSR_UNUSED(dataQid)

#else

#include "pal_ctrl_sap/pal_ctrl_sap.h"

#ifdef FSM_TRANSITION_LOCK

#define call_pal_ctrl_activate_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_ACTIVATE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_activate_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_deactivate_req(context, p_appHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_DEACTIVATE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_deactivate_req(context->externalContext, p_appHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_event_mask_set_req(context, p_appHandle, p_indMask) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_EVENT_MASK_SET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_event_mask_set_req(context->externalContext, p_appHandle, p_indMask); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_failed_contact_counter_read_req(context, p_appHandle, p_logicalLinkHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_FAILED_CONTACT_COUNTER_READ_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_failed_contact_counter_read_req(context->externalContext, p_appHandle, p_logicalLinkHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_failed_contact_counter_reset_req(context, p_appHandle, p_logicalLinkHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_failed_contact_counter_reset_req(context->externalContext, p_appHandle, p_logicalLinkHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_alive_req(context, p_appHandle, p_physicalLinkHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_ALIVE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_alive_req(context->externalContext, p_appHandle, p_physicalLinkHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_create_req(context, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle, p_userPriority, p_remoteMacAddress, p_localMacAddress, p_txFlowSpec) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_CREATE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_create_req(context->externalContext, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle, p_userPriority, p_remoteMacAddress, p_localMacAddress, p_txFlowSpec); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_delete_req(context, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_DELETE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_delete_req(context->externalContext, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_flush_req(context, p_appHandle, p_logicalLinkHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_FLUSH_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_flush_req(context->externalContext, p_appHandle, p_logicalLinkHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_modify_req(context, p_appHandle, p_logicalLinkHandle, p_txFlowSpec) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_MODIFY_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_modify_req(context->externalContext, p_appHandle, p_logicalLinkHandle, p_txFlowSpec); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_supervision_timeout_delete_req(context, p_appHandle, p_physicalLinkHandle) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_supervision_timeout_delete_req(context->externalContext, p_appHandle, p_physicalLinkHandle); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_supervision_timeout_modify_req(context, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_supervision_timeout_modify_req(context->externalContext, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_link_supervision_timeout_set_req(context, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_link_supervision_timeout_set_req(context->externalContext, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout); \
    (void)CsrMutexLock(context->transitionLock);

#define call_pal_ctrl_register_req(context, p_appHandle, p_ampId, p_dataQid) \
    (void)CsrMutexUnlock(context->transitionLock); \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_REGISTER_REQ appHandle = %p) To(env)",\
        fsm_current_process_name((context)), \
        p_appHandle    ));\
    pal_ctrl_register_req(context->externalContext, p_appHandle, p_ampId, p_dataQid); \
    (void)CsrMutexLock(context->transitionLock);


#else

#define call_pal_ctrl_activate_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_ACTIVATE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_activate_req(context->externalContext, p_appHandle);

#define call_pal_ctrl_deactivate_req(context, p_appHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_DEACTIVATE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_deactivate_req(context->externalContext, p_appHandle);

#define call_pal_ctrl_event_mask_set_req(context, p_appHandle, p_indMask) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_EVENT_MASK_SET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_event_mask_set_req(context->externalContext, p_appHandle, p_indMask);

#define call_pal_ctrl_failed_contact_counter_read_req(context, p_appHandle, p_logicalLinkHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_FAILED_CONTACT_COUNTER_READ_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_failed_contact_counter_read_req(context->externalContext, p_appHandle, p_logicalLinkHandle);

#define call_pal_ctrl_failed_contact_counter_reset_req(context, p_appHandle, p_logicalLinkHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_FAILED_CONTACT_COUNTER_RESET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_failed_contact_counter_reset_req(context->externalContext, p_appHandle, p_logicalLinkHandle);

#define call_pal_ctrl_link_alive_req(context, p_appHandle, p_physicalLinkHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_ALIVE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_alive_req(context->externalContext, p_appHandle, p_physicalLinkHandle);

#define call_pal_ctrl_link_create_req(context, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle, p_userPriority, p_remoteMacAddress, p_localMacAddress, p_txFlowSpec) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_CREATE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_create_req(context->externalContext, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle, p_userPriority, p_remoteMacAddress, p_localMacAddress, p_txFlowSpec);

#define call_pal_ctrl_link_delete_req(context, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_DELETE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_delete_req(context->externalContext, p_appHandle, p_logicalLinkHandle, p_physicalLinkHandle);

#define call_pal_ctrl_link_flush_req(context, p_appHandle, p_logicalLinkHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_FLUSH_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_flush_req(context->externalContext, p_appHandle, p_logicalLinkHandle);

#define call_pal_ctrl_link_modify_req(context, p_appHandle, p_logicalLinkHandle, p_txFlowSpec) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_MODIFY_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_modify_req(context->externalContext, p_appHandle, p_logicalLinkHandle, p_txFlowSpec);

#define call_pal_ctrl_link_supervision_timeout_delete_req(context, p_appHandle, p_physicalLinkHandle) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_SUPERVISION_TIMEOUT_DELETE_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_supervision_timeout_delete_req(context->externalContext, p_appHandle, p_physicalLinkHandle);

#define call_pal_ctrl_link_supervision_timeout_modify_req(context, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_SUPERVISION_TIMEOUT_MODIFY_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_supervision_timeout_modify_req(context->externalContext, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout);

#define call_pal_ctrl_link_supervision_timeout_set_req(context, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_LINK_SUPERVISION_TIMEOUT_SET_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_link_supervision_timeout_set_req(context->externalContext, p_appHandle, p_physicalLinkHandle, p_linkSupervisionTimeout);

#define call_pal_ctrl_register_req(context, p_appHandle, p_ampId, p_dataQid) \
    sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(PAL_CTRL_REGISTER_REQ) To(env)", \
                   fsm_current_process_name((context)))); \
    pal_ctrl_register_req(context->externalContext, p_appHandle, p_ampId, p_dataQid);


#endif
#endif

#ifdef __cplusplus
}
#endif

#endif /* PAL_CTRL_OUTPUT_H */

