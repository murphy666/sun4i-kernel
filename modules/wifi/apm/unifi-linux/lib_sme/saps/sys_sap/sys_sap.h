/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef __SYS_SAP_H__
#define __SYS_SAP_H__

#ifdef __cplusplus
extern "C" {
#endif

/* ------------------------------------------ */
extern void unifi_sys_capabilities_cfm(FsmContext* context,
                                       void* appHandle,
                                       CsrUint16 commandQueueSize,
                                       CsrUint16 trafficQueueSize);

extern void unifi_sys_eapol_cfm(FsmContext* context,
                                void* appHandle,
                                unifi_EapolRc result);

extern void unifi_sys_hip_ind(FsmContext* context,
                              CsrUint16 mlmeCommandLength,
                              const CsrUint8 *mlmeCommand,
                              CsrUint16 dataRef1Length,
                              const CsrUint8 *dataRef1,
                              CsrUint16 dataRef2Length,
                              const CsrUint8 *dataRef2);

extern void unifi_sys_ip_configured_ind(FsmContext* context,
                                        CsrBool ipConfigured);

extern void unifi_sys_m4_transmitted_ind(FsmContext* context);

extern void unifi_sys_ma_unitdata_ind(FsmContext* context,
                                      void* appHandle,
                                      CsrUint8 subscriptionHandle,
                                      CsrUint16 frameLength,
                                      const CsrUint8 *frame,
                                      unifi_FrameFreeFunction freeFunction,
                                      unifi_ReceptionStatus receptionStatus,
                                      unifi_Priority priority,
                                      unifi_ServiceClass serviceClass);

extern void unifi_sys_ma_unitdata_cfm(FsmContext* context,
                                      void* appHandle,
                                      unifi_Status result,
                                      unifi_TransmissionStatus transmissionStatus,
                                      unifi_Priority providedPriority,
                                      unifi_ServiceClass providedServiceClass,
                                      CsrUint32 reqIdentifier);

extern void unifi_sys_ma_unitdata_subscribe_cfm(FsmContext* context,
                                                void* appHandle,
                                                CsrUint8 subscriptionHandle,
                                                unifi_SubscriptionResult status,
                                                CsrUint16 allocOffset);

extern void unifi_sys_ma_unitdata_unsubscribe_cfm(FsmContext* context,
                                                  void* appHandle,
                                                  unifi_SubscriptionResult status);

extern void unifi_sys_multicast_address_ind(FsmContext* context,
                                            unifi_ListAction action,
                                            CsrUint8 setAddressesCount,
                                            const unifi_MACAddress *setAddresses);

extern void unifi_sys_port_configure_cfm(FsmContext* context,
                                         unifi_Status status,
                                         const unifi_MACAddress *macAddress);

extern void unifi_sys_qos_control_cfm(FsmContext* context,
                                      unifi_Status status);

extern void unifi_sys_resume_ind(FsmContext* context,
                                 CsrBool powerMaintained);

extern void unifi_sys_suspend_ind(FsmContext* context,
                                  CsrBool hardSuspend,
                                  CsrBool d3Suspend);

extern void unifi_sys_tclas_add_cfm(FsmContext* context,
                                    unifi_Status status);

extern void unifi_sys_tclas_del_cfm(FsmContext* context,
                                    unifi_Status status);

extern void unifi_sys_traffic_protocol_ind(FsmContext* context,
                                           unifi_TrafficPacketType packetType,
                                           unifi_ProtocolDirection direction,
                                           const unifi_MACAddress *srcAddress);

extern void unifi_sys_traffic_sample_ind(FsmContext* context,
                                         const unifi_TrafficStats *stats);

extern void unifi_sys_wifi_off_ind(FsmContext* context,
                                   unifi_ControlIndication controlIndication);

extern void unifi_sys_wifi_off_cfm(FsmContext* context);

extern void unifi_sys_wifi_on_ind(FsmContext* context,
                                  unifi_Status status,
                                  const unifi_DriverVersions *driverVersions);

extern void unifi_sys_wifi_on_cfm(FsmContext* context,
                                  unifi_Status status);


/* ------------------------------------------ */
extern void unifi_sys_capabilities_req(void* context,
                                       void* appHandle);

extern void unifi_sys_configure_power_mode_req(void* context,
                                               unifi_LowPowerMode mode,
                                               CsrBool wakeHost);

extern void unifi_sys_eapol_req(void* context,
                                void* appHandle,
                                CsrUint8 subscriptionHandle,
                                CsrUint16 frameLength,
                                const CsrUint8 *frame,
                                unifi_FrameFreeFunction freeFunction);

extern void unifi_sys_hip_req(void* context,
                              CsrUint16 mlmeCommandLength,
                              const CsrUint8 *mlmeCommand,
                              CsrUint16 dataRef1Length,
                              const CsrUint8 *dataRef1,
                              CsrUint16 dataRef2Length,
                              const CsrUint8 *dataRef2);

extern void unifi_sys_m4_transmit_req(void* context);

extern void unifi_sys_ma_unitdata_req(void* context,
                                      void* appHandle,
                                      CsrUint8 subscriptionHandle,
                                      CsrUint16 frameLength,
                                      const CsrUint8 *frame,
                                      unifi_FrameFreeFunction freeFunction,
                                      unifi_Priority priority,
                                      unifi_ServiceClass serviceClass,
                                      CsrUint32 reqIdentifier);

extern void unifi_sys_ma_unitdata_rsp(void* context,
                                      CsrUint8 subscriptionHandle,
                                      unifi_Status result);

extern void unifi_sys_ma_unitdata_subscribe_req(void* context,
                                                void* appHandle,
                                                unifi_Encapsulation encapsulation,
                                                CsrUint16 protocol,
                                                CsrUint32 oui);

extern void unifi_sys_ma_unitdata_unsubscribe_req(void* context,
                                                  void* appHandle,
                                                  CsrUint8 subscriptionHandle);

extern void unifi_sys_media_status_req(void* context,
                                       unifi_MediaStatus mediaStatus,
                                       CsrUint32 mediaTypeMask);

extern void unifi_sys_multicast_address_rsp(void* context,
                                            unifi_Status status,
                                            unifi_ListAction action,
                                            CsrUint8 getAddressesCount,
                                            const unifi_MACAddress *getAddresses);

extern void unifi_sys_port_configure_req(void* context,
                                         unifi_PortAction uncontrolledPortAction,
                                         unifi_PortAction controlledPortAction,
                                         const unifi_MACAddress *macAddress);

extern void unifi_sys_qos_control_req(void* context,
                                      unifi_QoSControl control);

extern void unifi_sys_resume_rsp(void* context,
                                 unifi_Status status);

extern void unifi_sys_suspend_rsp(void* context,
                                  unifi_Status status);

extern void unifi_sys_tclas_add_req(void* context,
                                    CsrUint16 tclasLength,
                                    const CsrUint8 *tclas);

extern void unifi_sys_tclas_del_req(void* context,
                                    CsrUint16 tclasLength,
                                    const CsrUint8 *tclas);

extern void unifi_sys_traffic_classification_req(void* context,
                                                 unifi_TrafficType trafficType,
                                                 CsrUint16 period);

extern void unifi_sys_traffic_config_req(void* context,
                                         unifi_TrafficConfigType trafficConfigType,
                                         const unifi_TrafficConfig *config);

extern void unifi_sys_wifi_off_req(void* context,
                                   void* appHandle);

extern void unifi_sys_wifi_off_rsp(void* context);

extern void unifi_sys_wifi_on_req(void* context,
                                  void* appHandle);

extern void unifi_sys_wifi_on_rsp(void* context,
                                  unifi_Status status,
                                  const unifi_MACAddress *stationMacAddress,
                                  const unifi_SmeVersions *smeVersions,
                                  CsrBool scheduledInterrupt);




#ifdef __cplusplus
}
#endif

#endif /* __SYS_SAP_H__ */
