/***************************************************************************
 *
 * This is an AUTOGENERATED file from genio_sap_output_h.pl
 *
 *    CONFIDENTIAL
 *    Copyright (C) Cambridge Silicon Radio Ltd 2007. All rights reserved.
 */

#ifdef __cplusplus
extern "C" {
#endif

#ifndef PAL_HCI_OUTPUT_H
#define PAL_HCI_OUTPUT_H


/*
 * Dummy these defines out
 */
#ifdef SME_API_VALIDATE
#define call_hci_command_complete_evt(context, Num_HCI_Command_Packets, Return_Parameters)  CSR_UNUSED(Num_HCI_Command_Packets), CSR_UNUSED(Return_Parameters)
#define call_hci_command_status_evt(context, Status, Num_HCI_Command_Packets, Command_Opcode)  CSR_UNUSED(Status), CSR_UNUSED(Num_HCI_Command_Packets), CSR_UNUSED(Command_Opcode)
#define call_hci_hardware_error_evt(context, Hardware_Code)  CSR_UNUSED(Hardware_Code)
#define call_hci_flush_occurred_evt(context, Handle)  CSR_UNUSED(Handle)
#define call_hci_loopback_command_evt(context, HCI_Command_Packet)  CSR_UNUSED(HCI_Command_Packet)
#define call_hci_data_buffer_overflow_evt(context, Link_Type)  CSR_UNUSED(Link_Type)
#define call_hci_qos_violation_evt(context, Handle)  CSR_UNUSED(Handle)
#define call_hci_enhanced_flush_complete_evt(context, Handle)  CSR_UNUSED(Handle)
#define call_hci_physical_link_complete_evt(context, Status, Physical_Link_Handle)  CSR_UNUSED(Status), CSR_UNUSED(Physical_Link_Handle)
#define call_hci_channel_select_evt(context, Physical_Link_Handle)  CSR_UNUSED(Physical_Link_Handle)
#define call_hci_disconnect_physical_link_complete_evt(context, Status, Physical_Link_Handle, Reason)  CSR_UNUSED(Status), CSR_UNUSED(Physical_Link_Handle), CSR_UNUSED(Reason)
#define call_hci_physical_link_loss_early_warning_evt(context, Physical_Link_Handle, Link_Loss_Reason)  CSR_UNUSED(Physical_Link_Handle), CSR_UNUSED(Link_Loss_Reason)
#define call_hci_physical_link_recovery_evt(context, Physical_Link_Handle)  CSR_UNUSED(Physical_Link_Handle)
#define call_hci_logical_link_complete_evt(context, Status, Logical_Link_Handle, Physical_Link_Handle, TX_Flow_Spec_ID)  CSR_UNUSED(Status), CSR_UNUSED(Logical_Link_Handle), CSR_UNUSED(Physical_Link_Handle), CSR_UNUSED(TX_Flow_Spec_ID)
#define call_hci_disconnect_logical_link_complete_evt(context, Status, Logical_Link_Handle, Reason)  CSR_UNUSED(Status), CSR_UNUSED(Logical_Link_Handle), CSR_UNUSED(Reason)
#define call_hci_flow_spec_modify_complete_evt(context, Status, Handle)  CSR_UNUSED(Status), CSR_UNUSED(Handle)
#define call_hci_number_of_completed_data_blocks_evt(context, Total_Num_Data_Blocks, Number_Of_Handles, Handle, Number_Of_Completed_Packets, Number_Of_Completed_Blocks)  CSR_UNUSED(Total_Num_Data_Blocks), CSR_UNUSED(Number_Of_Handles), CSR_UNUSED(Handle), CSR_UNUSED(Number_Of_Completed_Packets), CSR_UNUSED(Number_Of_Completed_Blocks)
#define call_hci_short_range_mode_change_complete_evt(context, Status, Physical_Link_Handle, Short_Range_Mode_State)  CSR_UNUSED(Status), CSR_UNUSED(Physical_Link_Handle), CSR_UNUSED(Short_Range_Mode_State)
#define call_hci_amp_status_change_evt(context, Status, AMP_Status)  CSR_UNUSED(Status), CSR_UNUSED(AMP_Status)
#define call_hci_generic_amp_link_key_nt(context, BD_ADDR, Generic_AMP_Link_Key, Key_Type)  CSR_UNUSED(BD_ADDR), CSR_UNUSED(Generic_AMP_Link_Key), CSR_UNUSED(Key_Type)
#define call_amp_transmit_power_evt(context, Status, Power_Level)  CSR_UNUSED(Status), CSR_UNUSED(Power_Level)
#define call_amp_receiver_report_evt(context, AMP_REPORT)  CSR_UNUSED(AMP_REPORT)
#define call_amp_start_transmitter_test_evt(context, Status, Power_Level)  CSR_UNUSED(Status), CSR_UNUSED(Power_Level)
#define call_amp_start_receiver_test_evt(context, Status)  CSR_UNUSED(Status)

#else

#include "pal_hci_sap/pal_hci_sap.h"

#ifdef FSM_TRANSITION_LOCK

#define call_hci_command_complete_evt(context, NumHciCommandPackets, ReturnParameters) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_COMMAND_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_command_complete_evt(context->externalContext, NumHciCommandPackets, ReturnParameters); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_command_status_evt(context, Status, NumHciCommandPackets, CommandOpcode) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_COMMAND_STATUS_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_command_status_evt(context->externalContext, Status, NumHciCommandPackets, CommandOpcode); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_hardware_error_evt(context, HardwareCode) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_HARDWARE_ERROR_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_hardware_error_evt(context->externalContext, HardwareCode); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_flush_occurred_evt(context, Handle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_FLUSH_OCCURRED_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_flush_occurred_evt(context->externalContext, Handle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_loopback_command_evt(context, HciCommandPacket) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_LOOPBACK_COMMAND_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_loopback_command_evt(context->externalContext, HciCommandPacket); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_data_buffer_overflow_evt(context, LinkType) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_DATA_BUFFER_OVERFLOW_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_data_buffer_overflow_evt(context->externalContext, LinkType); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_qos_violation_evt(context, Handle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_QOS_VIOLATION_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_qos_violation_evt(context->externalContext, Handle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_enhanced_flush_complete_evt(context, Handle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_ENHANCED_FLUSH_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_enhanced_flush_complete_evt(context->externalContext, Handle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_physical_link_complete_evt(context, Status, PhysicalLinkHandle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_PHYSICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_physical_link_complete_evt(context->externalContext, Status, PhysicalLinkHandle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_channel_select_evt(context, PhysicalLinkHandle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_CHANNEL_SELECT_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_channel_select_evt(context->externalContext, PhysicalLinkHandle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_disconnect_physical_link_complete_evt(context, Status, PhysicalLinkHandle, Reason) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_DISCONNECT_PHYSICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_disconnect_physical_link_complete_evt(context->externalContext, Status, PhysicalLinkHandle, Reason); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_physical_link_loss_early_warning_evt(context, PhysicalLinkHandle, LinkLossReason) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_PHYSICAL_LINK_LOSS_EARLY_WARNING_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_physical_link_loss_early_warning_evt(context->externalContext, PhysicalLinkHandle, LinkLossReason); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_physical_link_recovery_evt(context, PhysicalLinkHandle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_PHYSICAL_LINK_RECOVERY_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_physical_link_recovery_evt(context->externalContext, PhysicalLinkHandle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_logical_link_complete_evt(context, Status, LogicalLinkHandle, PhysicalLinkHandle, TxFlowSpecId) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_LOGICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_logical_link_complete_evt(context->externalContext, Status, LogicalLinkHandle, PhysicalLinkHandle, TxFlowSpecId); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_disconnect_logical_link_complete_evt(context, Status, LogicalLinkHandle, Reason) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_DISCONNECT_LOGICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_disconnect_logical_link_complete_evt(context->externalContext, Status, LogicalLinkHandle, Reason); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_flow_spec_modify_complete_evt(context, Status, Handle) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_FLOW_SPEC_MODIFY_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_flow_spec_modify_complete_evt(context->externalContext, Status, Handle); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_number_of_completed_data_blocks_evt(context, TotalNumDataBlocks, NumberOfHandles, Handle, NumberOfCompletedPackets, NumberOfCompletedBlocks) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_NUMBER_OF_COMPLETED_DATA_BLOCKS_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_number_of_completed_data_blocks_evt(context->externalContext, TotalNumDataBlocks, NumberOfHandles, Handle, NumberOfCompletedPackets, NumberOfCompletedBlocks); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_short_range_mode_change_complete_evt(context, Status, PhysicalLinkHandle, ShortRangeModeState) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_SHORT_RANGE_MODE_CHANGE_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_short_range_mode_change_complete_evt(context->externalContext, Status, PhysicalLinkHandle, ShortRangeModeState); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_amp_status_change_evt(context, Status, AmpStatus) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_AMP_STATUS_CHANGE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_amp_status_change_evt(context->externalContext, Status, AmpStatus); \
              (void)CsrMutexLock(context->transitionLock);

#define call_hci_generic_amp_link_key_nt(context, BdAddr, GenericAmpLinkKey, KeyType) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_GENERIC_AMP_LINK_KEY_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_generic_amp_link_key_nt(context->externalContext, BdAddr, GenericAmpLinkKey, KeyType); \
              (void)CsrMutexLock(context->transitionLock);

#define call_amp_transmit_power_evt(context, Status, PowerLevel) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_TRANSMIT_POWER_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_transmit_power_evt(context->externalContext, Status, PowerLevel); \
              (void)CsrMutexLock(context->transitionLock);

#define call_amp_receiver_report_evt(context, AmpReport) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_RECEIVER_REPORT_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_receiver_report_evt(context->externalContext, AmpReport); \
              (void)CsrMutexLock(context->transitionLock);

#define call_amp_start_transmitter_test_evt(context, Status, PowerLevel) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_START_TRANSMITTER_TEST_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_start_transmitter_test_evt(context->externalContext, Status, PowerLevel); \
              (void)CsrMutexLock(context->transitionLock);

#define call_amp_start_receiver_test_evt(context, Status) \
              (void)CsrMutexUnlock(context->transitionLock); \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_START_RECEIVER_TEST_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_start_receiver_test_evt(context->externalContext, Status); \
              (void)CsrMutexLock(context->transitionLock);

#else

#define call_hci_command_complete_evt(context, NumHciCommandPackets, ReturnParameters) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_COMMAND_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_command_complete_evt(context->externalContext, NumHciCommandPackets, ReturnParameters);

#define call_hci_command_status_evt(context, Status, NumHciCommandPackets, CommandOpcode) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_COMMAND_STATUS_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_command_status_evt(context->externalContext, Status, NumHciCommandPackets, CommandOpcode);

#define call_hci_hardware_error_evt(context, HardwareCode) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_HARDWARE_ERROR_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_hardware_error_evt(context->externalContext, HardwareCode);

#define call_hci_flush_occurred_evt(context, Handle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_FLUSH_OCCURRED_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_flush_occurred_evt(context->externalContext, Handle);

#define call_hci_loopback_command_evt(context, HciCommandPacket) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_LOOPBACK_COMMAND_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_loopback_command_evt(context->externalContext, HciCommandPacket);

#define call_hci_data_buffer_overflow_evt(context, LinkType) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_DATA_BUFFER_OVERFLOW_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_data_buffer_overflow_evt(context->externalContext, LinkType);

#define call_hci_qos_violation_evt(context, Handle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_QOS_VIOLATION_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_qos_violation_evt(context->externalContext, Handle);

#define call_hci_enhanced_flush_complete_evt(context, Handle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_ENHANCED_FLUSH_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_enhanced_flush_complete_evt(context->externalContext, Handle);

#define call_hci_physical_link_complete_evt(context, Status, PhysicalLinkHandle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_PHYSICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_physical_link_complete_evt(context->externalContext, Status, PhysicalLinkHandle);

#define call_hci_channel_select_evt(context, PhysicalLinkHandle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_CHANNEL_SELECT_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_channel_select_evt(context->externalContext, PhysicalLinkHandle);

#define call_hci_disconnect_physical_link_complete_evt(context, Status, PhysicalLinkHandle, Reason) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_DISCONNECT_PHYSICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_disconnect_physical_link_complete_evt(context->externalContext, Status, PhysicalLinkHandle, Reason);

#define call_hci_physical_link_loss_early_warning_evt(context, PhysicalLinkHandle, LinkLossReason) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_PHYSICAL_LINK_LOSS_EARLY_WARNING_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_physical_link_loss_early_warning_evt(context->externalContext, PhysicalLinkHandle, LinkLossReason);

#define call_hci_physical_link_recovery_evt(context, PhysicalLinkHandle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_PHYSICAL_LINK_RECOVERY_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_physical_link_recovery_evt(context->externalContext, PhysicalLinkHandle);

#define call_hci_logical_link_complete_evt(context, Status, LogicalLinkHandle, PhysicalLinkHandle, TxFlowSpecId) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_LOGICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_logical_link_complete_evt(context->externalContext, Status, LogicalLinkHandle, PhysicalLinkHandle, TxFlowSpecId);

#define call_hci_disconnect_logical_link_complete_evt(context, Status, LogicalLinkHandle, Reason) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_DISCONNECT_LOGICAL_LINK_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_disconnect_logical_link_complete_evt(context->externalContext, Status, LogicalLinkHandle, Reason);

#define call_hci_flow_spec_modify_complete_evt(context, Status, Handle) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_FLOW_SPEC_MODIFY_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_flow_spec_modify_complete_evt(context->externalContext, Status, Handle);

#define call_hci_number_of_completed_data_blocks_evt(context, TotalNumDataBlocks, NumberOfHandles, Handle, NumberOfCompletedPackets, NumberOfCompletedBlocks) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_NUMBER_OF_COMPLETED_DATA_BLOCKS_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_number_of_completed_data_blocks_evt(context->externalContext, TotalNumDataBlocks, NumberOfHandles, Handle, NumberOfCompletedPackets, NumberOfCompletedBlocks);

#define call_hci_short_range_mode_change_complete_evt(context, Status, PhysicalLinkHandle, ShortRangeModeState) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_SHORT_RANGE_MODE_CHANGE_COMPLETE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_short_range_mode_change_complete_evt(context->externalContext, Status, PhysicalLinkHandle, ShortRangeModeState);

#define call_hci_amp_status_change_evt(context, Status, AmpStatus) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_AMP_STATUS_CHANGE_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_amp_status_change_evt(context->externalContext, Status, AmpStatus);

#define call_hci_generic_amp_link_key_nt(context, BdAddr, GenericAmpLinkKey, KeyType) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(HCI_GENERIC_AMP_LINK_KEY_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              hci_generic_amp_link_key_nt(context->externalContext, BdAddr, GenericAmpLinkKey, KeyType);

#define call_amp_transmit_power_evt(context, Status, PowerLevel) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_TRANSMIT_POWER_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_transmit_power_evt(context->externalContext, Status, PowerLevel);

#define call_amp_receiver_report_evt(context, AmpReport) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_RECEIVER_REPORT_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_receiver_report_evt(context->externalContext, AmpReport);

#define call_amp_start_transmitter_test_evt(context, Status, PowerLevel) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_START_TRANSMITTER_TEST_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_start_transmitter_test_evt(context->externalContext, Status, PowerLevel);

#define call_amp_start_receiver_test_evt(context, Status) \
              sme_trace_msc((TR_MSC, "MSC MESSAGE :: From(%s) Event(AMP_START_RECEIVER_TEST_ID) To(env)", \
                             fsm_current_process_name((context)))); \
              amp_start_receiver_test_evt(context->externalContext, Status);


#endif
#endif

#endif /* PAL_HCI_OUTPUT_H */

#ifdef __cplusplus
}
#endif
