/***************************************************************************
 *
 * This is an AUTOGENERATED file from genio_sap_h.pl
 *
 *    CONFIDENTIAL
 *    Copyright (C) Cambridge Silicon Radio Ltd 2007. All rights reserved.
 */

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __PAL_HCI_SAP_H__
#define __PAL_HCI_SAP_H__

/* ------------------------------------------ */
extern void hci_no_operation_cmd(FsmContext* context);

extern void hci_create_physical_link_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, CsrUint8 dedicatedAmpKeyLength, 
                     LinkKeyType dedicatedAmpKeyType, 
                     const CsrUint8* dedicatedAmpKey);

extern void hci_accept_physical_link_request_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, CsrUint8 dedicatedAmpKeyLength, 
                     LinkKeyType dedicatedAmpKeyType, 
                     const CsrUint8* dedicatedAmpKey);

extern void hci_disconnect_physical_link_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, HciStatusCode reason);

extern void hci_create_logical_link_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, const AmpFlowSpec* txFlowSpec, 
                     const AmpFlowSpec* rxFlowSpec);

extern void hci_accept_logical_link_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, const AmpFlowSpec* txFlowSpec, 
                     const AmpFlowSpec* rxFlowSpec);

extern void hci_disconnect_logical_link_cmd(FsmContext* context, CsrUint16 logicalLinkHandle);

extern void hci_logical_link_cancel_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, CsrUint8 txFlowSpecId);

extern void hci_flow_spec_modify_cmd(FsmContext* context, CsrUint16 handle, const AmpFlowSpec* txFlowSpec, 
                     const AmpFlowSpec* rxFlowSpec);

extern void hci_set_event_mask_cmd(FsmContext* context, const EventMask* eventMask);

extern void hci_reset_cmd(FsmContext* context);

extern void hci_flush_cmd(FsmContext* context, CsrUint16 handle);

extern void hci_read_connection_accept_timeout_cmd(FsmContext* context);

extern void hci_write_connection_accept_timeout_cmd(FsmContext* context, CsrUint16 connAcceptTimeout);

extern void hci_read_link_supervision_timeout_cmd(FsmContext* context, CsrUint16 handle);

extern void hci_write_link_supervision_timeout_cmd(FsmContext* context, CsrUint16 handle, CsrUint16 linkSupervisionTimeout);

extern void hci_enhanced_flush_cmd(FsmContext* context, CsrUint16 handle, PacketType packetType);

extern void hci_read_logical_link_accept_timeout_cmd(FsmContext* context);

extern void hci_write_logical_link_accept_timeout_cmd(FsmContext* context, CsrUint16 logicalLinkAcceptTimeout);

extern void hci_set_event_mask_page2_cmd(FsmContext* context, const EventMaskPage2* eventMaskPage2);

extern void hci_read_location_data_cmd(FsmContext* context);

extern void hci_write_location_data_cmd(FsmContext* context, LocationDomainAware locationDomainAware, CsrUint16 locationDomain, 
                     LocationDomainOptions locationDomainOptions, 
                     LocationOptions locationOptions);

extern void hci_read_best_effort_flush_timeout_cmd(FsmContext* context, CsrUint16 logicalLinkHandle);

extern void hci_write_best_effort_flush_timeout_cmd(FsmContext* context, CsrUint16 logicalLinkHandle, CsrUint32 bestEffortFlushTimeout);

extern void hci_short_range_mode_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, ShortRangeMode shortRangeMode);

extern void hci_read_local_version_information_cmd(FsmContext* context);

extern void hci_read_local_supported_commands_cmd(FsmContext* context);

extern void hci_read_data_block_size_cmd(FsmContext* context);

extern void hci_read_failed_contact_counter_cmd(FsmContext* context, CsrUint16 handle);

extern void hci_reset_failed_contact_counter_cmd(FsmContext* context, CsrUint16 handle);

extern void hci_read_link_quality_cmd(FsmContext* context, CsrUint16 handle);

extern void hci_read_rssi_cmd(FsmContext* context, CsrUint16 handle);

extern void hci_read_local_amp_info_cmd(FsmContext* context);

extern void hci_read_local_amp_assoc_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, CsrUint16 lengthSoFar, 
                     CsrUint16 maxRemoteAmpAssocLength);

extern void hci_write_remote_amp_assoc_cmd(FsmContext* context, CsrUint8 physicalLinkHandle, CsrUint16 lengthSoFar, 
                     CsrUint16 remainingLength, 
                     AmpAssoc assocFragment);

extern void hci_read_loopback_mode_cmd(FsmContext* context);

extern void hci_write_loopback_mode_cmd(FsmContext* context, HciLoopbackMode loopbackMode);

extern void hci_enable_amp_test_mode_cmd(FsmContext* context, TestMode enable);

extern void hci_set_amp_transmit_power_test_cmd(FsmContext* context, CsrUint8 powerLevel);

extern void hci_enable_amp_receiver_reports_cmd(FsmContext* context, CsrUint8 enable, CsrUint8 interval);

extern void hci_transmitter_amp_test_cmd(FsmContext* context, CsrUint8 testScenario);

extern void hci_receiver_amp_test_cmd(FsmContext* context, CsrUint8 testScenario);

extern void hci_amp_test_end_cmd(FsmContext* context);

/* ------------------------------------------ */
extern void hci_command_complete_evt(void* context, CsrUint8 numHciCommandPackets, const ReturnParameters* returnParameters);

extern void hci_command_status_evt(void* context, HciStatusCode status, CsrUint8 numHciCommandPackets, 
                     HciOpcode commandOpcode);

extern void hci_hardware_error_evt(void* context, CsrUint8 hardwareCode);

extern void hci_flush_occurred_evt(void* context, CsrUint16 handle);

extern void hci_loopback_command_evt(void* context, HciCommandPacket hciCommandPacket);

extern void hci_data_buffer_overflow_evt(void* context, HciLinkType linkType);

extern void hci_qos_violation_evt(void* context, CsrUint16 handle);

extern void hci_enhanced_flush_complete_evt(void* context, CsrUint16 handle);

extern void hci_physical_link_complete_evt(void* context, HciStatusCode status, CsrUint8 physicalLinkHandle);

extern void hci_channel_select_evt(void* context, CsrUint8 physicalLinkHandle);

extern void hci_disconnect_physical_link_complete_evt(void* context, HciStatusCode status, CsrUint8 physicalLinkHandle, 
                     CsrUint8 reason);

extern void hci_physical_link_loss_early_warning_evt(void* context, CsrUint8 physicalLinkHandle, LinkLossReasonCode linkLossReason);

extern void hci_physical_link_recovery_evt(void* context, CsrUint8 physicalLinkHandle);

extern void hci_logical_link_complete_evt(void* context, HciStatusCode status, CsrUint16 logicalLinkHandle, 
                     CsrUint8 physicalLinkHandle, 
                     CsrUint8 txFlowSpecId);

extern void hci_disconnect_logical_link_complete_evt(void* context, HciStatusCode status, CsrUint16 logicalLinkHandle, 
                     CsrUint8 reason);

extern void hci_flow_spec_modify_complete_evt(void* context, HciStatusCode status, CsrUint16 handle);

extern void hci_number_of_completed_data_blocks_evt(void* context, CsrUint16 totalNumDataBlocks, CsrUint8 numberOfHandles, 
                     CsrUint16 handle, 
                     CsrUint16 numberOfCompletedPackets, 
                     CsrUint16 numberOfCompletedBlocks);

extern void hci_short_range_mode_change_complete_evt(void* context, HciStatusCode status, CsrUint8 physicalLinkHandle, 
                     ShortRangeMode shortRangeModeState);

extern void hci_amp_status_change_evt(void* context, HciStatusCode status, AmpStatus ampStatus);

extern void hci_generic_amp_link_key_nt(void* context, const BdAddr* bdAddr, const GenericAmpLinkKey* genericAmpLinkKey, 
                     LinkKeyType keyType);

extern void amp_transmit_power_evt(void* context, HciStatusCode status, PowerLevel powerLevel);

extern void amp_receiver_report_evt(void* context, CsrUint8 ampReport);

extern void amp_start_transmitter_test_evt(void* context, HciStatusCode status, CsrUint8 powerLevel);

extern void amp_start_receiver_test_evt(void* context, HciStatusCode status);


#endif /* __PAL_HCI_SAP_H__ */

#ifdef __cplusplus
}
#endif
