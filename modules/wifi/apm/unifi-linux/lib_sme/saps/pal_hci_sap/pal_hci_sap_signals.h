/***************************************************************************
 *
 * This is an AUTOGENERATED file from genio_signal_gen.pl
 *
 *    CONFIDENTIAL
 *    Copyright (C) Cambridge Silicon Radio Ltd 2007. All rights reserved.
 */

/***************************************************************************
 * Description:
 *       The following structure define the message on this interface
 *
 * Options used to generate this file:
 * perl genio_signal_gen.pl
 *       -o /home/bfsw/host/releases/unifi_hostsoftware_212/build/unifi-driver-212/host/lib_sme/sme/../saps/pal_hci_sap/pal_hci_sap_signals.h
 *       -x /home/bfsw/host/releases/unifi_hostsoftware_212/build/unifi-driver-212/host/lib_sme/../common/amp_hci/bt_amp_hci.xml
 *       -i PAL_HCI
 *
 ***************************************************************************/
#ifdef __cplusplus
extern "C" {
#endif

#ifndef PAL_HCI_SIGNALS_H
#define PAL_HCI_SIGNALS_H

#include "pal_hci_sap_types.h" 

/* defines for HCI_COMMAND */

#define HCI_NO_OPERATION_CODE                               0x0000
#define HCI_CREATE_PHYSICAL_LINK_CODE                       0x0435
#define HCI_ACCEPT_PHYSICAL_LINK_REQUEST_CODE               0x0436
#define HCI_DISCONNECT_PHYSICAL_LINK_CODE                   0x0437
#define HCI_CREATE_LOGICAL_LINK_CODE                        0x0438
#define HCI_ACCEPT_LOGICAL_LINK_CODE                        0x0439
#define HCI_DISCONNECT_LOGICAL_LINK_CODE                    0x043a
#define HCI_LOGICAL_LINK_CANCEL_CODE                        0x043b
#define HCI_FLOW_SPEC_MODIFY_CODE                           0x043c
#define HCI_SET_EVENT_MASK_CODE                             0x0c01
#define HCI_RESET_CODE                                      0x0c03
#define HCI_FLUSH_CODE                                      0x0c08
#define HCI_READ_CONNECTION_ACCEPT_TIMEOUT_CODE             0x0c15
#define HCI_WRITE_CONNECTION_ACCEPT_TIMEOUT_CODE            0x0c16
#define HCI_READ_LINK_SUPERVISION_TIMEOUT_CODE              0x0c36
#define HCI_WRITE_LINK_SUPERVISION_TIMEOUT_CODE             0x0c37
#define HCI_ENHANCED_FLUSH_CODE                             0x0c5f
#define HCI_READ_LOGICAL_LINK_ACCEPT_TIMEOUT_CODE           0x0c61
#define HCI_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT_CODE          0x0c62
#define HCI_SET_EVENT_MASK_PAGE2_CODE                       0x0c63
#define HCI_READ_LOCATION_DATA_CODE                         0x0c64
#define HCI_WRITE_LOCATION_DATA_CODE                        0x0c65
#define HCI_READ_BEST_EFFORT_FLUSH_TIMEOUT_CODE             0x0c69
#define HCI_WRITE_BEST_EFFORT_FLUSH_TIMEOUT_CODE            0x0c6a
#define HCI_SHORT_RANGE_MODE_CODE                           0x0c6b
#define HCI_READ_LOCAL_VERSION_INFORMATION_CODE             0x1001
#define HCI_READ_LOCAL_SUPPORTED_COMMANDS_CODE              0x1002
#define HCI_READ_DATA_BLOCK_SIZE_CODE                       0x100a
#define HCI_READ_FAILED_CONTACT_COUNTER_CODE                0x1401
#define HCI_RESET_FAILED_CONTACT_COUNTER_CODE               0x1402
#define HCI_READ_LINK_QUALITY_CODE                          0x1403
#define HCI_READ_RSSI_CODE                                  0x1405
#define HCI_READ_LOCAL_AMP_INFO_CODE                        0x1409
#define HCI_READ_LOCAL_AMP_ASSOC_CODE                       0x140a
#define HCI_WRITE_REMOTE_AMP_ASSOC_CODE                     0x140b
#define HCI_READ_LOOPBACK_MODE_CODE                         0x1801
#define HCI_WRITE_LOOPBACK_MODE_CODE                        0x1802
#define HCI_ENABLE_AMP_TEST_MODE_CODE                       0x1870
#define HCI_SET_AMP_TRANSMIT_POWER_TEST_CODE                0x1871
#define HCI_ENABLE_AMP_RECEIVER_REPORTS_CODE                0x1872
#define HCI_TRANSMITTER_AMP_TEST_CODE                       0x1873
#define HCI_RECEIVER_AMP_TEST_CODE                          0x1874
#define HCI_AMP_TEST_END_CODE                               0x1875

/* defines for HCI_EVENT */

#define HCI_COMMAND_COMPLETE_CODE                           0x0e
#define HCI_COMMAND_STATUS_CODE                             0x0f
#define HCI_HARDWARE_ERROR_CODE                             0x10
#define HCI_FLUSH_OCCURRED_CODE                             0x11
#define HCI_LOOPBACK_COMMAND_CODE                           0x19
#define HCI_DATA_BUFFER_OVERFLOW_CODE                       0x1a
#define HCI_QOS_VIOLATION_CODE                              0x1e
#define HCI_ENHANCED_FLUSH_COMPLETE_CODE                    0x39
#define HCI_PHYSICAL_LINK_COMPLETE_CODE                     0x40
#define HCI_CHANNEL_SELECT_CODE                             0x41
#define HCI_DISCONNECT_PHYSICAL_LINK_COMPLETE_CODE          0x42
#define HCI_PHYSICAL_LINK_LOSS_EARLY_WARNING_CODE           0x43
#define HCI_PHYSICAL_LINK_RECOVERY_CODE                     0x44
#define HCI_LOGICAL_LINK_COMPLETE_CODE                      0x45
#define HCI_DISCONNECT_LOGICAL_LINK_COMPLETE_CODE           0x46
#define HCI_FLOW_SPEC_MODIFY_COMPLETE_CODE                  0x47
#define HCI_NUMBER_OF_COMPLETED_DATA_BLOCKS_CODE            0x48
#define HCI_SHORT_RANGE_MODE_CHANGE_COMPLETE_CODE           0x4c
#define HCI_AMP_STATUS_CHANGE_CODE                          0x4d
#define HCI_GENERIC_AMP_LINK_KEY_CODE                       0x50
#define AMP_TRANSMIT_POWER_CODE                             0x51
#define AMP_RECEIVER_REPORT_CODE                            0x52
#define AMP_START_TRANSMITTER_TEST_CODE                     0x53
#define AMP_START_RECEIVER_TEST_CODE                        0x54

/* -------------------------- HCI_No_Operation.Command -------------------------- */
typedef struct HciNoOperationCmd
{
    FsmEvent common;
} HciNoOperationCmd;

#define send_hci_no_operation_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_NO_OPERATION_CODE);\
}

#define send_hci_no_operation_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_NO_OPERATION_CODE);\
}

/* -------------------------- HCI_Create_Physical_Link.Command -------------------------- */
typedef struct HciCreatePhysicalLinkCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    CsrUint8 dedicatedAmpKeyLength;
    LinkKeyType dedicatedAmpKeyType;
    CsrUint8 *dedicatedAmpKey;
} HciCreatePhysicalLinkCmd;

#define send_hci_create_physical_link_cmd(context, pid, p1_Physical_Link_Handle, p2_Dedicated_AMP_Key_Length, p3_Dedicated_AMP_Key_Type, p4_Dedicated_AMP_Key) \
{ \
    HciCreatePhysicalLinkCmd *evt = (HciCreatePhysicalLinkCmd*) CsrPmalloc(sizeof(HciCreatePhysicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->dedicatedAmpKeyLength = p2_Dedicated_AMP_Key_Length;\
    evt->dedicatedAmpKeyType = p3_Dedicated_AMP_Key_Type;\
    evt->dedicatedAmpKey = p4_Dedicated_AMP_Key;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_CREATE_PHYSICAL_LINK_CODE);\
}

#define send_hci_create_physical_link_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Dedicated_AMP_Key_Length, p3_Dedicated_AMP_Key_Type, p4_Dedicated_AMP_Key) \
{ \
    HciCreatePhysicalLinkCmd *evt = (HciCreatePhysicalLinkCmd*) CsrPmalloc(sizeof(HciCreatePhysicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->dedicatedAmpKeyLength = p2_Dedicated_AMP_Key_Length;\
    evt->dedicatedAmpKeyType = p3_Dedicated_AMP_Key_Type;\
    evt->dedicatedAmpKey = p4_Dedicated_AMP_Key;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_CREATE_PHYSICAL_LINK_CODE);\
}

/* -------------------------- HCI_Accept_Physical_Link_Request.Command -------------------------- */
typedef struct HciAcceptPhysicalLinkRequestCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    CsrUint8 dedicatedAmpKeyLength;
    LinkKeyType dedicatedAmpKeyType;
    CsrUint8 *dedicatedAmpKey;
} HciAcceptPhysicalLinkRequestCmd;

#define send_hci_accept_physical_link_request_cmd(context, pid, p1_Physical_Link_Handle, p2_Dedicated_AMP_Key_Length, p3_Dedicated_AMP_Key_Type, p4_Dedicated_AMP_Key) \
{ \
    HciAcceptPhysicalLinkRequestCmd *evt = (HciAcceptPhysicalLinkRequestCmd*) CsrPmalloc(sizeof(HciAcceptPhysicalLinkRequestCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->dedicatedAmpKeyLength = p2_Dedicated_AMP_Key_Length;\
    evt->dedicatedAmpKeyType = p3_Dedicated_AMP_Key_Type;\
    evt->dedicatedAmpKey = p4_Dedicated_AMP_Key;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_ACCEPT_PHYSICAL_LINK_REQUEST_CODE);\
}

#define send_hci_accept_physical_link_request_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Dedicated_AMP_Key_Length, p3_Dedicated_AMP_Key_Type, p4_Dedicated_AMP_Key) \
{ \
    HciAcceptPhysicalLinkRequestCmd *evt = (HciAcceptPhysicalLinkRequestCmd*) CsrPmalloc(sizeof(HciAcceptPhysicalLinkRequestCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->dedicatedAmpKeyLength = p2_Dedicated_AMP_Key_Length;\
    evt->dedicatedAmpKeyType = p3_Dedicated_AMP_Key_Type;\
    evt->dedicatedAmpKey = p4_Dedicated_AMP_Key;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_ACCEPT_PHYSICAL_LINK_REQUEST_CODE);\
}

/* -------------------------- HCI_Disconnect_Physical_Link.Command -------------------------- */
typedef struct HciDisconnectPhysicalLinkCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    HciStatusCode reason;
} HciDisconnectPhysicalLinkCmd;

#define send_hci_disconnect_physical_link_cmd(context, pid, p1_Physical_Link_Handle, p2_Reason) \
{ \
    HciDisconnectPhysicalLinkCmd *evt = (HciDisconnectPhysicalLinkCmd*) CsrPmalloc(sizeof(HciDisconnectPhysicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->reason = p2_Reason;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_PHYSICAL_LINK_CODE);\
}

#define send_hci_disconnect_physical_link_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Reason) \
{ \
    HciDisconnectPhysicalLinkCmd *evt = (HciDisconnectPhysicalLinkCmd*) CsrPmalloc(sizeof(HciDisconnectPhysicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->reason = p2_Reason;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_PHYSICAL_LINK_CODE);\
}

/* -------------------------- HCI_Create_Logical_Link.Command -------------------------- */
typedef struct HciCreateLogicalLinkCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    AmpFlowSpec txFlowSpec;
    AmpFlowSpec rxFlowSpec;
} HciCreateLogicalLinkCmd;

#define send_hci_create_logical_link_cmd(context, pid, p1_Physical_Link_Handle, p2_Tx_Flow_Spec, p3_Rx_Flow_Spec) \
{ \
    HciCreateLogicalLinkCmd *evt = (HciCreateLogicalLinkCmd*) CsrPmalloc(sizeof(HciCreateLogicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->txFlowSpec = p2_Tx_Flow_Spec;\
    evt->rxFlowSpec = p3_Rx_Flow_Spec;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_CREATE_LOGICAL_LINK_CODE);\
}

#define send_hci_create_logical_link_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Tx_Flow_Spec, p3_Rx_Flow_Spec) \
{ \
    HciCreateLogicalLinkCmd *evt = (HciCreateLogicalLinkCmd*) CsrPmalloc(sizeof(HciCreateLogicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->txFlowSpec = p2_Tx_Flow_Spec;\
    evt->rxFlowSpec = p3_Rx_Flow_Spec;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_CREATE_LOGICAL_LINK_CODE);\
}

/* -------------------------- HCI_Accept_Logical_Link.Command -------------------------- */
typedef struct HciAcceptLogicalLinkCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    AmpFlowSpec txFlowSpec;
    AmpFlowSpec rxFlowSpec;
} HciAcceptLogicalLinkCmd;

#define send_hci_accept_logical_link_cmd(context, pid, p1_Physical_Link_Handle, p2_Tx_Flow_Spec, p3_Rx_Flow_Spec) \
{ \
    HciAcceptLogicalLinkCmd *evt = (HciAcceptLogicalLinkCmd*) CsrPmalloc(sizeof(HciAcceptLogicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->txFlowSpec = p2_Tx_Flow_Spec;\
    evt->rxFlowSpec = p3_Rx_Flow_Spec;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_ACCEPT_LOGICAL_LINK_CODE);\
}

#define send_hci_accept_logical_link_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Tx_Flow_Spec, p3_Rx_Flow_Spec) \
{ \
    HciAcceptLogicalLinkCmd *evt = (HciAcceptLogicalLinkCmd*) CsrPmalloc(sizeof(HciAcceptLogicalLinkCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->txFlowSpec = p2_Tx_Flow_Spec;\
    evt->rxFlowSpec = p3_Rx_Flow_Spec;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_ACCEPT_LOGICAL_LINK_CODE);\
}

/* -------------------------- HCI_Disconnect_Logical_Link.Command -------------------------- */
typedef struct HciDisconnectLogicalLinkCmd
{
    FsmEvent common;
    CsrUint16 logicalLinkHandle;
} HciDisconnectLogicalLinkCmd;

#define send_hci_disconnect_logical_link_cmd(context, pid, p1_Logical_Link_Handle) \
{ \
    HciDisconnectLogicalLinkCmd *evt = (HciDisconnectLogicalLinkCmd*) CsrPmalloc(sizeof(HciDisconnectLogicalLinkCmd));\
    evt->logicalLinkHandle = p1_Logical_Link_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_LOGICAL_LINK_CODE);\
}

#define send_hci_disconnect_logical_link_cmd_external(context, pid, p1_Logical_Link_Handle) \
{ \
    HciDisconnectLogicalLinkCmd *evt = (HciDisconnectLogicalLinkCmd*) CsrPmalloc(sizeof(HciDisconnectLogicalLinkCmd));\
    evt->logicalLinkHandle = p1_Logical_Link_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_LOGICAL_LINK_CODE);\
}

/* -------------------------- HCI_Logical_Link_Cancel.Command -------------------------- */
typedef struct HciLogicalLinkCancelCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    CsrUint8 txFlowSpecId;
} HciLogicalLinkCancelCmd;

#define send_hci_logical_link_cancel_cmd(context, pid, p1_Physical_Link_Handle, p2_Tx_Flow_Spec_ID) \
{ \
    HciLogicalLinkCancelCmd *evt = (HciLogicalLinkCancelCmd*) CsrPmalloc(sizeof(HciLogicalLinkCancelCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->txFlowSpecId = p2_Tx_Flow_Spec_ID;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_LOGICAL_LINK_CANCEL_CODE);\
}

#define send_hci_logical_link_cancel_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Tx_Flow_Spec_ID) \
{ \
    HciLogicalLinkCancelCmd *evt = (HciLogicalLinkCancelCmd*) CsrPmalloc(sizeof(HciLogicalLinkCancelCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->txFlowSpecId = p2_Tx_Flow_Spec_ID;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_LOGICAL_LINK_CANCEL_CODE);\
}

/* -------------------------- HCI_Flow_Spec_Modify.Command -------------------------- */
typedef struct HciFlowSpecModifyCmd
{
    FsmEvent common;
    CsrUint16 handle;
    AmpFlowSpec txFlowSpec;
    AmpFlowSpec rxFlowSpec;
} HciFlowSpecModifyCmd;

#define send_hci_flow_spec_modify_cmd(context, pid, p1_Handle, p2_Tx_Flow_Spec, p3_Rx_Flow_Spec) \
{ \
    HciFlowSpecModifyCmd *evt = (HciFlowSpecModifyCmd*) CsrPmalloc(sizeof(HciFlowSpecModifyCmd));\
    evt->handle = p1_Handle;\
    evt->txFlowSpec = p2_Tx_Flow_Spec;\
    evt->rxFlowSpec = p3_Rx_Flow_Spec;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_FLOW_SPEC_MODIFY_CODE);\
}

#define send_hci_flow_spec_modify_cmd_external(context, pid, p1_Handle, p2_Tx_Flow_Spec, p3_Rx_Flow_Spec) \
{ \
    HciFlowSpecModifyCmd *evt = (HciFlowSpecModifyCmd*) CsrPmalloc(sizeof(HciFlowSpecModifyCmd));\
    evt->handle = p1_Handle;\
    evt->txFlowSpec = p2_Tx_Flow_Spec;\
    evt->rxFlowSpec = p3_Rx_Flow_Spec;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_FLOW_SPEC_MODIFY_CODE);\
}

/* -------------------------- HCI_Set_Event_Mask.Command -------------------------- */
typedef struct HciSetEventMaskCmd
{
    FsmEvent common;
    EventMask eventMask;
} HciSetEventMaskCmd;

#define send_hci_set_event_mask_cmd(context, pid, p1_Event_Mask) \
{ \
    HciSetEventMaskCmd *evt = (HciSetEventMaskCmd*) CsrPmalloc(sizeof(HciSetEventMaskCmd));\
    evt->eventMask = p1_Event_Mask;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_SET_EVENT_MASK_CODE);\
}

#define send_hci_set_event_mask_cmd_external(context, pid, p1_Event_Mask) \
{ \
    HciSetEventMaskCmd *evt = (HciSetEventMaskCmd*) CsrPmalloc(sizeof(HciSetEventMaskCmd));\
    evt->eventMask = p1_Event_Mask;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_SET_EVENT_MASK_CODE);\
}

/* -------------------------- HCI_Reset.Command -------------------------- */
typedef struct HciResetCmd
{
    FsmEvent common;
} HciResetCmd;

#define send_hci_reset_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_RESET_CODE);\
}

#define send_hci_reset_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_RESET_CODE);\
}

/* -------------------------- HCI_Flush.Command -------------------------- */
typedef struct HciFlushCmd
{
    FsmEvent common;
    CsrUint16 handle;
} HciFlushCmd;

#define send_hci_flush_cmd(context, pid, p1_Handle) \
{ \
    HciFlushCmd *evt = (HciFlushCmd*) CsrPmalloc(sizeof(HciFlushCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_FLUSH_CODE);\
}

#define send_hci_flush_cmd_external(context, pid, p1_Handle) \
{ \
    HciFlushCmd *evt = (HciFlushCmd*) CsrPmalloc(sizeof(HciFlushCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_FLUSH_CODE);\
}

/* -------------------------- HCI_Read_Connection_Accept_Timeout.Command -------------------------- */
typedef struct HciReadConnectionAcceptTimeoutCmd
{
    FsmEvent common;
} HciReadConnectionAcceptTimeoutCmd;

#define send_hci_read_connection_accept_timeout_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_CONNECTION_ACCEPT_TIMEOUT_CODE);\
}

#define send_hci_read_connection_accept_timeout_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_CONNECTION_ACCEPT_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Write_Connection_Accept_Timeout.Command -------------------------- */
typedef struct HciWriteConnectionAcceptTimeoutCmd
{
    FsmEvent common;
    CsrUint16 connAcceptTimeout;
} HciWriteConnectionAcceptTimeoutCmd;

#define send_hci_write_connection_accept_timeout_cmd(context, pid, p1_Conn_Accept_Timeout) \
{ \
    HciWriteConnectionAcceptTimeoutCmd *evt = (HciWriteConnectionAcceptTimeoutCmd*) CsrPmalloc(sizeof(HciWriteConnectionAcceptTimeoutCmd));\
    evt->connAcceptTimeout = p1_Conn_Accept_Timeout;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_CONNECTION_ACCEPT_TIMEOUT_CODE);\
}

#define send_hci_write_connection_accept_timeout_cmd_external(context, pid, p1_Conn_Accept_Timeout) \
{ \
    HciWriteConnectionAcceptTimeoutCmd *evt = (HciWriteConnectionAcceptTimeoutCmd*) CsrPmalloc(sizeof(HciWriteConnectionAcceptTimeoutCmd));\
    evt->connAcceptTimeout = p1_Conn_Accept_Timeout;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_CONNECTION_ACCEPT_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Read_Link_Supervision_Timeout.Command -------------------------- */
typedef struct HciReadLinkSupervisionTimeoutCmd
{
    FsmEvent common;
    CsrUint16 handle;
} HciReadLinkSupervisionTimeoutCmd;

#define send_hci_read_link_supervision_timeout_cmd(context, pid, p1_Handle) \
{ \
    HciReadLinkSupervisionTimeoutCmd *evt = (HciReadLinkSupervisionTimeoutCmd*) CsrPmalloc(sizeof(HciReadLinkSupervisionTimeoutCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_READ_LINK_SUPERVISION_TIMEOUT_CODE);\
}

#define send_hci_read_link_supervision_timeout_cmd_external(context, pid, p1_Handle) \
{ \
    HciReadLinkSupervisionTimeoutCmd *evt = (HciReadLinkSupervisionTimeoutCmd*) CsrPmalloc(sizeof(HciReadLinkSupervisionTimeoutCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_READ_LINK_SUPERVISION_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Write_Link_Supervision_Timeout.Command -------------------------- */
typedef struct HciWriteLinkSupervisionTimeoutCmd
{
    FsmEvent common;
    CsrUint16 handle;
    CsrUint16 linkSupervisionTimeout;
} HciWriteLinkSupervisionTimeoutCmd;

#define send_hci_write_link_supervision_timeout_cmd(context, pid, p1_Handle, p2_Link_Supervision_Timeout) \
{ \
    HciWriteLinkSupervisionTimeoutCmd *evt = (HciWriteLinkSupervisionTimeoutCmd*) CsrPmalloc(sizeof(HciWriteLinkSupervisionTimeoutCmd));\
    evt->handle = p1_Handle;\
    evt->linkSupervisionTimeout = p2_Link_Supervision_Timeout;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_LINK_SUPERVISION_TIMEOUT_CODE);\
}

#define send_hci_write_link_supervision_timeout_cmd_external(context, pid, p1_Handle, p2_Link_Supervision_Timeout) \
{ \
    HciWriteLinkSupervisionTimeoutCmd *evt = (HciWriteLinkSupervisionTimeoutCmd*) CsrPmalloc(sizeof(HciWriteLinkSupervisionTimeoutCmd));\
    evt->handle = p1_Handle;\
    evt->linkSupervisionTimeout = p2_Link_Supervision_Timeout;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_LINK_SUPERVISION_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Enhanced_Flush.Command -------------------------- */
typedef struct HciEnhancedFlushCmd
{
    FsmEvent common;
    CsrUint16 handle;
    PacketType packetType;
} HciEnhancedFlushCmd;

#define send_hci_enhanced_flush_cmd(context, pid, p1_Handle, p2_Packet_Type) \
{ \
    HciEnhancedFlushCmd *evt = (HciEnhancedFlushCmd*) CsrPmalloc(sizeof(HciEnhancedFlushCmd));\
    evt->handle = p1_Handle;\
    evt->packetType = p2_Packet_Type;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_ENHANCED_FLUSH_CODE);\
}

#define send_hci_enhanced_flush_cmd_external(context, pid, p1_Handle, p2_Packet_Type) \
{ \
    HciEnhancedFlushCmd *evt = (HciEnhancedFlushCmd*) CsrPmalloc(sizeof(HciEnhancedFlushCmd));\
    evt->handle = p1_Handle;\
    evt->packetType = p2_Packet_Type;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_ENHANCED_FLUSH_CODE);\
}

/* -------------------------- HCI_Read_Logical_Link_Accept_Timeout.Command -------------------------- */
typedef struct HciReadLogicalLinkAcceptTimeoutCmd
{
    FsmEvent common;
} HciReadLogicalLinkAcceptTimeoutCmd;

#define send_hci_read_logical_link_accept_timeout_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_LOGICAL_LINK_ACCEPT_TIMEOUT_CODE);\
}

#define send_hci_read_logical_link_accept_timeout_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_LOGICAL_LINK_ACCEPT_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Write_Logical_Link_Accept_Timeout.Command -------------------------- */
typedef struct HciWriteLogicalLinkAcceptTimeoutCmd
{
    FsmEvent common;
    CsrUint16 logicalLinkAcceptTimeout;
} HciWriteLogicalLinkAcceptTimeoutCmd;

#define send_hci_write_logical_link_accept_timeout_cmd(context, pid, p1_Logical_Link_Accept_Timeout) \
{ \
    HciWriteLogicalLinkAcceptTimeoutCmd *evt = (HciWriteLogicalLinkAcceptTimeoutCmd*) CsrPmalloc(sizeof(HciWriteLogicalLinkAcceptTimeoutCmd));\
    evt->logicalLinkAcceptTimeout = p1_Logical_Link_Accept_Timeout;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT_CODE);\
}

#define send_hci_write_logical_link_accept_timeout_cmd_external(context, pid, p1_Logical_Link_Accept_Timeout) \
{ \
    HciWriteLogicalLinkAcceptTimeoutCmd *evt = (HciWriteLogicalLinkAcceptTimeoutCmd*) CsrPmalloc(sizeof(HciWriteLogicalLinkAcceptTimeoutCmd));\
    evt->logicalLinkAcceptTimeout = p1_Logical_Link_Accept_Timeout;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Set_Event_Mask_Page2.Command -------------------------- */
typedef struct HciSetEventMaskPage2Cmd
{
    FsmEvent common;
    EventMaskPage2 eventMaskPage2;
} HciSetEventMaskPage2Cmd;

#define send_hci_set_event_mask_page2_cmd(context, pid, p1_Event_Mask_Page2) \
{ \
    HciSetEventMaskPage2Cmd *evt = (HciSetEventMaskPage2Cmd*) CsrPmalloc(sizeof(HciSetEventMaskPage2Cmd));\
    evt->eventMaskPage2 = p1_Event_Mask_Page2;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_SET_EVENT_MASK_PAGE2_CODE);\
}

#define send_hci_set_event_mask_page2_cmd_external(context, pid, p1_Event_Mask_Page2) \
{ \
    HciSetEventMaskPage2Cmd *evt = (HciSetEventMaskPage2Cmd*) CsrPmalloc(sizeof(HciSetEventMaskPage2Cmd));\
    evt->eventMaskPage2 = p1_Event_Mask_Page2;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_SET_EVENT_MASK_PAGE2_CODE);\
}

/* -------------------------- HCI_Read_Location_Data.Command -------------------------- */
typedef struct HciReadLocationDataCmd
{
    FsmEvent common;
} HciReadLocationDataCmd;

#define send_hci_read_location_data_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_LOCATION_DATA_CODE);\
}

#define send_hci_read_location_data_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_LOCATION_DATA_CODE);\
}

/* -------------------------- HCI_Write_Location_Data.Command -------------------------- */
typedef struct HciWriteLocationDataCmd
{
    FsmEvent common;
    LocationDomainAware locationDomainAware;
    CsrUint16 locationDomain;
    LocationDomainOptions locationDomainOptions;
    LocationOptions locationOptions;
} HciWriteLocationDataCmd;

#define send_hci_write_location_data_cmd(context, pid, p1_Location_Domain_Aware, p2_Location_Domain, p3_Location_Domain_Options, p4_Location_Options) \
{ \
    HciWriteLocationDataCmd *evt = (HciWriteLocationDataCmd*) CsrPmalloc(sizeof(HciWriteLocationDataCmd));\
    evt->locationDomainAware = p1_Location_Domain_Aware;\
    evt->locationDomain = p2_Location_Domain;\
    evt->locationDomainOptions = p3_Location_Domain_Options;\
    evt->locationOptions = p4_Location_Options;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_LOCATION_DATA_CODE);\
}

#define send_hci_write_location_data_cmd_external(context, pid, p1_Location_Domain_Aware, p2_Location_Domain, p3_Location_Domain_Options, p4_Location_Options) \
{ \
    HciWriteLocationDataCmd *evt = (HciWriteLocationDataCmd*) CsrPmalloc(sizeof(HciWriteLocationDataCmd));\
    evt->locationDomainAware = p1_Location_Domain_Aware;\
    evt->locationDomain = p2_Location_Domain;\
    evt->locationDomainOptions = p3_Location_Domain_Options;\
    evt->locationOptions = p4_Location_Options;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_LOCATION_DATA_CODE);\
}

/* -------------------------- HCI_Read_Best_Effort_Flush_Timeout.Command -------------------------- */
typedef struct HciReadBestEffortFlushTimeoutCmd
{
    FsmEvent common;
    CsrUint16 logicalLinkHandle;
} HciReadBestEffortFlushTimeoutCmd;

#define send_hci_read_best_effort_flush_timeout_cmd(context, pid, p1_Logical_Link_Handle) \
{ \
    HciReadBestEffortFlushTimeoutCmd *evt = (HciReadBestEffortFlushTimeoutCmd*) CsrPmalloc(sizeof(HciReadBestEffortFlushTimeoutCmd));\
    evt->logicalLinkHandle = p1_Logical_Link_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_READ_BEST_EFFORT_FLUSH_TIMEOUT_CODE);\
}

#define send_hci_read_best_effort_flush_timeout_cmd_external(context, pid, p1_Logical_Link_Handle) \
{ \
    HciReadBestEffortFlushTimeoutCmd *evt = (HciReadBestEffortFlushTimeoutCmd*) CsrPmalloc(sizeof(HciReadBestEffortFlushTimeoutCmd));\
    evt->logicalLinkHandle = p1_Logical_Link_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_READ_BEST_EFFORT_FLUSH_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Write_Best_Effort_Flush_Timeout.Command -------------------------- */
typedef struct HciWriteBestEffortFlushTimeoutCmd
{
    FsmEvent common;
    CsrUint16 logicalLinkHandle;
    CsrUint32 bestEffortFlushTimeout;
} HciWriteBestEffortFlushTimeoutCmd;

#define send_hci_write_best_effort_flush_timeout_cmd(context, pid, p1_Logical_Link_Handle, p2_Best_Effort_Flush_Timeout) \
{ \
    HciWriteBestEffortFlushTimeoutCmd *evt = (HciWriteBestEffortFlushTimeoutCmd*) CsrPmalloc(sizeof(HciWriteBestEffortFlushTimeoutCmd));\
    evt->logicalLinkHandle = p1_Logical_Link_Handle;\
    evt->bestEffortFlushTimeout = p2_Best_Effort_Flush_Timeout;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_BEST_EFFORT_FLUSH_TIMEOUT_CODE);\
}

#define send_hci_write_best_effort_flush_timeout_cmd_external(context, pid, p1_Logical_Link_Handle, p2_Best_Effort_Flush_Timeout) \
{ \
    HciWriteBestEffortFlushTimeoutCmd *evt = (HciWriteBestEffortFlushTimeoutCmd*) CsrPmalloc(sizeof(HciWriteBestEffortFlushTimeoutCmd));\
    evt->logicalLinkHandle = p1_Logical_Link_Handle;\
    evt->bestEffortFlushTimeout = p2_Best_Effort_Flush_Timeout;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_BEST_EFFORT_FLUSH_TIMEOUT_CODE);\
}

/* -------------------------- HCI_Short_Range_Mode.Command -------------------------- */
typedef struct HciShortRangeModeCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    ShortRangeMode shortRangeMode;
} HciShortRangeModeCmd;

#define send_hci_short_range_mode_cmd(context, pid, p1_Physical_Link_Handle, p2_Short_Range_Mode) \
{ \
    HciShortRangeModeCmd *evt = (HciShortRangeModeCmd*) CsrPmalloc(sizeof(HciShortRangeModeCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->shortRangeMode = p2_Short_Range_Mode;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_SHORT_RANGE_MODE_CODE);\
}

#define send_hci_short_range_mode_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Short_Range_Mode) \
{ \
    HciShortRangeModeCmd *evt = (HciShortRangeModeCmd*) CsrPmalloc(sizeof(HciShortRangeModeCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->shortRangeMode = p2_Short_Range_Mode;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_SHORT_RANGE_MODE_CODE);\
}

/* -------------------------- HCI_Read_Local_Version_Information.Command -------------------------- */
typedef struct HciReadLocalVersionInformationCmd
{
    FsmEvent common;
} HciReadLocalVersionInformationCmd;

#define send_hci_read_local_version_information_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_LOCAL_VERSION_INFORMATION_CODE);\
}

#define send_hci_read_local_version_information_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_LOCAL_VERSION_INFORMATION_CODE);\
}

/* -------------------------- HCI_Read_Local_Supported_Commands.Command -------------------------- */
typedef struct HciReadLocalSupportedCommandsCmd
{
    FsmEvent common;
} HciReadLocalSupportedCommandsCmd;

#define send_hci_read_local_supported_commands_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_LOCAL_SUPPORTED_COMMANDS_CODE);\
}

#define send_hci_read_local_supported_commands_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_LOCAL_SUPPORTED_COMMANDS_CODE);\
}

/* -------------------------- HCI_Read_Data_Block_Size.Command -------------------------- */
typedef struct HciReadDataBlockSizeCmd
{
    FsmEvent common;
} HciReadDataBlockSizeCmd;

#define send_hci_read_data_block_size_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_DATA_BLOCK_SIZE_CODE);\
}

#define send_hci_read_data_block_size_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_DATA_BLOCK_SIZE_CODE);\
}

/* -------------------------- HCI_Read_Failed_Contact_Counter.Command -------------------------- */
typedef struct HciReadFailedContactCounterCmd
{
    FsmEvent common;
    CsrUint16 handle;
} HciReadFailedContactCounterCmd;

#define send_hci_read_failed_contact_counter_cmd(context, pid, p1_Handle) \
{ \
    HciReadFailedContactCounterCmd *evt = (HciReadFailedContactCounterCmd*) CsrPmalloc(sizeof(HciReadFailedContactCounterCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_READ_FAILED_CONTACT_COUNTER_CODE);\
}

#define send_hci_read_failed_contact_counter_cmd_external(context, pid, p1_Handle) \
{ \
    HciReadFailedContactCounterCmd *evt = (HciReadFailedContactCounterCmd*) CsrPmalloc(sizeof(HciReadFailedContactCounterCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_READ_FAILED_CONTACT_COUNTER_CODE);\
}

/* -------------------------- HCI_Reset_Failed_Contact_Counter.Command -------------------------- */
typedef struct HciResetFailedContactCounterCmd
{
    FsmEvent common;
    CsrUint16 handle;
} HciResetFailedContactCounterCmd;

#define send_hci_reset_failed_contact_counter_cmd(context, pid, p1_Handle) \
{ \
    HciResetFailedContactCounterCmd *evt = (HciResetFailedContactCounterCmd*) CsrPmalloc(sizeof(HciResetFailedContactCounterCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_RESET_FAILED_CONTACT_COUNTER_CODE);\
}

#define send_hci_reset_failed_contact_counter_cmd_external(context, pid, p1_Handle) \
{ \
    HciResetFailedContactCounterCmd *evt = (HciResetFailedContactCounterCmd*) CsrPmalloc(sizeof(HciResetFailedContactCounterCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_RESET_FAILED_CONTACT_COUNTER_CODE);\
}

/* -------------------------- HCI_Read_Link_Quality.Command -------------------------- */
typedef struct HciReadLinkQualityCmd
{
    FsmEvent common;
    CsrUint16 handle;
} HciReadLinkQualityCmd;

#define send_hci_read_link_quality_cmd(context, pid, p1_Handle) \
{ \
    HciReadLinkQualityCmd *evt = (HciReadLinkQualityCmd*) CsrPmalloc(sizeof(HciReadLinkQualityCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_READ_LINK_QUALITY_CODE);\
}

#define send_hci_read_link_quality_cmd_external(context, pid, p1_Handle) \
{ \
    HciReadLinkQualityCmd *evt = (HciReadLinkQualityCmd*) CsrPmalloc(sizeof(HciReadLinkQualityCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_READ_LINK_QUALITY_CODE);\
}

/* -------------------------- HCI_Read_RSSI.Command -------------------------- */
typedef struct HciReadRssiCmd
{
    FsmEvent common;
    CsrUint16 handle;
} HciReadRssiCmd;

#define send_hci_read_rssi_cmd(context, pid, p1_Handle) \
{ \
    HciReadRssiCmd *evt = (HciReadRssiCmd*) CsrPmalloc(sizeof(HciReadRssiCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_READ_RSSI_CODE);\
}

#define send_hci_read_rssi_cmd_external(context, pid, p1_Handle) \
{ \
    HciReadRssiCmd *evt = (HciReadRssiCmd*) CsrPmalloc(sizeof(HciReadRssiCmd));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_READ_RSSI_CODE);\
}

/* -------------------------- HCI_Read_Local_AMP_Info.Command -------------------------- */
typedef struct HciReadLocalAmpInfoCmd
{
    FsmEvent common;
} HciReadLocalAmpInfoCmd;

#define send_hci_read_local_amp_info_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_LOCAL_AMP_INFO_CODE);\
}

#define send_hci_read_local_amp_info_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_LOCAL_AMP_INFO_CODE);\
}

/* -------------------------- HCI_Read_Local_AMP_ASSOC.Command -------------------------- */
typedef struct HciReadLocalAmpAssocCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    CsrUint16 lengthSoFar;
    CsrUint16 maxRemoteAmpAssocLength;
} HciReadLocalAmpAssocCmd;

#define send_hci_read_local_amp_assoc_cmd(context, pid, p1_Physical_Link_Handle, p2_Length_So_Far, p3_Max_Remote_AMP_ASSOC_Length) \
{ \
    HciReadLocalAmpAssocCmd *evt = (HciReadLocalAmpAssocCmd*) CsrPmalloc(sizeof(HciReadLocalAmpAssocCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->lengthSoFar = p2_Length_So_Far;\
    evt->maxRemoteAmpAssocLength = p3_Max_Remote_AMP_ASSOC_Length;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_READ_LOCAL_AMP_ASSOC_CODE);\
}

#define send_hci_read_local_amp_assoc_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Length_So_Far, p3_Max_Remote_AMP_ASSOC_Length) \
{ \
    HciReadLocalAmpAssocCmd *evt = (HciReadLocalAmpAssocCmd*) CsrPmalloc(sizeof(HciReadLocalAmpAssocCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->lengthSoFar = p2_Length_So_Far;\
    evt->maxRemoteAmpAssocLength = p3_Max_Remote_AMP_ASSOC_Length;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_READ_LOCAL_AMP_ASSOC_CODE);\
}

/* -------------------------- HCI_Write_Remote_AMP_ASSOC.Command -------------------------- */
typedef struct HciWriteRemoteAmpAssocCmd
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    CsrUint16 lengthSoFar;
    CsrUint16 remainingLength;
    AmpAssoc assocFragment;
} HciWriteRemoteAmpAssocCmd;

#define send_hci_write_remote_amp_assoc_cmd(context, pid, p1_Physical_Link_Handle, p2_Length_So_Far, p3_Remaining_Length, p4_Assoc_Fragment) \
{ \
    HciWriteRemoteAmpAssocCmd *evt = (HciWriteRemoteAmpAssocCmd*) CsrPmalloc(sizeof(HciWriteRemoteAmpAssocCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->lengthSoFar = p2_Length_So_Far;\
    evt->remainingLength = p3_Remaining_Length;\
    evt->assocFragment = p4_Assoc_Fragment;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_REMOTE_AMP_ASSOC_CODE);\
}

#define send_hci_write_remote_amp_assoc_cmd_external(context, pid, p1_Physical_Link_Handle, p2_Length_So_Far, p3_Remaining_Length, p4_Assoc_Fragment) \
{ \
    HciWriteRemoteAmpAssocCmd *evt = (HciWriteRemoteAmpAssocCmd*) CsrPmalloc(sizeof(HciWriteRemoteAmpAssocCmd));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->lengthSoFar = p2_Length_So_Far;\
    evt->remainingLength = p3_Remaining_Length;\
    evt->assocFragment = p4_Assoc_Fragment;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_REMOTE_AMP_ASSOC_CODE);\
}

/* -------------------------- HCI_Read_Loopback_Mode.Command -------------------------- */
typedef struct HciReadLoopbackModeCmd
{
    FsmEvent common;
} HciReadLoopbackModeCmd;

#define send_hci_read_loopback_mode_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_READ_LOOPBACK_MODE_CODE);\
}

#define send_hci_read_loopback_mode_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_READ_LOOPBACK_MODE_CODE);\
}

/* -------------------------- HCI_Write_Loopback_Mode.Command -------------------------- */
typedef struct HciWriteLoopbackModeCmd
{
    FsmEvent common;
    HciLoopbackMode loopbackMode;
} HciWriteLoopbackModeCmd;

#define send_hci_write_loopback_mode_cmd(context, pid, p1_Loopback_Mode) \
{ \
    HciWriteLoopbackModeCmd *evt = (HciWriteLoopbackModeCmd*) CsrPmalloc(sizeof(HciWriteLoopbackModeCmd));\
    evt->loopbackMode = p1_Loopback_Mode;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_WRITE_LOOPBACK_MODE_CODE);\
}

#define send_hci_write_loopback_mode_cmd_external(context, pid, p1_Loopback_Mode) \
{ \
    HciWriteLoopbackModeCmd *evt = (HciWriteLoopbackModeCmd*) CsrPmalloc(sizeof(HciWriteLoopbackModeCmd));\
    evt->loopbackMode = p1_Loopback_Mode;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_WRITE_LOOPBACK_MODE_CODE);\
}

/* -------------------------- HCI_Enable_AMP_Test_Mode.Command -------------------------- */
typedef struct HciEnableAmpTestModeCmd
{
    FsmEvent common;
    TestMode enable;
} HciEnableAmpTestModeCmd;

#define send_hci_enable_amp_test_mode_cmd(context, pid, p1_Enable) \
{ \
    HciEnableAmpTestModeCmd *evt = (HciEnableAmpTestModeCmd*) CsrPmalloc(sizeof(HciEnableAmpTestModeCmd));\
    evt->enable = p1_Enable;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_ENABLE_AMP_TEST_MODE_CODE);\
}

#define send_hci_enable_amp_test_mode_cmd_external(context, pid, p1_Enable) \
{ \
    HciEnableAmpTestModeCmd *evt = (HciEnableAmpTestModeCmd*) CsrPmalloc(sizeof(HciEnableAmpTestModeCmd));\
    evt->enable = p1_Enable;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_ENABLE_AMP_TEST_MODE_CODE);\
}

/* -------------------------- HCI_Set_AMP_Transmit_Power_Test.Command -------------------------- */
typedef struct HciSetAmpTransmitPowerTestCmd
{
    FsmEvent common;
    CsrUint8 powerLevel;
} HciSetAmpTransmitPowerTestCmd;

#define send_hci_set_amp_transmit_power_test_cmd(context, pid, p1_Power_Level) \
{ \
    HciSetAmpTransmitPowerTestCmd *evt = (HciSetAmpTransmitPowerTestCmd*) CsrPmalloc(sizeof(HciSetAmpTransmitPowerTestCmd));\
    evt->powerLevel = p1_Power_Level;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_SET_AMP_TRANSMIT_POWER_TEST_CODE);\
}

#define send_hci_set_amp_transmit_power_test_cmd_external(context, pid, p1_Power_Level) \
{ \
    HciSetAmpTransmitPowerTestCmd *evt = (HciSetAmpTransmitPowerTestCmd*) CsrPmalloc(sizeof(HciSetAmpTransmitPowerTestCmd));\
    evt->powerLevel = p1_Power_Level;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_SET_AMP_TRANSMIT_POWER_TEST_CODE);\
}

/* -------------------------- HCI_Enable_AMP_Receiver_Reports.Command -------------------------- */
typedef struct HciEnableAmpReceiverReportsCmd
{
    FsmEvent common;
    CsrUint8 enable;
    CsrUint8 interval;
} HciEnableAmpReceiverReportsCmd;

#define send_hci_enable_amp_receiver_reports_cmd(context, pid, p1_Enable, p2_Interval) \
{ \
    HciEnableAmpReceiverReportsCmd *evt = (HciEnableAmpReceiverReportsCmd*) CsrPmalloc(sizeof(HciEnableAmpReceiverReportsCmd));\
    evt->enable = p1_Enable;\
    evt->interval = p2_Interval;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_ENABLE_AMP_RECEIVER_REPORTS_CODE);\
}

#define send_hci_enable_amp_receiver_reports_cmd_external(context, pid, p1_Enable, p2_Interval) \
{ \
    HciEnableAmpReceiverReportsCmd *evt = (HciEnableAmpReceiverReportsCmd*) CsrPmalloc(sizeof(HciEnableAmpReceiverReportsCmd));\
    evt->enable = p1_Enable;\
    evt->interval = p2_Interval;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_ENABLE_AMP_RECEIVER_REPORTS_CODE);\
}

/* -------------------------- HCI_Transmitter_AMP_Test.Command -------------------------- */
typedef struct HciTransmitterAmpTestCmd
{
    FsmEvent common;
    CsrUint8 testScenario;
} HciTransmitterAmpTestCmd;

#define send_hci_transmitter_amp_test_cmd(context, pid, p1_Test_Scenario) \
{ \
    HciTransmitterAmpTestCmd *evt = (HciTransmitterAmpTestCmd*) CsrPmalloc(sizeof(HciTransmitterAmpTestCmd));\
    evt->testScenario = p1_Test_Scenario;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_TRANSMITTER_AMP_TEST_CODE);\
}

#define send_hci_transmitter_amp_test_cmd_external(context, pid, p1_Test_Scenario) \
{ \
    HciTransmitterAmpTestCmd *evt = (HciTransmitterAmpTestCmd*) CsrPmalloc(sizeof(HciTransmitterAmpTestCmd));\
    evt->testScenario = p1_Test_Scenario;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_TRANSMITTER_AMP_TEST_CODE);\
}

/* -------------------------- HCI_Receiver_AMP_Test.Command -------------------------- */
typedef struct HciReceiverAmpTestCmd
{
    FsmEvent common;
    CsrUint8 testScenario;
} HciReceiverAmpTestCmd;

#define send_hci_receiver_amp_test_cmd(context, pid, p1_Test_Scenario) \
{ \
    HciReceiverAmpTestCmd *evt = (HciReceiverAmpTestCmd*) CsrPmalloc(sizeof(HciReceiverAmpTestCmd));\
    evt->testScenario = p1_Test_Scenario;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_RECEIVER_AMP_TEST_CODE);\
}

#define send_hci_receiver_amp_test_cmd_external(context, pid, p1_Test_Scenario) \
{ \
    HciReceiverAmpTestCmd *evt = (HciReceiverAmpTestCmd*) CsrPmalloc(sizeof(HciReceiverAmpTestCmd));\
    evt->testScenario = p1_Test_Scenario;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_RECEIVER_AMP_TEST_CODE);\
}

/* -------------------------- HCI_AMP_Test_End.Command -------------------------- */
typedef struct HciAmpTestEndCmd
{
    FsmEvent common;
} HciAmpTestEndCmd;

#define send_hci_amp_test_end_cmd(context, pid) \
{ \
    fsm_send_event(context, NULL, pid, HCI_AMP_TEST_END_CODE);\
}

#define send_hci_amp_test_end_cmd_external(context, pid) \
{ \
    fsm_send_event_external(context, NULL, pid, HCI_AMP_TEST_END_CODE);\
}

/* -------------------------- HCI_Command_Complete.Event -------------------------- */
typedef struct HciCommandCompleteEvt
{
    FsmEvent common;
    CsrUint8 numHciCommandPackets;
    ReturnParameters returnParameters;
} HciCommandCompleteEvt;

#define send_hci_command_complete_evt(context, pid, p1_Num_HCI_Command_Packets, p2_Return_Parameters) \
{ \
    HciCommandCompleteEvt *evt = (HciCommandCompleteEvt*) CsrPmalloc(sizeof(HciCommandCompleteEvt));\
    evt->numHciCommandPackets = p1_Num_HCI_Command_Packets;\
    evt->returnParameters = p2_Return_Parameters;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_COMMAND_COMPLETE_CODE);\
}

#define send_hci_command_complete_evt_external(context, pid, p1_Num_HCI_Command_Packets, p2_Return_Parameters) \
{ \
    HciCommandCompleteEvt *evt = (HciCommandCompleteEvt*) CsrPmalloc(sizeof(HciCommandCompleteEvt));\
    evt->numHciCommandPackets = p1_Num_HCI_Command_Packets;\
    evt->returnParameters = p2_Return_Parameters;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_COMMAND_COMPLETE_CODE);\
}

/* -------------------------- HCI_Command_Status.Event -------------------------- */
typedef struct HciCommandStatusEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint8 numHciCommandPackets;
    HciOpcode commandOpcode;
} HciCommandStatusEvt;

#define send_hci_command_status_evt(context, pid, p1_Status, p2_Num_HCI_Command_Packets, p3_Command_Opcode) \
{ \
    HciCommandStatusEvt *evt = (HciCommandStatusEvt*) CsrPmalloc(sizeof(HciCommandStatusEvt));\
    evt->status = p1_Status;\
    evt->numHciCommandPackets = p2_Num_HCI_Command_Packets;\
    evt->commandOpcode = p3_Command_Opcode;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_COMMAND_STATUS_CODE);\
}

#define send_hci_command_status_evt_external(context, pid, p1_Status, p2_Num_HCI_Command_Packets, p3_Command_Opcode) \
{ \
    HciCommandStatusEvt *evt = (HciCommandStatusEvt*) CsrPmalloc(sizeof(HciCommandStatusEvt));\
    evt->status = p1_Status;\
    evt->numHciCommandPackets = p2_Num_HCI_Command_Packets;\
    evt->commandOpcode = p3_Command_Opcode;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_COMMAND_STATUS_CODE);\
}

/* -------------------------- HCI_Hardware_Error.Event -------------------------- */
typedef struct HciHardwareErrorEvt
{
    FsmEvent common;
    CsrUint8 hardwareCode;
} HciHardwareErrorEvt;

#define send_hci_hardware_error_evt(context, pid, p1_Hardware_Code) \
{ \
    HciHardwareErrorEvt *evt = (HciHardwareErrorEvt*) CsrPmalloc(sizeof(HciHardwareErrorEvt));\
    evt->hardwareCode = p1_Hardware_Code;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_HARDWARE_ERROR_CODE);\
}

#define send_hci_hardware_error_evt_external(context, pid, p1_Hardware_Code) \
{ \
    HciHardwareErrorEvt *evt = (HciHardwareErrorEvt*) CsrPmalloc(sizeof(HciHardwareErrorEvt));\
    evt->hardwareCode = p1_Hardware_Code;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_HARDWARE_ERROR_CODE);\
}

/* -------------------------- HCI_Flush_Occurred.Event -------------------------- */
typedef struct HciFlushOccurredEvt
{
    FsmEvent common;
    CsrUint16 handle;
} HciFlushOccurredEvt;

#define send_hci_flush_occurred_evt(context, pid, p1_Handle) \
{ \
    HciFlushOccurredEvt *evt = (HciFlushOccurredEvt*) CsrPmalloc(sizeof(HciFlushOccurredEvt));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_FLUSH_OCCURRED_CODE);\
}

#define send_hci_flush_occurred_evt_external(context, pid, p1_Handle) \
{ \
    HciFlushOccurredEvt *evt = (HciFlushOccurredEvt*) CsrPmalloc(sizeof(HciFlushOccurredEvt));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_FLUSH_OCCURRED_CODE);\
}

/* -------------------------- HCI_Loopback_Command.Event -------------------------- */
typedef struct HciLoopbackCommandEvt
{
    FsmEvent common;
    HciCommandPacket hciCommandPacket;
} HciLoopbackCommandEvt;

#define send_hci_loopback_command_evt(context, pid, p1_HCI_Command_Packet) \
{ \
    HciLoopbackCommandEvt *evt = (HciLoopbackCommandEvt*) CsrPmalloc(sizeof(HciLoopbackCommandEvt));\
    evt->hciCommandPacket = p1_HCI_Command_Packet;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_LOOPBACK_COMMAND_CODE);\
}

#define send_hci_loopback_command_evt_external(context, pid, p1_HCI_Command_Packet) \
{ \
    HciLoopbackCommandEvt *evt = (HciLoopbackCommandEvt*) CsrPmalloc(sizeof(HciLoopbackCommandEvt));\
    evt->hciCommandPacket = p1_HCI_Command_Packet;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_LOOPBACK_COMMAND_CODE);\
}

/* -------------------------- HCI_Data_Buffer_Overflow.Event -------------------------- */
typedef struct HciDataBufferOverflowEvt
{
    FsmEvent common;
    HciLinkType linkType;
} HciDataBufferOverflowEvt;

#define send_hci_data_buffer_overflow_evt(context, pid, p1_Link_Type) \
{ \
    HciDataBufferOverflowEvt *evt = (HciDataBufferOverflowEvt*) CsrPmalloc(sizeof(HciDataBufferOverflowEvt));\
    evt->linkType = p1_Link_Type;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_DATA_BUFFER_OVERFLOW_CODE);\
}

#define send_hci_data_buffer_overflow_evt_external(context, pid, p1_Link_Type) \
{ \
    HciDataBufferOverflowEvt *evt = (HciDataBufferOverflowEvt*) CsrPmalloc(sizeof(HciDataBufferOverflowEvt));\
    evt->linkType = p1_Link_Type;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_DATA_BUFFER_OVERFLOW_CODE);\
}

/* -------------------------- HCI_QoS_Violation.Event -------------------------- */
typedef struct HciQosViolationEvt
{
    FsmEvent common;
    CsrUint16 handle;
} HciQosViolationEvt;

#define send_hci_qos_violation_evt(context, pid, p1_Handle) \
{ \
    HciQosViolationEvt *evt = (HciQosViolationEvt*) CsrPmalloc(sizeof(HciQosViolationEvt));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_QOS_VIOLATION_CODE);\
}

#define send_hci_qos_violation_evt_external(context, pid, p1_Handle) \
{ \
    HciQosViolationEvt *evt = (HciQosViolationEvt*) CsrPmalloc(sizeof(HciQosViolationEvt));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_QOS_VIOLATION_CODE);\
}

/* -------------------------- HCI_Enhanced_Flush_Complete.Event -------------------------- */
typedef struct HciEnhancedFlushCompleteEvt
{
    FsmEvent common;
    CsrUint16 handle;
} HciEnhancedFlushCompleteEvt;

#define send_hci_enhanced_flush_complete_evt(context, pid, p1_Handle) \
{ \
    HciEnhancedFlushCompleteEvt *evt = (HciEnhancedFlushCompleteEvt*) CsrPmalloc(sizeof(HciEnhancedFlushCompleteEvt));\
    evt->handle = p1_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_ENHANCED_FLUSH_COMPLETE_CODE);\
}

#define send_hci_enhanced_flush_complete_evt_external(context, pid, p1_Handle) \
{ \
    HciEnhancedFlushCompleteEvt *evt = (HciEnhancedFlushCompleteEvt*) CsrPmalloc(sizeof(HciEnhancedFlushCompleteEvt));\
    evt->handle = p1_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_ENHANCED_FLUSH_COMPLETE_CODE);\
}

/* -------------------------- HCI_Physical_Link_Complete.Event -------------------------- */
typedef struct HciPhysicalLinkCompleteEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint8 physicalLinkHandle;
} HciPhysicalLinkCompleteEvt;

#define send_hci_physical_link_complete_evt(context, pid, p1_Status, p2_Physical_Link_Handle) \
{ \
    HciPhysicalLinkCompleteEvt *evt = (HciPhysicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciPhysicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->physicalLinkHandle = p2_Physical_Link_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_PHYSICAL_LINK_COMPLETE_CODE);\
}

#define send_hci_physical_link_complete_evt_external(context, pid, p1_Status, p2_Physical_Link_Handle) \
{ \
    HciPhysicalLinkCompleteEvt *evt = (HciPhysicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciPhysicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->physicalLinkHandle = p2_Physical_Link_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_PHYSICAL_LINK_COMPLETE_CODE);\
}

/* -------------------------- HCI_Channel_Select.Event -------------------------- */
typedef struct HciChannelSelectEvt
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
} HciChannelSelectEvt;

#define send_hci_channel_select_evt(context, pid, p1_Physical_Link_Handle) \
{ \
    HciChannelSelectEvt *evt = (HciChannelSelectEvt*) CsrPmalloc(sizeof(HciChannelSelectEvt));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_CHANNEL_SELECT_CODE);\
}

#define send_hci_channel_select_evt_external(context, pid, p1_Physical_Link_Handle) \
{ \
    HciChannelSelectEvt *evt = (HciChannelSelectEvt*) CsrPmalloc(sizeof(HciChannelSelectEvt));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_CHANNEL_SELECT_CODE);\
}

/* -------------------------- HCI_Disconnect_Physical_Link_Complete.Event -------------------------- */
typedef struct HciDisconnectPhysicalLinkCompleteEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint8 physicalLinkHandle;
    CsrUint8 reason;
} HciDisconnectPhysicalLinkCompleteEvt;

#define send_hci_disconnect_physical_link_complete_evt(context, pid, p1_Status, p2_Physical_Link_Handle, p3_Reason) \
{ \
    HciDisconnectPhysicalLinkCompleteEvt *evt = (HciDisconnectPhysicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciDisconnectPhysicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->physicalLinkHandle = p2_Physical_Link_Handle;\
    evt->reason = p3_Reason;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_PHYSICAL_LINK_COMPLETE_CODE);\
}

#define send_hci_disconnect_physical_link_complete_evt_external(context, pid, p1_Status, p2_Physical_Link_Handle, p3_Reason) \
{ \
    HciDisconnectPhysicalLinkCompleteEvt *evt = (HciDisconnectPhysicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciDisconnectPhysicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->physicalLinkHandle = p2_Physical_Link_Handle;\
    evt->reason = p3_Reason;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_PHYSICAL_LINK_COMPLETE_CODE);\
}

/* -------------------------- HCI_Physical_Link_Loss_Early_Warning.Event -------------------------- */
typedef struct HciPhysicalLinkLossEarlyWarningEvt
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
    LinkLossReasonCode linkLossReason;
} HciPhysicalLinkLossEarlyWarningEvt;

#define send_hci_physical_link_loss_early_warning_evt(context, pid, p1_Physical_Link_Handle, p2_Link_Loss_Reason) \
{ \
    HciPhysicalLinkLossEarlyWarningEvt *evt = (HciPhysicalLinkLossEarlyWarningEvt*) CsrPmalloc(sizeof(HciPhysicalLinkLossEarlyWarningEvt));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->linkLossReason = p2_Link_Loss_Reason;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_PHYSICAL_LINK_LOSS_EARLY_WARNING_CODE);\
}

#define send_hci_physical_link_loss_early_warning_evt_external(context, pid, p1_Physical_Link_Handle, p2_Link_Loss_Reason) \
{ \
    HciPhysicalLinkLossEarlyWarningEvt *evt = (HciPhysicalLinkLossEarlyWarningEvt*) CsrPmalloc(sizeof(HciPhysicalLinkLossEarlyWarningEvt));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    evt->linkLossReason = p2_Link_Loss_Reason;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_PHYSICAL_LINK_LOSS_EARLY_WARNING_CODE);\
}

/* -------------------------- HCI_Physical_Link_Recovery.Event -------------------------- */
typedef struct HciPhysicalLinkRecoveryEvt
{
    FsmEvent common;
    CsrUint8 physicalLinkHandle;
} HciPhysicalLinkRecoveryEvt;

#define send_hci_physical_link_recovery_evt(context, pid, p1_Physical_Link_Handle) \
{ \
    HciPhysicalLinkRecoveryEvt *evt = (HciPhysicalLinkRecoveryEvt*) CsrPmalloc(sizeof(HciPhysicalLinkRecoveryEvt));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_PHYSICAL_LINK_RECOVERY_CODE);\
}

#define send_hci_physical_link_recovery_evt_external(context, pid, p1_Physical_Link_Handle) \
{ \
    HciPhysicalLinkRecoveryEvt *evt = (HciPhysicalLinkRecoveryEvt*) CsrPmalloc(sizeof(HciPhysicalLinkRecoveryEvt));\
    evt->physicalLinkHandle = p1_Physical_Link_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_PHYSICAL_LINK_RECOVERY_CODE);\
}

/* -------------------------- HCI_Logical_Link_Complete.Event -------------------------- */
typedef struct HciLogicalLinkCompleteEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint16 logicalLinkHandle;
    CsrUint8 physicalLinkHandle;
    CsrUint8 txFlowSpecId;
} HciLogicalLinkCompleteEvt;

#define send_hci_logical_link_complete_evt(context, pid, p1_Status, p2_Logical_Link_Handle, p3_Physical_Link_Handle, p4_TX_Flow_Spec_ID) \
{ \
    HciLogicalLinkCompleteEvt *evt = (HciLogicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciLogicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->logicalLinkHandle = p2_Logical_Link_Handle;\
    evt->physicalLinkHandle = p3_Physical_Link_Handle;\
    evt->txFlowSpecId = p4_TX_Flow_Spec_ID;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_LOGICAL_LINK_COMPLETE_CODE);\
}

#define send_hci_logical_link_complete_evt_external(context, pid, p1_Status, p2_Logical_Link_Handle, p3_Physical_Link_Handle, p4_TX_Flow_Spec_ID) \
{ \
    HciLogicalLinkCompleteEvt *evt = (HciLogicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciLogicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->logicalLinkHandle = p2_Logical_Link_Handle;\
    evt->physicalLinkHandle = p3_Physical_Link_Handle;\
    evt->txFlowSpecId = p4_TX_Flow_Spec_ID;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_LOGICAL_LINK_COMPLETE_CODE);\
}

/* -------------------------- HCI_Disconnect_Logical_Link_Complete.Event -------------------------- */
typedef struct HciDisconnectLogicalLinkCompleteEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint16 logicalLinkHandle;
    CsrUint8 reason;
} HciDisconnectLogicalLinkCompleteEvt;

#define send_hci_disconnect_logical_link_complete_evt(context, pid, p1_Status, p2_Logical_Link_Handle, p3_Reason) \
{ \
    HciDisconnectLogicalLinkCompleteEvt *evt = (HciDisconnectLogicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciDisconnectLogicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->logicalLinkHandle = p2_Logical_Link_Handle;\
    evt->reason = p3_Reason;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_LOGICAL_LINK_COMPLETE_CODE);\
}

#define send_hci_disconnect_logical_link_complete_evt_external(context, pid, p1_Status, p2_Logical_Link_Handle, p3_Reason) \
{ \
    HciDisconnectLogicalLinkCompleteEvt *evt = (HciDisconnectLogicalLinkCompleteEvt*) CsrPmalloc(sizeof(HciDisconnectLogicalLinkCompleteEvt));\
    evt->status = p1_Status;\
    evt->logicalLinkHandle = p2_Logical_Link_Handle;\
    evt->reason = p3_Reason;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_DISCONNECT_LOGICAL_LINK_COMPLETE_CODE);\
}

/* -------------------------- HCI_Flow_Spec_Modify_Complete.Event -------------------------- */
typedef struct HciFlowSpecModifyCompleteEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint16 handle;
} HciFlowSpecModifyCompleteEvt;

#define send_hci_flow_spec_modify_complete_evt(context, pid, p1_Status, p2_Handle) \
{ \
    HciFlowSpecModifyCompleteEvt *evt = (HciFlowSpecModifyCompleteEvt*) CsrPmalloc(sizeof(HciFlowSpecModifyCompleteEvt));\
    evt->status = p1_Status;\
    evt->handle = p2_Handle;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_FLOW_SPEC_MODIFY_COMPLETE_CODE);\
}

#define send_hci_flow_spec_modify_complete_evt_external(context, pid, p1_Status, p2_Handle) \
{ \
    HciFlowSpecModifyCompleteEvt *evt = (HciFlowSpecModifyCompleteEvt*) CsrPmalloc(sizeof(HciFlowSpecModifyCompleteEvt));\
    evt->status = p1_Status;\
    evt->handle = p2_Handle;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_FLOW_SPEC_MODIFY_COMPLETE_CODE);\
}

/* -------------------------- HCI_Number_Of_Completed_Data_Blocks.Event -------------------------- */
typedef struct HciNumberOfCompletedDataBlocksEvt
{
    FsmEvent common;
    CsrUint16 totalNumDataBlocks;
    CsrUint8 numberOfHandles;
    CsrUint16 handle;
    CsrUint16 numberOfCompletedPackets;
    CsrUint16 numberOfCompletedBlocks;
} HciNumberOfCompletedDataBlocksEvt;

#define send_hci_number_of_completed_data_blocks_evt(context, pid, p1_Total_Num_Data_Blocks, p2_Number_Of_Handles, p3_Handle, p4_Number_Of_Completed_Packets, p5_Number_Of_Completed_Blocks) \
{ \
    HciNumberOfCompletedDataBlocksEvt *evt = (HciNumberOfCompletedDataBlocksEvt*) CsrPmalloc(sizeof(HciNumberOfCompletedDataBlocksEvt));\
    evt->totalNumDataBlocks = p1_Total_Num_Data_Blocks;\
    evt->numberOfHandles = p2_Number_Of_Handles;\
    evt->handle = p3_Handle;\
    evt->numberOfCompletedPackets = p4_Number_Of_Completed_Packets;\
    evt->numberOfCompletedBlocks = p5_Number_Of_Completed_Blocks;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_NUMBER_OF_COMPLETED_DATA_BLOCKS_CODE);\
}

#define send_hci_number_of_completed_data_blocks_evt_external(context, pid, p1_Total_Num_Data_Blocks, p2_Number_Of_Handles, p3_Handle, p4_Number_Of_Completed_Packets, p5_Number_Of_Completed_Blocks) \
{ \
    HciNumberOfCompletedDataBlocksEvt *evt = (HciNumberOfCompletedDataBlocksEvt*) CsrPmalloc(sizeof(HciNumberOfCompletedDataBlocksEvt));\
    evt->totalNumDataBlocks = p1_Total_Num_Data_Blocks;\
    evt->numberOfHandles = p2_Number_Of_Handles;\
    evt->handle = p3_Handle;\
    evt->numberOfCompletedPackets = p4_Number_Of_Completed_Packets;\
    evt->numberOfCompletedBlocks = p5_Number_Of_Completed_Blocks;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_NUMBER_OF_COMPLETED_DATA_BLOCKS_CODE);\
}

/* -------------------------- HCI_Short_Range_Mode_Change_Complete.Event -------------------------- */
typedef struct HciShortRangeModeChangeCompleteEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint8 physicalLinkHandle;
    ShortRangeMode shortRangeModeState;
} HciShortRangeModeChangeCompleteEvt;

#define send_hci_short_range_mode_change_complete_evt(context, pid, p1_Status, p2_Physical_Link_Handle, p3_Short_Range_Mode_State) \
{ \
    HciShortRangeModeChangeCompleteEvt *evt = (HciShortRangeModeChangeCompleteEvt*) CsrPmalloc(sizeof(HciShortRangeModeChangeCompleteEvt));\
    evt->status = p1_Status;\
    evt->physicalLinkHandle = p2_Physical_Link_Handle;\
    evt->shortRangeModeState = p3_Short_Range_Mode_State;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_SHORT_RANGE_MODE_CHANGE_COMPLETE_CODE);\
}

#define send_hci_short_range_mode_change_complete_evt_external(context, pid, p1_Status, p2_Physical_Link_Handle, p3_Short_Range_Mode_State) \
{ \
    HciShortRangeModeChangeCompleteEvt *evt = (HciShortRangeModeChangeCompleteEvt*) CsrPmalloc(sizeof(HciShortRangeModeChangeCompleteEvt));\
    evt->status = p1_Status;\
    evt->physicalLinkHandle = p2_Physical_Link_Handle;\
    evt->shortRangeModeState = p3_Short_Range_Mode_State;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_SHORT_RANGE_MODE_CHANGE_COMPLETE_CODE);\
}

/* -------------------------- HCI_AMP_Status_Change.Event -------------------------- */
typedef struct HciAmpStatusChangeEvt
{
    FsmEvent common;
    HciStatusCode status;
    AmpStatus ampStatus;
} HciAmpStatusChangeEvt;

#define send_hci_amp_status_change_evt(context, pid, p1_Status, p2_AMP_Status) \
{ \
    HciAmpStatusChangeEvt *evt = (HciAmpStatusChangeEvt*) CsrPmalloc(sizeof(HciAmpStatusChangeEvt));\
    evt->status = p1_Status;\
    evt->ampStatus = p2_AMP_Status;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_AMP_STATUS_CHANGE_CODE);\
}

#define send_hci_amp_status_change_evt_external(context, pid, p1_Status, p2_AMP_Status) \
{ \
    HciAmpStatusChangeEvt *evt = (HciAmpStatusChangeEvt*) CsrPmalloc(sizeof(HciAmpStatusChangeEvt));\
    evt->status = p1_Status;\
    evt->ampStatus = p2_AMP_Status;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_AMP_STATUS_CHANGE_CODE);\
}

/* -------------------------- HCI_Generic_AMP_Link_Key.Notification -------------------------- */
typedef struct HciGenericAmpLinkKeyNt
{
    FsmEvent common;
    BdAddr bdAddr;
    GenericAmpLinkKey genericAmpLinkKey;
    LinkKeyType keyType;
} HciGenericAmpLinkKeyNt;

#define send_hci_generic_amp_link_key_nt(context, pid, p1_BD_ADDR, p2_Generic_AMP_Link_Key, p3_Key_Type) \
{ \
    HciGenericAmpLinkKeyNt *evt = (HciGenericAmpLinkKeyNt*) CsrPmalloc(sizeof(HciGenericAmpLinkKeyNt));\
    evt->bdAddr = p1_BD_ADDR;\
    evt->genericAmpLinkKey = p2_Generic_AMP_Link_Key;\
    evt->keyType = p3_Key_Type;\
    fsm_send_event(context, (FsmEvent*)evt, pid, HCI_GENERIC_AMP_LINK_KEY_CODE);\
}

#define send_hci_generic_amp_link_key_nt_external(context, pid, p1_BD_ADDR, p2_Generic_AMP_Link_Key, p3_Key_Type) \
{ \
    HciGenericAmpLinkKeyNt *evt = (HciGenericAmpLinkKeyNt*) CsrPmalloc(sizeof(HciGenericAmpLinkKeyNt));\
    evt->bdAddr = p1_BD_ADDR;\
    evt->genericAmpLinkKey = p2_Generic_AMP_Link_Key;\
    evt->keyType = p3_Key_Type;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, HCI_GENERIC_AMP_LINK_KEY_CODE);\
}

/* -------------------------- AMP_Transmit_Power.Event -------------------------- */
typedef struct AmpTransmitPowerEvt
{
    FsmEvent common;
    HciStatusCode status;
    PowerLevel powerLevel;
} AmpTransmitPowerEvt;

#define send_amp_transmit_power_evt(context, pid, p1_Status, p2_Power_Level) \
{ \
    AmpTransmitPowerEvt *evt = (AmpTransmitPowerEvt*) CsrPmalloc(sizeof(AmpTransmitPowerEvt));\
    evt->status = p1_Status;\
    evt->powerLevel = p2_Power_Level;\
    fsm_send_event(context, (FsmEvent*)evt, pid, AMP_TRANSMIT_POWER_CODE);\
}

#define send_amp_transmit_power_evt_external(context, pid, p1_Status, p2_Power_Level) \
{ \
    AmpTransmitPowerEvt *evt = (AmpTransmitPowerEvt*) CsrPmalloc(sizeof(AmpTransmitPowerEvt));\
    evt->status = p1_Status;\
    evt->powerLevel = p2_Power_Level;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, AMP_TRANSMIT_POWER_CODE);\
}

/* -------------------------- AMP_Receiver_Report.Event -------------------------- */
typedef struct AmpReceiverReportEvt
{
    FsmEvent common;
    CsrUint8 ampReport;
} AmpReceiverReportEvt;

#define send_amp_receiver_report_evt(context, pid, p1_AMP_REPORT) \
{ \
    AmpReceiverReportEvt *evt = (AmpReceiverReportEvt*) CsrPmalloc(sizeof(AmpReceiverReportEvt));\
    evt->ampReport = p1_AMP_REPORT;\
    fsm_send_event(context, (FsmEvent*)evt, pid, AMP_RECEIVER_REPORT_CODE);\
}

#define send_amp_receiver_report_evt_external(context, pid, p1_AMP_REPORT) \
{ \
    AmpReceiverReportEvt *evt = (AmpReceiverReportEvt*) CsrPmalloc(sizeof(AmpReceiverReportEvt));\
    evt->ampReport = p1_AMP_REPORT;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, AMP_RECEIVER_REPORT_CODE);\
}

/* -------------------------- AMP_Start_Transmitter_Test.Event -------------------------- */
typedef struct AmpStartTransmitterTestEvt
{
    FsmEvent common;
    HciStatusCode status;
    CsrUint8 powerLevel;
} AmpStartTransmitterTestEvt;

#define send_amp_start_transmitter_test_evt(context, pid, p1_Status, p2_Power_Level) \
{ \
    AmpStartTransmitterTestEvt *evt = (AmpStartTransmitterTestEvt*) CsrPmalloc(sizeof(AmpStartTransmitterTestEvt));\
    evt->status = p1_Status;\
    evt->powerLevel = p2_Power_Level;\
    fsm_send_event(context, (FsmEvent*)evt, pid, AMP_START_TRANSMITTER_TEST_CODE);\
}

#define send_amp_start_transmitter_test_evt_external(context, pid, p1_Status, p2_Power_Level) \
{ \
    AmpStartTransmitterTestEvt *evt = (AmpStartTransmitterTestEvt*) CsrPmalloc(sizeof(AmpStartTransmitterTestEvt));\
    evt->status = p1_Status;\
    evt->powerLevel = p2_Power_Level;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, AMP_START_TRANSMITTER_TEST_CODE);\
}

/* -------------------------- AMP_Start_Receiver_Test.Event -------------------------- */
typedef struct AmpStartReceiverTestEvt
{
    FsmEvent common;
    HciStatusCode status;
} AmpStartReceiverTestEvt;

#define send_amp_start_receiver_test_evt(context, pid, p1_Status) \
{ \
    AmpStartReceiverTestEvt *evt = (AmpStartReceiverTestEvt*) CsrPmalloc(sizeof(AmpStartReceiverTestEvt));\
    evt->status = p1_Status;\
    fsm_send_event(context, (FsmEvent*)evt, pid, AMP_START_RECEIVER_TEST_CODE);\
}

#define send_amp_start_receiver_test_evt_external(context, pid, p1_Status) \
{ \
    AmpStartReceiverTestEvt *evt = (AmpStartReceiverTestEvt*) CsrPmalloc(sizeof(AmpStartReceiverTestEvt));\
    evt->status = p1_Status;\
    fsm_send_event_external(context, (FsmEvent*)evt, pid, AMP_START_RECEIVER_TEST_CODE);\
}


#endif /* PAL_HCI_SIGNALS_H */

#ifdef __cplusplus
}
#endif
