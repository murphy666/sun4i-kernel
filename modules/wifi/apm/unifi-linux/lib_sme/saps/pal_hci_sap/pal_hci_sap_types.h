/***************************************************************************
 *
 * This is an AUTOGENERATED file from genio_types_gen.pl
 *
 *    CONFIDENTIAL
 *    Copyright (C) Cambridge Silicon Radio Ltd 2007. All rights reserved.
 */

/***************************************************************************
 * Description:
 *       Basic type definition for PAL_HCI interface
 *
 * Options used to generate this file:
 * perl genio_types_gen.pl
 *       -o /home/bfsw/host/releases/unifi_hostsoftware_212/build/unifi-driver-212/host/lib_sme/sme/../saps/pal_hci_sap/pal_hci_sap_types.h
 *       -x /home/bfsw/host/releases/unifi_hostsoftware_212/build/unifi-driver-212/host/lib_sme/../common/amp_hci/bt_amp_hci.xml
 * 
 ***************************************************************************/

#ifndef BT_AMP_HCI_XML_TYPES_H
#define BT_AMP_HCI_XML_TYPES_H

#ifdef __cplusplus
extern "C" {
#endif

/* STANDARD INCLUDES ********************************************************/

/* ENUM DEFINITIONS ********************************************************/
typedef CsrUint8 AmpControllerType;
#define AMP_CONTROLLER_TYPE_BR_EDR                                                      0x00
#define AMP_CONTROLLER_TYPE_802_11                                                      0x01
#define AMP_CONTROLLER_TYPE_ECMA_368                                                    0x02
#define AMP_CONTROLLER_TYPE_FAKE                                                        0xFE
#define AMP_CONTROLLER_TYPE_INVALID                                                     0xFF

typedef CsrUint8 AmpStatus;
#define AMP_STATUS_AVAILABLE_BUT_PHYSICALLY_POWERED_DOWN                                0x00
#define AMP_STATUS_ONLY_USED_BY_BLUETOOTH_TECHNOLOGY                                    0x01
#define AMP_STATUS_NO_CAPACITY_AVAILABLE_FOR_BLUETOOTH_OPERATION                        0x02
#define AMP_STATUS_LOW_CAPACITY_AVAILABLE_FOR_BLUETOOTH_OPERATION                       0x03
#define AMP_STATUS_MEDIUM_CAPACITY_AVAILABLE_FOR_BLUETOOTH_OPERATION                    0x04
#define AMP_STATUS_HIGH_CAPACITY_AVAILABLE_FOR_BLUETOOTH_OPERATION                      0x05
#define AMP_STATUS_FULL_CAPACITY_AVAILABLE_FOR_BLUETOOTH_OPERATION                      0x06

typedef CsrUint16 HciCommandGroup;
#define HCI_COMMAND_GROUP_OPCODE_MASK                                                   0x03ff
#define HCI_COMMAND_GROUP_LINK                                                          0x0400
#define HCI_COMMAND_GROUP_POLICY                                                        0x0800
#define HCI_COMMAND_GROUP_HOST_BB                                                       0x0c00
#define HCI_COMMAND_GROUP_INFO                                                          0x1000
#define HCI_COMMAND_GROUP_STATUS                                                        0x1400
#define HCI_COMMAND_GROUP_TEST                                                          0x1800
#define HCI_COMMAND_GROUP_MAX_OGF                                                       0x1c00
#define HCI_COMMAND_GROUP_OPCODE_GROUP_MASK                                             0xfc00
#define HCI_COMMAND_GROUP_MANUFACTURER_EXTENSION                                        0xfc00

typedef CsrUint8 HciEncryptionEnable;
#define HCI_ENCRYPTION_ENABLE_LINK_LEVEL_ENCRYPTION_OFF                                 0x00
#define HCI_ENCRYPTION_ENABLE_LINK_LEVEL_ENCRYPTION_ON                                  0x01

typedef CsrUint8 HciEventCode;

typedef CsrUint8 HciLinkType;
#define HCI_LINK_TYPE_SYNCHRONOUS_BUFFER                                                0x00
#define HCI_LINK_TYPE_ACL_BUFFER                                                        0x01

typedef CsrUint8 HciLoopbackMode;
#define HCI_LOOPBACK_MODE_NO_LOOPBACK                                                   0x00
#define HCI_LOOPBACK_MODE_LOCAL_LOOPBACK                                                0x01
#define HCI_LOOPBACK_MODE_REMOTE_LOOPBACK                                               0x02

typedef CsrUint16 HciOpcode;

typedef CsrUint8 HciServiceType;
#define HCI_SERVICE_TYPE_NO_TRAFFIC                                                     0x00
#define HCI_SERVICE_TYPE_BEST_EFFORT                                                    0x01
#define HCI_SERVICE_TYPE_GUARANTEED                                                     0x02

typedef CsrUint8 HciStatusCode;
#define HCI_STATUS_CODE_SUCCESS                                                         0x00
#define HCI_STATUS_CODE_UNKNOWN_HCI_COMMAND                                             0x01
#define HCI_STATUS_CODE_UNKNOWN_CONNECTION_IDENTIFIER                                   0x02
#define HCI_STATUS_CODE_HARDWARE_FAILURE                                                0x03
#define HCI_STATUS_CODE_PAGE_TIMEOUT                                                    0x04
#define HCI_STATUS_CODE_AUTHENTICATION_FAILURE                                          0x05
#define HCI_STATUS_CODE_PIN_OR_KEY_MISSING                                              0x06
#define HCI_STATUS_CODE_MEMORY_CAPACITY_EXCEEDED                                        0x07
#define HCI_STATUS_CODE_CONNECTION_TIMEOUT                                              0x08
#define HCI_STATUS_CODE_CONNECTION_LIMIT_EXCEEDED                                       0x09
#define HCI_STATUS_CODE_SYNCHRONOUS_CONNECTION_LIMIT_TO_A_DEVICE_EXCEEDED               0x0a
#define HCI_STATUS_CODE_ACL_CONNECTION_ALREADY_EXISTS                                   0x0b
#define HCI_STATUS_CODE_COMMAND_DISALLOWED                                              0x0c
#define HCI_STATUS_CODE_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOURCES                    0x0d
#define HCI_STATUS_CODE_CONNECTION_REJECTED_DUE_TO_SECURITY_REASONS                     0x0e
#define HCI_STATUS_CODE_CONNECTION_REJECTED_DUE_TO_UNACCEPTABLE_BD_ADDR                 0x0f
#define HCI_STATUS_CODE_CONNECTION_ACCEPT_TIMEOUT_EXCEEDED                              0x10
#define HCI_STATUS_CODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE                          0x11
#define HCI_STATUS_CODE_INVALID_HCI_COMMAND_PARAMETERS                                  0x12
#define HCI_STATUS_CODE_REMOTE_USER_TERMINATED_CONNECTION                               0x13
#define HCI_STATUS_CODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_LOW_RESOURCES        0x14
#define HCI_STATUS_CODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_POWER_OFF            0x15
#define HCI_STATUS_CODE_CONNECTION_TERMINATED_BY_LOCAL_HOST                             0x16
#define HCI_STATUS_CODE_REPEATED_ATTEMPTS                                               0x17
#define HCI_STATUS_CODE_PAIRING_NOT_ALLOWED                                             0x18
#define HCI_STATUS_CODE_UNKNOWN_LMP_PDU                                                 0x19
#define HCI_STATUS_CODE_UNSUPPORTED_REMOTE_OR_LMP_FEATURE                               0x1a
#define HCI_STATUS_CODE_SCO_OFFSET_REJECTED                                             0x1b
#define HCI_STATUS_CODE_SCO_INTERVAL_REJECTED                                           0x1c
#define HCI_STATUS_CODE_SCO_AIR_MODE_REJECTED                                           0x1d
#define HCI_STATUS_CODE_INVALID_LMP_PARAMETERS                                          0x1e
#define HCI_STATUS_CODE_UNSPECIFIED_ERROR                                               0x1f
#define HCI_STATUS_CODE_UNSUPPORTED_LMP_PARAMETER_VALUE                                 0x20
#define HCI_STATUS_CODE_ROLE_CHANGE_NOT_ALLOWED                                         0x21
#define HCI_STATUS_CODE_LMP_RESPONSE_TIMEOUT                                            0x22
#define HCI_STATUS_CODE_LMP_ERROR_TRANSACTION_COLLISION                                 0x23
#define HCI_STATUS_CODE_LMP_PDU_NOT_ALLOWED                                             0x24
#define HCI_STATUS_CODE_ENCRYPTION_MODE_NOT_ACCEPTABLE                                  0x25
#define HCI_STATUS_CODE_LINK_KEY_CAN_NOT_BE_CHANGED                                     0x26
#define HCI_STATUS_CODE_REQUESTED_QOS_NOT_SUPPORTED                                     0x27
#define HCI_STATUS_CODE_INSTANT_PASSED                                                  0x28
#define HCI_STATUS_CODE_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED                             0x29
#define HCI_STATUS_CODE_DIFFERENT_TRANSACTION_COLLISION                                 0x2a
#define HCI_STATUS_CODE_QOS_UNACCEPTABLE_PARAMETER                                      0x2c
#define HCI_STATUS_CODE_QOS_REJECTED                                                    0x2d
#define HCI_STATUS_CODE_CHANNEL_CLASSIFICATION_NOT_SUPPORTED                            0x2e
#define HCI_STATUS_CODE_INSUFFICIENT_SECURITY                                           0x2f
#define HCI_STATUS_CODE_PARAMETER_OUT_OF_MANDATORY_RANGE                                0x30
#define HCI_STATUS_CODE_ROLE_SWITCH_PENDING                                             0x32
#define HCI_STATUS_CODE_RESERVED_SLOT_VIOLATION                                         0x34
#define HCI_STATUS_CODE_ROLE_SWITCH_FAILED                                              0x35
#define HCI_STATUS_CODE_EXTENDED_INQUIRY_RESPONSE_TOO_LARGE                             0x36
#define HCI_STATUS_CODE_SECURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST                     0x37
#define HCI_STATUS_CODE_HOST_BUSY_PAIRING                                               0x38
#define HCI_STATUS_CODE_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND            0x39
#define HCI_STATUS_CODE_PHYSICAL_LINK_ALREADY_EXISTS                                    0xa1

typedef CsrUint16 LinkAcceptTimeout;
#define LINK_ACCEPT_TIMEOUT_RANGE_MIN                                                   0x0001
#define LINK_ACCEPT_TIMEOUT_MANDATORY_RANGE_MIN                                         0x00A0
#define LINK_ACCEPT_TIMEOUT_UNIT_IN_MICROS                                              0x0271
#define LINK_ACCEPT_TIMEOUT_RANGE_MAX                                                   0xB540

typedef CsrUint8 LinkKeyType;
#define LINK_KEY_TYPE_RESERVED_00                                                       0x00
#define LINK_KEY_TYPE_RESERVED_01                                                       0x01
#define LINK_KEY_TYPE_RESERVED_02                                                       0x02
#define LINK_KEY_TYPE_DEBUG_COMBINATION_KEY                                             0x03
#define LINK_KEY_TYPE_UNAUTHENTICATED_COMBINATION_KEY                                   0x04
#define LINK_KEY_TYPE_AUTHENTICATED_COMBINATION_KEY                                     0x05
#define LINK_KEY_TYPE_RESERVED_06                                                       0x06

typedef CsrUint8 LinkLossReasonCode;
#define LINK_LOSS_REASON_CODE_UNKNOWN                                                   0x00
#define LINK_LOSS_REASON_CODE_RANGE_RELATED                                             0x01
#define LINK_LOSS_REASON_CODE_BANDWIDTH_RELATED                                         0x03
#define LINK_LOSS_REASON_CODE_RESOLVING_CONFLICT                                        0x04
#define LINK_LOSS_REASON_CODE_INTERFERENCE                                              0x05

typedef CsrUint16 LinkSupervisionTimeout;
#define LINK_SUPERVISION_TIMEOUT_RANGE_MIN                                              0x0001
#define LINK_SUPERVISION_TIMEOUT_MANDATORY_RANGE_MIN                                    0x0190
#define LINK_SUPERVISION_TIMEOUT_UNIT_IN_MICROS                                         0x0271
#define LINK_SUPERVISION_TIMEOUT_RANGE_MAX                                              0xFFFF
#define LINK_SUPERVISION_TIMEOUT_DEFAULT_AMP_TIMEOUT_IN_MILLIS                          10000

typedef CsrUint8 LocationDomainAware;
#define LOCATION_DOMAIN_AWARE_REGULATORY_DOMAIN_UNKNOWN                                 0x00
#define LOCATION_DOMAIN_AWARE_REGULATORY_DOMAIN_KNOWN                                   0x01

typedef CsrUint8 LocationDomainOptions;
#define LOCATION_DOMAIN_OPTIONS_SPACE                                                   0x20
#define LOCATION_DOMAIN_OPTIONS_LETTER_I                                                0x49
#define LOCATION_DOMAIN_OPTIONS_LETTER_O                                                0x4F
#define LOCATION_DOMAIN_OPTIONS_LETTER_X                                                0x58

typedef CsrUint8 LocationOptions;
#define LOCATION_OPTIONS_NOT_MAINS_POWERED                                              0x00
#define LOCATION_OPTIONS_MAINS_POWERED                                                  0x01

typedef CsrUint8 PacketType;
#define PACKET_TYPE_AUTOMATICALLY_FLUSHABLE_ONLY                                        0x00

typedef CsrUint8 PowerLevel;
#define POWER_LEVEL_MINIMUM_POWER                                                       0x00
#define POWER_LEVEL_INCREMENT_POWER                                                     0x01
#define POWER_LEVEL_DECREMENT_POWER                                                     0x02
#define POWER_LEVEL_MAXIMUM_POWER                                                       0x03
#define POWER_LEVEL_RESERVED                                                            0x04

typedef CsrUint8 ShortRangeMode;
#define SHORT_RANGE_MODE_DISABLED                                                       0x00
#define SHORT_RANGE_MODE_ENABLED                                                        0x01

typedef CsrUint8 TestMode;
#define TEST_MODE_DISABLE_AMP_TEST_MODE                                                 0x00
#define TEST_MODE_ENABLE_AMP_TEST_MODE                                                  0x01
#define TEST_MODE_RESERVED                                                              0x02


/* CONST TYPES DEFINITIONS ********************************************************/
#define AMP_HCI_REVISION                        0x0001
#define AMP_HCI_MANUFACTURER_NAME               0x000A
#define AMP_PAL_VERSION                         0x01
#define AMP_HCI_VERSION                         0x05
#define CONNECTION_ACCEPT_TIMEOUT_DEFAULT       0x1FA0
#define LINK_SUPERVISION_TIMEOUT_AMP_DEFAULT    0x3E80
#define LINK_SUPERVISION_TIMEOUT_BR_EDR_DEFAULT 0x7D00
#define MAX_BT_LINK_KEY_LENGTH                  32
#define AMP_HCI_SAP_API_VERSION_MINOR           0
#define AMP_HCI_SAP_API_VERSION_MAJOR           1


/* POINTER TYPES DEFINITIONS ********************************************************/

/* SIMPLE TYPES DEFINITIONS ********************************************************/
typedef struct HciLap
{
    CsrUint8 data[3];
} HciLap;

typedef CsrUint8 HciNoOperationReturn;


/* COMPLEX TYPES DEFINITIONS ********************************************************/
typedef struct EventMask
{
   CsrUint8 m[8];
}EventMask;

typedef struct EventMaskPage2
{
   CsrUint8 m[8];
}EventMaskPage2;

typedef struct GenericAmpLinkKey
{
   CsrUint8 k[32];
}GenericAmpLinkKey;

typedef struct HciCommandPacket
{
   CsrUint16 dataLen;
   CsrUint8 *data;
}HciCommandPacket;

typedef struct HciWriteLinkSupervisionTimeoutReturn
{
   HciStatusCode status;
   CsrUint16 handle;
}HciWriteLinkSupervisionTimeoutReturn;

typedef struct HciWriteRemoteAmpAssocReturn
{
   HciStatusCode status;
   CsrUint8 physicalLinkHandle;
}HciWriteRemoteAmpAssocReturn;

typedef struct SupportedCommands
{
   CsrUint8 m[64];
}SupportedCommands;

typedef struct AmpAssoc
{
   CsrUint16 dataLen;
   CsrUint8 *data;
}AmpAssoc;

typedef struct AmpFlowSpec
{
   CsrUint8 id;
   HciServiceType serviceType;
   CsrUint16 maximumSduSize;
   CsrUint32 sduInterArrivalTime;
   CsrUint32 accessLatency;
   CsrUint32 flushTimeout;
}AmpFlowSpec;

typedef struct BdAddr
{
   CsrUint8 a[6];
}BdAddr;

typedef struct HciFlushReturn
{
   HciStatusCode status;
   CsrUint16 handle;
}HciFlushReturn;

typedef struct HciLogicalLinkCancelReturn
{
   HciStatusCode status;
   CsrUint8 physicalLinkHandle;
   CsrUint8 txFlowSpecId;
}HciLogicalLinkCancelReturn;

typedef struct HciReadBestEffortFlushTimeoutReturn
{
   HciStatusCode status;
   CsrUint32 bestEffortFlushTimeout;
}HciReadBestEffortFlushTimeoutReturn;

typedef struct HciReadConnectionAcceptTimeoutReturn
{
   HciStatusCode status;
   CsrUint16 connAcceptTimeout;
}HciReadConnectionAcceptTimeoutReturn;

typedef struct HciReadDataBlockSizeReturn
{
   HciStatusCode status;
   CsrUint16 maxAclDataPacketLength;
   CsrUint16 dataBlockLength;
   CsrUint16 totalNumberOfBlocks;
}HciReadDataBlockSizeReturn;

typedef struct HciReadFailedContactCounterReturn
{
   HciStatusCode status;
   CsrUint16 handle;
   CsrUint16 failedContactCounter;
}HciReadFailedContactCounterReturn;

typedef struct HciReadLinkQualityReturn
{
   HciStatusCode status;
   CsrUint16 handle;
   CsrUint8 linkQuality;
}HciReadLinkQualityReturn;

typedef struct HciReadLinkSupervisionTimeoutReturn
{
   HciStatusCode status;
   CsrUint16 handle;
   CsrUint16 linkSupervisionTimeout;
}HciReadLinkSupervisionTimeoutReturn;

typedef struct HciReadLocalAmpAssocReturn
{
   HciStatusCode status;
   CsrUint8 physicalLinkHandle;
   CsrUint16 remainingLength;
   AmpAssoc assocFragment;
}HciReadLocalAmpAssocReturn;

typedef struct HciReadLocalAmpInfoReturn
{
   HciStatusCode status;
   AmpStatus ampStatus;
   CsrUint32 totalBandwidth;
   CsrUint32 maxGuaranteedBandwidth;
   CsrUint32 minLatency;
   CsrUint32 maxPduSize;
   AmpControllerType controllerType;
   CsrUint16 palCapabilities;
   CsrUint16 ampAssocLength;
   CsrUint32 maxFlushTimeout;
   CsrUint32 bestEffortFlushTimeout;
}HciReadLocalAmpInfoReturn;

typedef struct HciReadLocalSupportedCommandsReturn
{
   HciStatusCode status;
   SupportedCommands supportedCommands;
}HciReadLocalSupportedCommandsReturn;

typedef struct HciReadLocalVersionInformationReturn
{
   HciStatusCode status;
   CsrUint8 hciVersion;
   CsrUint16 hciRevision;
   CsrUint8 palVersion;
   CsrUint16 manufacturerName;
   CsrUint16 palSubversion;
}HciReadLocalVersionInformationReturn;

typedef struct HciReadLocationDataReturn
{
   HciStatusCode status;
   LocationDomainAware locationDomainAware;
   CsrUint16 locationDomain;
   LocationDomainOptions locationDomainOptions;
   LocationOptions locationOptions;
}HciReadLocationDataReturn;

typedef struct HciReadLogicalLinkAcceptTimeoutReturn
{
   HciStatusCode status;
   CsrUint16 logicalLinkAcceptTimeout;
}HciReadLogicalLinkAcceptTimeoutReturn;

typedef struct HciReadLoopbackModeReturn
{
   HciStatusCode status;
   HciLoopbackMode loopbackMode;
}HciReadLoopbackModeReturn;

typedef struct HciReadRssiReturn
{
   HciStatusCode status;
   CsrUint16 handle;
   CsrUint8 rSSI;
}HciReadRssiReturn;

typedef struct HciResetFailedContactCounterReturn
{
   HciStatusCode status;
   CsrUint16 handle;
}HciResetFailedContactCounterReturn;

typedef struct ReturnParameters
{
   HciOpcode commandCode;
    union
    {
        HciStatusCode ampTestEndStatus;
        HciStatusCode enableAMPReceiverReportsStatus;
        HciStatusCode testModeStatus;
        HciFlushReturn flushReturn;
        HciLogicalLinkCancelReturn logicalLinkCancelReturn;
        HciNoOperationReturn noOperation;
        HciReadBestEffortFlushTimeoutReturn readBEFlushTimeoutReturn;
        HciReadConnectionAcceptTimeoutReturn readConnectionAcceptTimeout;
        HciReadDataBlockSizeReturn readDataBlockSizeReturn;
        HciReadFailedContactCounterReturn readFailedContactCounterReturn;
        HciReadLinkQualityReturn readLinkQualityReturn;
        HciReadLinkSupervisionTimeoutReturn readTimeoutReturn;
        HciReadLocalAmpAssocReturn readLocalAmpAssocReturn;
        HciReadLocalAmpInfoReturn readLocalAmpInfoReturn;
        HciReadLocalSupportedCommandsReturn readLocalSupportedCommandsReturn;
        HciReadLocalVersionInformationReturn readLocalVersionInformationReturn;
        HciReadLocationDataReturn readLocationDataReturn;
        HciReadLogicalLinkAcceptTimeoutReturn readLogicalLinkAcceptTimeout;
        HciReadLoopbackModeReturn readLoopbackReturn;
        HciReadRssiReturn readRSSIReturn;
        HciStatusCode resetStatus;
        HciResetFailedContactCounterReturn resetFailedContactCounterReturn;
        HciStatusCode setEventMaskStatus;
        HciStatusCode setEventMaskPage2Status;
        HciStatusCode writeBEFlushTimeoutReturn;
        HciStatusCode writeConnectionAcceptTimeoutStatus;
        HciWriteLinkSupervisionTimeoutReturn writeTimeoutReturn;
        HciStatusCode writeLocationDataStatus;
        HciStatusCode writeLogicalLinkAcceptTimeout;
        HciStatusCode writeLoopbackStatus;
        HciWriteRemoteAmpAssocReturn writeRemoteAmpAssocReturn;
    } hciReturnParam;
}ReturnParameters;


#ifdef __cplusplus
}
#endif
#endif  /*BT_AMP_HCI_XML_TYPES_H */
