/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef SCAN_MANAGER_XML_SIGNALS_H
#define SCAN_MANAGER_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define SM_SCAN_REQ_ID                                               0x3601
#define SM_SCAN_CFM_ID                                               0x3602
#define SM_SCAN_CANCEL_IND_ID                                        0x3603
#define SM_PAUSE_REQ_ID                                              0x3604
#define SM_PAUSE_CFM_ID                                              0x3605
#define SM_UNPAUSE_REQ_ID                                            0x3606
#define SM_UNPAUSE_CFM_ID                                            0x3607
#define SM_SCAN_UPDATE_IND_ID                                        0x3608
#define SM_SCAN_QUALITY_IND_ID                                       0x3609
#define SM_CHECK_CHANNELS_EXPIRY_TIMER_ID                            0x360A
#define SM_FALLBACK_EXPIRY_TIMER_ID                                  0x360B
#define SM_ADJUNCT_TECH_SIGNAL_IND_ID                                0x360C


/* -------------------------- sm_adjunct_tech_signal_ind -------------------------- */
typedef struct SmAdjunctTechSignalInd_Evt
{
    FsmEvent                        common;
} SmAdjunctTechSignalInd_Evt;

#define send_sm_adjunct_tech_signal_ind(context, pid) \
{ \
    SmAdjunctTechSignalInd_Evt *evt = (SmAdjunctTechSignalInd_Evt*) CsrPmalloc(sizeof(SmAdjunctTechSignalInd_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_ADJUNCT_TECH_SIGNAL_IND_ID); \
}

#define send_sm_adjunct_tech_signal_ind_external(context, pid) \
{ \
    SmAdjunctTechSignalInd_Evt *evt = (SmAdjunctTechSignalInd_Evt*) CsrPmalloc(sizeof(SmAdjunctTechSignalInd_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_ADJUNCT_TECH_SIGNAL_IND_ID); \
}

/* -------------------------- sm_pause_req -------------------------- */
typedef struct SmPauseReq_Evt
{
    FsmEvent                        common;
} SmPauseReq_Evt;

#define send_sm_pause_req(context, pid) \
{ \
    SmPauseReq_Evt *evt = (SmPauseReq_Evt*) CsrPmalloc(sizeof(SmPauseReq_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_PAUSE_REQ_ID); \
}

#define send_sm_pause_req_external(context, pid) \
{ \
    SmPauseReq_Evt *evt = (SmPauseReq_Evt*) CsrPmalloc(sizeof(SmPauseReq_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_PAUSE_REQ_ID); \
}

/* -------------------------- sm_pause_cfm -------------------------- */
typedef struct SmPauseCfm_Evt
{
    FsmEvent                        common;
} SmPauseCfm_Evt;

#define send_sm_pause_cfm(context, pid) \
{ \
    SmPauseCfm_Evt *evt = (SmPauseCfm_Evt*) CsrPmalloc(sizeof(SmPauseCfm_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_PAUSE_CFM_ID); \
}

#define send_sm_pause_cfm_external(context, pid) \
{ \
    SmPauseCfm_Evt *evt = (SmPauseCfm_Evt*) CsrPmalloc(sizeof(SmPauseCfm_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_PAUSE_CFM_ID); \
}

/* -------------------------- sm_scan_req -------------------------- */
typedef struct SmScanReq_Evt
{
    FsmEvent                        common;
    CsrUint32                       reqTime;
    CsrUint8                        channel;
    CsrUint8                        ssidCount;
    unifi_SSID                     *ssid;
    unifi_MACAddress                addr;
    CsrBool                         joinReq;
    CsrBool                         singleChannel;
    CsrBool                         cloakedSsidScan;
    unifi_ScanStopCondition         scanStopCondition;
    BssType                         bssType;
    CsrUint16                       channelTimeOverride;
} SmScanReq_Evt;

#define send_sm_scan_req(context, pid, p_reqTime, p_channel, p_ssidCount, p_ssid, p_addr, p_joinReq, p_singleChannel, p_cloakedSsidScan, p_scanStopCondition, p_bssType, p_channelTimeOverride) \
{ \
    SmScanReq_Evt *evt = (SmScanReq_Evt*) CsrPmalloc(sizeof(SmScanReq_Evt)); \
    evt->reqTime              = p_reqTime; \
    evt->channel              = p_channel; \
    evt->ssidCount            = p_ssidCount; \
    evt->ssid                 = p_ssid; \
    evt->addr                 = p_addr; \
    evt->joinReq              = p_joinReq; \
    evt->singleChannel        = p_singleChannel; \
    evt->cloakedSsidScan      = p_cloakedSsidScan; \
    evt->scanStopCondition    = p_scanStopCondition; \
    evt->bssType              = p_bssType; \
    evt->channelTimeOverride  = p_channelTimeOverride; \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_SCAN_REQ_ID); \
}

#define send_sm_scan_req_external(context, pid, p_reqTime, p_channel, p_ssidCount, p_ssid, p_addr, p_joinReq, p_singleChannel, p_cloakedSsidScan, p_scanStopCondition, p_bssType, p_channelTimeOverride) \
{ \
    SmScanReq_Evt *evt = (SmScanReq_Evt*) CsrPmalloc(sizeof(SmScanReq_Evt)); \
    evt->reqTime              = p_reqTime; \
    evt->channel              = p_channel; \
    evt->ssidCount            = p_ssidCount; \
    evt->ssid                 = p_ssid; \
    evt->addr                 = p_addr; \
    evt->joinReq              = p_joinReq; \
    evt->singleChannel        = p_singleChannel; \
    evt->cloakedSsidScan      = p_cloakedSsidScan; \
    evt->scanStopCondition    = p_scanStopCondition; \
    evt->bssType              = p_bssType; \
    evt->channelTimeOverride  = p_channelTimeOverride; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_SCAN_REQ_ID); \
}

/* -------------------------- sm_scan_cfm -------------------------- */
typedef struct SmScanCfm_Evt
{
    FsmEvent                        common;
    CsrBool                         joinScanResult;
    ResultCode                      scanResult;
    CsrUint16                       beaconPeriod;
} SmScanCfm_Evt;

#define send_sm_scan_cfm(context, pid, p_joinScanResult, p_scanResult, p_beaconPeriod) \
{ \
    SmScanCfm_Evt *evt = (SmScanCfm_Evt*) CsrPmalloc(sizeof(SmScanCfm_Evt)); \
    evt->joinScanResult       = p_joinScanResult; \
    evt->scanResult           = p_scanResult; \
    evt->beaconPeriod         = p_beaconPeriod; \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_SCAN_CFM_ID); \
}

#define send_sm_scan_cfm_external(context, pid, p_joinScanResult, p_scanResult, p_beaconPeriod) \
{ \
    SmScanCfm_Evt *evt = (SmScanCfm_Evt*) CsrPmalloc(sizeof(SmScanCfm_Evt)); \
    evt->joinScanResult       = p_joinScanResult; \
    evt->scanResult           = p_scanResult; \
    evt->beaconPeriod         = p_beaconPeriod; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_SCAN_CFM_ID); \
}

/* -------------------------- sm_scan_cancel_ind -------------------------- */
typedef struct SmScanCancelInd_Evt
{
    FsmEvent                        common;
    CsrUint32                       indTime;
    CsrBool                         preEmptiveScanFollowing;
} SmScanCancelInd_Evt;

#define send_sm_scan_cancel_ind(context, pid, p_indTime, p_preEmptiveScanFollowing) \
{ \
    SmScanCancelInd_Evt *evt = (SmScanCancelInd_Evt*) CsrPmalloc(sizeof(SmScanCancelInd_Evt)); \
    evt->indTime              = p_indTime; \
    evt->preEmptiveScanFollowing = p_preEmptiveScanFollowing; \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_SCAN_CANCEL_IND_ID); \
}

#define send_sm_scan_cancel_ind_external(context, pid, p_indTime, p_preEmptiveScanFollowing) \
{ \
    SmScanCancelInd_Evt *evt = (SmScanCancelInd_Evt*) CsrPmalloc(sizeof(SmScanCancelInd_Evt)); \
    evt->indTime              = p_indTime; \
    evt->preEmptiveScanFollowing = p_preEmptiveScanFollowing; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_SCAN_CANCEL_IND_ID); \
}

/* -------------------------- sm_scan_quality_ind -------------------------- */
typedef struct SmScanQualityInd_Evt
{
    FsmEvent                        common;
    unifi_BasicUsability            usability;
} SmScanQualityInd_Evt;

#define send_sm_scan_quality_ind(context, pid, p_usability) \
{ \
    SmScanQualityInd_Evt *evt = (SmScanQualityInd_Evt*) CsrPmalloc(sizeof(SmScanQualityInd_Evt)); \
    evt->usability            = p_usability; \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_SCAN_QUALITY_IND_ID); \
}

#define send_sm_scan_quality_ind_external(context, pid, p_usability) \
{ \
    SmScanQualityInd_Evt *evt = (SmScanQualityInd_Evt*) CsrPmalloc(sizeof(SmScanQualityInd_Evt)); \
    evt->usability            = p_usability; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_SCAN_QUALITY_IND_ID); \
}

/* -------------------------- sm_scan_update_ind -------------------------- */
typedef struct SmScanUpdateInd_Evt
{
    FsmEvent                        common;
    unifi_ScanUpdateAction          scanUpdateAction;
} SmScanUpdateInd_Evt;

#define send_sm_scan_update_ind(context, pid, p_scanUpdateAction) \
{ \
    SmScanUpdateInd_Evt *evt = (SmScanUpdateInd_Evt*) CsrPmalloc(sizeof(SmScanUpdateInd_Evt)); \
    evt->scanUpdateAction     = p_scanUpdateAction; \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_SCAN_UPDATE_IND_ID); \
}

#define send_sm_scan_update_ind_external(context, pid, p_scanUpdateAction) \
{ \
    SmScanUpdateInd_Evt *evt = (SmScanUpdateInd_Evt*) CsrPmalloc(sizeof(SmScanUpdateInd_Evt)); \
    evt->scanUpdateAction     = p_scanUpdateAction; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_SCAN_UPDATE_IND_ID); \
}

/* -------------------------- sm_unpause_req -------------------------- */
typedef struct SmUnpauseReq_Evt
{
    FsmEvent                        common;
} SmUnpauseReq_Evt;

#define send_sm_unpause_req(context, pid) \
{ \
    SmUnpauseReq_Evt *evt = (SmUnpauseReq_Evt*) CsrPmalloc(sizeof(SmUnpauseReq_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_UNPAUSE_REQ_ID); \
}

#define send_sm_unpause_req_external(context, pid) \
{ \
    SmUnpauseReq_Evt *evt = (SmUnpauseReq_Evt*) CsrPmalloc(sizeof(SmUnpauseReq_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_UNPAUSE_REQ_ID); \
}

/* -------------------------- sm_unpause_cfm -------------------------- */
typedef struct SmUnpauseCfm_Evt
{
    FsmEvent                        common;
} SmUnpauseCfm_Evt;

#define send_sm_unpause_cfm(context, pid) \
{ \
    SmUnpauseCfm_Evt *evt = (SmUnpauseCfm_Evt*) CsrPmalloc(sizeof(SmUnpauseCfm_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, SM_UNPAUSE_CFM_ID); \
}

#define send_sm_unpause_cfm_external(context, pid) \
{ \
    SmUnpauseCfm_Evt *evt = (SmUnpauseCfm_Evt*) CsrPmalloc(sizeof(SmUnpauseCfm_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, SM_UNPAUSE_CFM_ID); \
}



/* -------------------------- sm_check_channels_expiry_timer -------------------------- */
typedef struct SmCheckChannelsExpiryTimer_Evt
{
    FsmTimer                        common;
} SmCheckChannelsExpiryTimer_Evt;

#define send_sm_check_channels_expiry_timer(context, rettimerid, timeValue, timeExtraValue) \
{ \
    rettimerid = fsm_set_timer((context), (FsmTimer*)NULL, timeValue, timeExtraValue, SM_CHECK_CHANNELS_EXPIRY_TIMER_ID);\
}

/* -------------------------- sm_fallback_expiry_timer -------------------------- */
typedef struct SmFallbackExpiryTimer_Evt
{
    FsmTimer                        common;
} SmFallbackExpiryTimer_Evt;

#define send_sm_fallback_expiry_timer(context, rettimerid, timeValue, timeExtraValue) \
{ \
    rettimerid = fsm_set_timer((context), (FsmTimer*)NULL, timeValue, timeExtraValue, SM_FALLBACK_EXPIRY_TIMER_ID);\
}



#ifdef __cplusplus
}
#endif

#endif /* SCAN_MANAGER_XML_SIGNALS_H */
