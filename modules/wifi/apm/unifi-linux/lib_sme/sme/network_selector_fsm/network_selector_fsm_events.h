/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef NETWORK_SELECTOR_XML_SIGNALS_H
#define NETWORK_SELECTOR_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define NETWORK_SELECTOR_JOIN_REQ_ID                                 0x3A00
#define NETWORK_SELECTOR_JOIN_CFM_ID                                 0x3A01
#define NETWORK_SELECTOR_DETACH_REQ_ID                               0x3A02
#define NETWORK_SELECTOR_DETACH_CFM_ID                               0x3A03
#define NETWORK_SELECTOR_ROAM_IND_ID                                 0x3A04
#define NETWORK_SELECTOR_TERMINATE_REQ_ID                            0x3A05
#define NETWORK_SELECTOR_ROAM_REQ_ID                                 0x3A06
#define NETWORK_SELECTOR_ROAM_CFM_ID                                 0x3A07
#define NETWORK_SELECTOR_ADHOC_JOIN_SCAN_TIMER_ID                    0x3A08


/* -------------------------- network_selector_detach_req -------------------------- */
typedef struct NetworkSelectorDetachReq_Evt
{
    FsmEvent                        common;
} NetworkSelectorDetachReq_Evt;

#define send_network_selector_detach_req(context, pid) \
{ \
    NetworkSelectorDetachReq_Evt *evt = (NetworkSelectorDetachReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorDetachReq_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_DETACH_REQ_ID); \
}

#define send_network_selector_detach_req_external(context, pid) \
{ \
    NetworkSelectorDetachReq_Evt *evt = (NetworkSelectorDetachReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorDetachReq_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_DETACH_REQ_ID); \
}

/* -------------------------- network_selector_detach_cfm -------------------------- */
typedef struct NetworkSelectorDetachCfm_Evt
{
    FsmEvent                        common;
} NetworkSelectorDetachCfm_Evt;

#define send_network_selector_detach_cfm(context, pid) \
{ \
    NetworkSelectorDetachCfm_Evt *evt = (NetworkSelectorDetachCfm_Evt*) CsrPmalloc(sizeof(NetworkSelectorDetachCfm_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_DETACH_CFM_ID); \
}

#define send_network_selector_detach_cfm_external(context, pid) \
{ \
    NetworkSelectorDetachCfm_Evt *evt = (NetworkSelectorDetachCfm_Evt*) CsrPmalloc(sizeof(NetworkSelectorDetachCfm_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_DETACH_CFM_ID); \
}

/* -------------------------- network_selector_join_req -------------------------- */
typedef struct NetworkSelectorJoinReq_Evt
{
    FsmEvent                        common;
    CsrBool                         reassociate;
    CsrBool                         skipResetOnError;
    CsrBool                         hostAdhoc;
} NetworkSelectorJoinReq_Evt;

#define send_network_selector_join_req(context, pid, p_reassociate, p_skipResetOnError, p_hostAdhoc) \
{ \
    NetworkSelectorJoinReq_Evt *evt = (NetworkSelectorJoinReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorJoinReq_Evt)); \
    evt->reassociate          = p_reassociate; \
    evt->skipResetOnError     = p_skipResetOnError; \
    evt->hostAdhoc            = p_hostAdhoc; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_JOIN_REQ_ID); \
}

#define send_network_selector_join_req_external(context, pid, p_reassociate, p_skipResetOnError, p_hostAdhoc) \
{ \
    NetworkSelectorJoinReq_Evt *evt = (NetworkSelectorJoinReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorJoinReq_Evt)); \
    evt->reassociate          = p_reassociate; \
    evt->skipResetOnError     = p_skipResetOnError; \
    evt->hostAdhoc            = p_hostAdhoc; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_JOIN_REQ_ID); \
}

/* -------------------------- network_selector_join_cfm -------------------------- */
typedef struct NetworkSelectorJoinCfm_Evt
{
    FsmEvent                        common;
    unifi_Status                    status;
} NetworkSelectorJoinCfm_Evt;

#define send_network_selector_join_cfm(context, pid, p_status) \
{ \
    NetworkSelectorJoinCfm_Evt *evt = (NetworkSelectorJoinCfm_Evt*) CsrPmalloc(sizeof(NetworkSelectorJoinCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_JOIN_CFM_ID); \
}

#define send_network_selector_join_cfm_external(context, pid, p_status) \
{ \
    NetworkSelectorJoinCfm_Evt *evt = (NetworkSelectorJoinCfm_Evt*) CsrPmalloc(sizeof(NetworkSelectorJoinCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_JOIN_CFM_ID); \
}

/* -------------------------- network_selector_roam_req -------------------------- */
typedef struct NetworkSelectorRoamReq_Evt
{
    FsmEvent                        common;
    CsrBool                         reassociate;
    CsrBool                         skipResetOnError;
} NetworkSelectorRoamReq_Evt;

#define send_network_selector_roam_req(context, pid, p_reassociate, p_skipResetOnError) \
{ \
    NetworkSelectorRoamReq_Evt *evt = (NetworkSelectorRoamReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorRoamReq_Evt)); \
    evt->reassociate          = p_reassociate; \
    evt->skipResetOnError     = p_skipResetOnError; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_ROAM_REQ_ID); \
}

#define send_network_selector_roam_req_external(context, pid, p_reassociate, p_skipResetOnError) \
{ \
    NetworkSelectorRoamReq_Evt *evt = (NetworkSelectorRoamReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorRoamReq_Evt)); \
    evt->reassociate          = p_reassociate; \
    evt->skipResetOnError     = p_skipResetOnError; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_ROAM_REQ_ID); \
}

/* -------------------------- network_selector_roam_ind -------------------------- */
typedef struct NetworkSelectorRoamInd_Evt
{
    FsmEvent                        common;
    unifi_RoamReason                reason;
} NetworkSelectorRoamInd_Evt;

#define send_network_selector_roam_ind(context, pid, p_reason) \
{ \
    NetworkSelectorRoamInd_Evt *evt = (NetworkSelectorRoamInd_Evt*) CsrPmalloc(sizeof(NetworkSelectorRoamInd_Evt)); \
    evt->reason               = p_reason; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_ROAM_IND_ID); \
}

#define send_network_selector_roam_ind_external(context, pid, p_reason) \
{ \
    NetworkSelectorRoamInd_Evt *evt = (NetworkSelectorRoamInd_Evt*) CsrPmalloc(sizeof(NetworkSelectorRoamInd_Evt)); \
    evt->reason               = p_reason; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_ROAM_IND_ID); \
}

/* -------------------------- network_selector_roam_cfm -------------------------- */
typedef struct NetworkSelectorRoamCfm_Evt
{
    FsmEvent                        common;
    unifi_Status                    status;
} NetworkSelectorRoamCfm_Evt;

#define send_network_selector_roam_cfm(context, pid, p_status) \
{ \
    NetworkSelectorRoamCfm_Evt *evt = (NetworkSelectorRoamCfm_Evt*) CsrPmalloc(sizeof(NetworkSelectorRoamCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_ROAM_CFM_ID); \
}

#define send_network_selector_roam_cfm_external(context, pid, p_status) \
{ \
    NetworkSelectorRoamCfm_Evt *evt = (NetworkSelectorRoamCfm_Evt*) CsrPmalloc(sizeof(NetworkSelectorRoamCfm_Evt)); \
    evt->status               = p_status; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_ROAM_CFM_ID); \
}

/* -------------------------- network_selector_terminate_req -------------------------- */
typedef struct NetworkSelectorTerminateReq_Evt
{
    FsmEvent                        common;
} NetworkSelectorTerminateReq_Evt;

#define send_network_selector_terminate_req(context, pid) \
{ \
    NetworkSelectorTerminateReq_Evt *evt = (NetworkSelectorTerminateReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorTerminateReq_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_TERMINATE_REQ_ID); \
}

#define send_network_selector_terminate_req_external(context, pid) \
{ \
    NetworkSelectorTerminateReq_Evt *evt = (NetworkSelectorTerminateReq_Evt*) CsrPmalloc(sizeof(NetworkSelectorTerminateReq_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, NETWORK_SELECTOR_TERMINATE_REQ_ID); \
}



/* -------------------------- network_selector_adhoc_join_scan_timer -------------------------- */
typedef struct NetworkSelectorAdhocJoinScanTimer_Evt
{
    FsmTimer                        common;
} NetworkSelectorAdhocJoinScanTimer_Evt;

#define send_network_selector_adhoc_join_scan_timer(context, rettimerid, timeValue, timeExtraValue) \
{ \
    rettimerid = fsm_set_timer((context), (FsmTimer*)NULL, timeValue, timeExtraValue, NETWORK_SELECTOR_ADHOC_JOIN_SCAN_TIMER_ID);\
}



#ifdef __cplusplus
}
#endif

#endif /* NETWORK_SELECTOR_XML_SIGNALS_H */
