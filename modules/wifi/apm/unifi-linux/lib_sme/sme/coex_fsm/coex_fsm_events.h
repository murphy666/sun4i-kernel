/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef COEX_XML_SIGNALS_H
#define COEX_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define COEX_CONNECTING_IND_ID                                       0x3E80
#define COEX_CONNECTED_IND_ID                                        0x3E81
#define COEX_DISCONNECTED_IND_ID                                     0x3E82
#define COEX_CONFIG_UPDATE_IND_ID                                    0x3E83
#define COEX_POWER_UPDATE_IND_ID                                     0x3E84
#define COEX_CONNECTION_DELAY_TIMER_ID                               0x3E85
#define COEX_TRAFFIC_CLASSIFICATION_IND_ID                           0x3E86
#define COEX_TRAFFIC_TICK_TIMER_ID                                   0x3E87


/* -------------------------- coex_config_update_ind -------------------------- */
typedef struct CoexConfigUpdateInd_Evt
{
    FsmEvent                        common;
    CsrBool                         oldEnabledValue;
} CoexConfigUpdateInd_Evt;

#define send_coex_config_update_ind(context, pid, p_oldEnabledValue) \
{ \
    CoexConfigUpdateInd_Evt *evt = (CoexConfigUpdateInd_Evt*) CsrPmalloc(sizeof(CoexConfigUpdateInd_Evt)); \
    evt->oldEnabledValue      = p_oldEnabledValue; \
    fsm_send_event(context, (FsmEvent*)evt, pid, COEX_CONFIG_UPDATE_IND_ID); \
}

#define send_coex_config_update_ind_external(context, pid, p_oldEnabledValue) \
{ \
    CoexConfigUpdateInd_Evt *evt = (CoexConfigUpdateInd_Evt*) CsrPmalloc(sizeof(CoexConfigUpdateInd_Evt)); \
    evt->oldEnabledValue      = p_oldEnabledValue; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, COEX_CONFIG_UPDATE_IND_ID); \
}

/* -------------------------- coex_connected_ind -------------------------- */
typedef struct CoexConnectedInd_Evt
{
    FsmEvent                        common;
} CoexConnectedInd_Evt;

#define send_coex_connected_ind(context, pid) \
{ \
    CoexConnectedInd_Evt *evt = (CoexConnectedInd_Evt*) CsrPmalloc(sizeof(CoexConnectedInd_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, COEX_CONNECTED_IND_ID); \
}

#define send_coex_connected_ind_external(context, pid) \
{ \
    CoexConnectedInd_Evt *evt = (CoexConnectedInd_Evt*) CsrPmalloc(sizeof(CoexConnectedInd_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, COEX_CONNECTED_IND_ID); \
}

/* -------------------------- coex_connecting_ind -------------------------- */
typedef struct CoexConnectingInd_Evt
{
    FsmEvent                        common;
} CoexConnectingInd_Evt;

#define send_coex_connecting_ind(context, pid) \
{ \
    CoexConnectingInd_Evt *evt = (CoexConnectingInd_Evt*) CsrPmalloc(sizeof(CoexConnectingInd_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, COEX_CONNECTING_IND_ID); \
}

#define send_coex_connecting_ind_external(context, pid) \
{ \
    CoexConnectingInd_Evt *evt = (CoexConnectingInd_Evt*) CsrPmalloc(sizeof(CoexConnectingInd_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, COEX_CONNECTING_IND_ID); \
}

/* -------------------------- coex_disconnected_ind -------------------------- */
typedef struct CoexDisconnectedInd_Evt
{
    FsmEvent                        common;
} CoexDisconnectedInd_Evt;

#define send_coex_disconnected_ind(context, pid) \
{ \
    CoexDisconnectedInd_Evt *evt = (CoexDisconnectedInd_Evt*) CsrPmalloc(sizeof(CoexDisconnectedInd_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, COEX_DISCONNECTED_IND_ID); \
}

#define send_coex_disconnected_ind_external(context, pid) \
{ \
    CoexDisconnectedInd_Evt *evt = (CoexDisconnectedInd_Evt*) CsrPmalloc(sizeof(CoexDisconnectedInd_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, COEX_DISCONNECTED_IND_ID); \
}

/* -------------------------- coex_power_update_ind -------------------------- */
typedef struct CoexPowerUpdateInd_Evt
{
    FsmEvent                        common;
} CoexPowerUpdateInd_Evt;

#define send_coex_power_update_ind(context, pid) \
{ \
    CoexPowerUpdateInd_Evt *evt = (CoexPowerUpdateInd_Evt*) CsrPmalloc(sizeof(CoexPowerUpdateInd_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, COEX_POWER_UPDATE_IND_ID); \
}

#define send_coex_power_update_ind_external(context, pid) \
{ \
    CoexPowerUpdateInd_Evt *evt = (CoexPowerUpdateInd_Evt*) CsrPmalloc(sizeof(CoexPowerUpdateInd_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, COEX_POWER_UPDATE_IND_ID); \
}

/* -------------------------- coex_traffic_classification_ind -------------------------- */
typedef struct CoexTrafficClassificationInd_Evt
{
    FsmEvent                        common;
    unifi_TrafficType               trafficType;
    CsrUint16                       period;
} CoexTrafficClassificationInd_Evt;

#define send_coex_traffic_classification_ind(context, pid, p_trafficType, p_period) \
{ \
    CoexTrafficClassificationInd_Evt *evt = (CoexTrafficClassificationInd_Evt*) CsrPmalloc(sizeof(CoexTrafficClassificationInd_Evt)); \
    evt->trafficType          = p_trafficType; \
    evt->period               = p_period; \
    fsm_send_event(context, (FsmEvent*)evt, pid, COEX_TRAFFIC_CLASSIFICATION_IND_ID); \
}

#define send_coex_traffic_classification_ind_external(context, pid, p_trafficType, p_period) \
{ \
    CoexTrafficClassificationInd_Evt *evt = (CoexTrafficClassificationInd_Evt*) CsrPmalloc(sizeof(CoexTrafficClassificationInd_Evt)); \
    evt->trafficType          = p_trafficType; \
    evt->period               = p_period; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, COEX_TRAFFIC_CLASSIFICATION_IND_ID); \
}



/* -------------------------- coex_connection_delay_timer -------------------------- */
typedef struct CoexConnectionDelayTimer_Evt
{
    FsmTimer                        common;
} CoexConnectionDelayTimer_Evt;

#define send_coex_connection_delay_timer(context, rettimerid, timeValue, timeExtraValue) \
{ \
    rettimerid = fsm_set_timer((context), (FsmTimer*)NULL, timeValue, timeExtraValue, COEX_CONNECTION_DELAY_TIMER_ID);\
}

/* -------------------------- coex_traffic_tick_timer -------------------------- */
typedef struct CoexTrafficTickTimer_Evt
{
    FsmTimer                        common;
} CoexTrafficTickTimer_Evt;

#define send_coex_traffic_tick_timer(context, rettimerid, timeValue, timeExtraValue) \
{ \
    rettimerid = fsm_set_timer((context), (FsmTimer*)NULL, timeValue, timeExtraValue, COEX_TRAFFIC_TICK_TIMER_ID);\
}



#ifdef __cplusplus
}
#endif

#endif /* COEX_XML_SIGNALS_H */
