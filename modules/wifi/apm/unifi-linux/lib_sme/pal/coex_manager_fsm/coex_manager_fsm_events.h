/* This is an autogenerated file */
/* Tag: noCheckHeader */
/*    Copyright (C) Cambridge Silicon Radio Ltd 2009. All rights reserved. */
/* */
/*   Refer to LICENSE.txt included with this source for details on the */
/*   license terms. */

#ifndef COEX_MANAGER_XML_SIGNALS_H
#define COEX_MANAGER_XML_SIGNALS_H

#ifdef __cplusplus
extern "C" {
#endif

#define PAL_COEX_LINK_CONNECTING_REQ_ID                              0x2401
#define PAL_COEX_LINK_CONNECTED_REQ_ID                               0x2402
#define PAL_COEX_LINK_CONNECTED_CFM_ID                               0x2403
#define PAL_COEX_LINK_DISCONNECTED_REQ_ID                            0x2404
#define PAL_COEX_LINK_DISCONNECTED_CFM_ID                            0x2405
#define PAL_COEX_LOCAL_ACTIVITY_REPORT_IND_ID                        0x2406
#define PAL_COEX_REMOTE_ACTIVITY_REPORT_REQ_ID                       0x2407


/* -------------------------- pal_coex_link_connected_req -------------------------- */
typedef struct PalCoexLinkConnectedReq_Evt
{
    FsmEvent                        common;
    CsrUint8                        physicalLinkHandle;
} PalCoexLinkConnectedReq_Evt;

#define send_pal_coex_link_connected_req(context, pid, p_physicalLinkHandle) \
{ \
    PalCoexLinkConnectedReq_Evt *evt = (PalCoexLinkConnectedReq_Evt*) CsrPmalloc(sizeof(PalCoexLinkConnectedReq_Evt)); \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_CONNECTED_REQ_ID); \
}

#define send_pal_coex_link_connected_req_external(context, pid, p_physicalLinkHandle) \
{ \
    PalCoexLinkConnectedReq_Evt *evt = (PalCoexLinkConnectedReq_Evt*) CsrPmalloc(sizeof(PalCoexLinkConnectedReq_Evt)); \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_CONNECTED_REQ_ID); \
}

/* -------------------------- pal_coex_link_connected_cfm -------------------------- */
typedef struct PalCoexLinkConnectedCfm_Evt
{
    FsmEvent                        common;
} PalCoexLinkConnectedCfm_Evt;

#define send_pal_coex_link_connected_cfm(context, pid) \
{ \
    PalCoexLinkConnectedCfm_Evt *evt = (PalCoexLinkConnectedCfm_Evt*) CsrPmalloc(sizeof(PalCoexLinkConnectedCfm_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_CONNECTED_CFM_ID); \
}

#define send_pal_coex_link_connected_cfm_external(context, pid) \
{ \
    PalCoexLinkConnectedCfm_Evt *evt = (PalCoexLinkConnectedCfm_Evt*) CsrPmalloc(sizeof(PalCoexLinkConnectedCfm_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_CONNECTED_CFM_ID); \
}

/* -------------------------- pal_coex_link_connecting_req -------------------------- */
typedef struct PalCoexLinkConnectingReq_Evt
{
    FsmEvent                        common;
    CsrUint8                        channel;
} PalCoexLinkConnectingReq_Evt;

#define send_pal_coex_link_connecting_req(context, pid, p_channel) \
{ \
    PalCoexLinkConnectingReq_Evt *evt = (PalCoexLinkConnectingReq_Evt*) CsrPmalloc(sizeof(PalCoexLinkConnectingReq_Evt)); \
    evt->channel              = p_channel; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_CONNECTING_REQ_ID); \
}

#define send_pal_coex_link_connecting_req_external(context, pid, p_channel) \
{ \
    PalCoexLinkConnectingReq_Evt *evt = (PalCoexLinkConnectingReq_Evt*) CsrPmalloc(sizeof(PalCoexLinkConnectingReq_Evt)); \
    evt->channel              = p_channel; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_CONNECTING_REQ_ID); \
}

/* -------------------------- pal_coex_link_disconnected_req -------------------------- */
typedef struct PalCoexLinkDisconnectedReq_Evt
{
    FsmEvent                        common;
    CsrUint8                        physicalLinkHandle;
} PalCoexLinkDisconnectedReq_Evt;

#define send_pal_coex_link_disconnected_req(context, pid, p_physicalLinkHandle) \
{ \
    PalCoexLinkDisconnectedReq_Evt *evt = (PalCoexLinkDisconnectedReq_Evt*) CsrPmalloc(sizeof(PalCoexLinkDisconnectedReq_Evt)); \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_DISCONNECTED_REQ_ID); \
}

#define send_pal_coex_link_disconnected_req_external(context, pid, p_physicalLinkHandle) \
{ \
    PalCoexLinkDisconnectedReq_Evt *evt = (PalCoexLinkDisconnectedReq_Evt*) CsrPmalloc(sizeof(PalCoexLinkDisconnectedReq_Evt)); \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_DISCONNECTED_REQ_ID); \
}

/* -------------------------- pal_coex_link_disconnected_cfm -------------------------- */
typedef struct PalCoexLinkDisconnectedCfm_Evt
{
    FsmEvent                        common;
} PalCoexLinkDisconnectedCfm_Evt;

#define send_pal_coex_link_disconnected_cfm(context, pid) \
{ \
    PalCoexLinkDisconnectedCfm_Evt *evt = (PalCoexLinkDisconnectedCfm_Evt*) CsrPmalloc(sizeof(PalCoexLinkDisconnectedCfm_Evt)); \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_DISCONNECTED_CFM_ID); \
}

#define send_pal_coex_link_disconnected_cfm_external(context, pid) \
{ \
    PalCoexLinkDisconnectedCfm_Evt *evt = (PalCoexLinkDisconnectedCfm_Evt*) CsrPmalloc(sizeof(PalCoexLinkDisconnectedCfm_Evt)); \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_LINK_DISCONNECTED_CFM_ID); \
}

/* -------------------------- pal_coex_local_activity_report_ind -------------------------- */
typedef struct PalCoexLocalActivityReportInd_Evt
{
    FsmEvent                        common;
    PalActivityReport               activityReport;
} PalCoexLocalActivityReportInd_Evt;

#define send_pal_coex_local_activity_report_ind(context, pid, p_activityReport) \
{ \
    PalCoexLocalActivityReportInd_Evt *evt = (PalCoexLocalActivityReportInd_Evt*) CsrPmalloc(sizeof(PalCoexLocalActivityReportInd_Evt)); \
    evt->activityReport       = p_activityReport; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_LOCAL_ACTIVITY_REPORT_IND_ID); \
}

#define send_pal_coex_local_activity_report_ind_external(context, pid, p_activityReport) \
{ \
    PalCoexLocalActivityReportInd_Evt *evt = (PalCoexLocalActivityReportInd_Evt*) CsrPmalloc(sizeof(PalCoexLocalActivityReportInd_Evt)); \
    evt->activityReport       = p_activityReport; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_LOCAL_ACTIVITY_REPORT_IND_ID); \
}

/* -------------------------- pal_coex_remote_activity_report_req -------------------------- */
typedef struct PalCoexRemoteActivityReportReq_Evt
{
    FsmEvent                        common;
    CsrUint8                        physicalLinkHandle;
    PalActivityReport               activityReport;
} PalCoexRemoteActivityReportReq_Evt;

#define send_pal_coex_remote_activity_report_req(context, pid, p_physicalLinkHandle, p_activityReport) \
{ \
    PalCoexRemoteActivityReportReq_Evt *evt = (PalCoexRemoteActivityReportReq_Evt*) CsrPmalloc(sizeof(PalCoexRemoteActivityReportReq_Evt)); \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->activityReport       = p_activityReport; \
    fsm_send_event(context, (FsmEvent*)evt, pid, PAL_COEX_REMOTE_ACTIVITY_REPORT_REQ_ID); \
}

#define send_pal_coex_remote_activity_report_req_external(context, pid, p_physicalLinkHandle, p_activityReport) \
{ \
    PalCoexRemoteActivityReportReq_Evt *evt = (PalCoexRemoteActivityReportReq_Evt*) CsrPmalloc(sizeof(PalCoexRemoteActivityReportReq_Evt)); \
    evt->physicalLinkHandle   = p_physicalLinkHandle; \
    evt->activityReport       = p_activityReport; \
    fsm_send_event_external(context, (FsmEvent*)evt, pid, PAL_COEX_REMOTE_ACTIVITY_REPORT_REQ_ID); \
}





#ifdef __cplusplus
}
#endif

#endif /* COEX_MANAGER_XML_SIGNALS_H */
